<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ecw - Tag - Maki's adventure | Internet of things, IoT, ICS, forensic, pentest, red team &amp; more :)</title><link>maki.bzh/tags/ecw/</link><description>ecw - Tag - Maki's adventure | Internet of things, IoT, ICS, forensic, pentest, red team &amp; more :)</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 22 Oct 2018 21:57:40 +0800</lastBuildDate><atom:link href="maki.bzh/tags/ecw/" rel="self" type="application/rss+xml"/><item><title>[European Cyber Week] - AdmYSion</title><link>maki.bzh/writeups/ecw2018admyssion/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018admyssion/</guid><description>State of the art We only have a login form in front of us:
My first move was trying an SQL injection&amp;hellip; It was useless, in fact it&amp;rsquo;s an LDAP injection:
Our little asterisk * is matching with all the accounts in the LDAP base, it&amp;rsquo;s now time to script :D
Blind LDAP Injection Because I already did an LDAP injection on a famous french challenge platform (it starts by root and ends by -me.</description></item><item><title>[European Cyber Week] - Chatbot</title><link>maki.bzh/writeups/ecw2018chatbot/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018chatbot/</guid><description>Find the vulnerability To begin with, I just played with the binary, trying to find bugs in it&amp;hellip; After a few seconds I found this:
Ok, maybe there is something here, let&amp;rsquo;s open IDA :D (I hate it).
Framed in red: A few malloc declaration. Purple highlight: nickname variable. Green highlight: chatbot variable. According to the previous picture, we can assume that the heap looks like this:
Ok, so we saw that the program crashes when I enter too many bytes, let&amp;rsquo;s see how many it takes:</description></item><item><title>[European Cyber Week] - Drone wars</title><link>maki.bzh/writeups/ecw2018dronewars/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018dronewars/</guid><description>Drone Wars 1 State of the art We have 2 files: Capture.zip and capture.wav. There is a binary file in the zip archive, don&amp;rsquo;t worry about it for now.
After several hours of crawling the internet searching for datas about the .wav files, I found a stego technic: SSTV.
https://medium.com/@sumit.arora/audio-steganography-the-art-of-hiding-secrets-within-earshot-part-2-of-2-c76b1be719b3
I found a tool for linux: qsstv.
Decoding the .wav I run QSSTV with VLC in background, set my audio output into QSSTV, and:</description></item><item><title>[European Cyber Week] - Intrusion</title><link>maki.bzh/writeups/ecw2018intrusion/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018intrusion/</guid><description>Intrusion 1/4 State of the art I start this challenge with a website:
web150-smartstuff.challenge-ecw.fr
Nothing really interesting at first glance. After digging a bit in HTML source code, I notice 2 pages:
thor.css thor.js Thor.css When I checked this file, I noticed a different subdomain:
web150_dev.challenge-ecw.fr
Flag Then I just curl this new subdomain:
1 2 3 4 $ curl -v -H &amp;#39;User-Agent: Chrome&amp;#39; https://web150_dev.challenge-ecw.fr [...] ECW{5822a94206522fe5382d2f00acc5cadf} [...] Intrusion 2/4 State of the art Ok, now we&amp;rsquo;re on the dev platform.</description></item><item><title>[European Cyber Week] - SysIA</title><link>maki.bzh/writeups/ecw2018sysia/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018sysia/</guid><description>State of the art A nice cyber-hacker-haxxor-website-of-death containing a magical robots.txt file:
1 2 User-agent: * Disallow: /notinterestingfile.php Local file include Let&amp;rsquo;s try something:
https://web075-sysia.challenge-ecw.fr/notinterestingfile.php?page=../../../../../../../etc/passwd
1 root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync❌100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network❌101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve❌102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy❌103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false _apt❌104:65534::/nonexistent:/bin/false Ok, it works, there is only one user with a /bin/bash.</description></item><item><title>[European Cyber Week] - Troll.jsp</title><link>maki.bzh/writeups/ecw2018trolljsp/</link><pubDate>Mon, 22 Oct 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/writeups/ecw2018trolljsp/</guid><description><![CDATA[State of the art A marvelous Java website, I looooove Java (joke.), so the flag appears to have been stolen:
I had to guess the flag.jsp page:
On md5decrypt.net, this hash gives us: swp, it looks like a backup file of vim. Let&rsquo;s try something like .flag.jsp.swp.
Backup file Oh, looks like we have the code of the flag.jsp page:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &lt;%@ page language=&#34;java&#34; contentType=&#34;text/html; charset=UTF-8&#34; pageEncoding=&#34;UTF-8&#34;%&gt; &lt;%@ taglib prefix = &#34;s&#34; uri = &#34;/struts-tags&#34; %&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Flag page!]]></description></item><item><title>Python3 Requests for fun and... Ban</title><link>maki.bzh/shorts/pythonrequestforban/</link><pubDate>Mon, 22 Jan 2018 21:57:40 +0800</pubDate><author>Maki</author><guid>maki.bzh/shorts/pythonrequestforban/</guid><description><![CDATA[The goal I always wanted to learn how to use requests library in Python3. It&rsquo;s very helpful in daily life or in CTF&hellip;
And actually, there is EuropeanCyberWeek CTF, so let&rsquo;s try to do something useful: Auto flag submitter
State of the art First of all, I need the requests structure, to get this information, just open BurpSuite (if you&rsquo;re a bit stupid like me), or you&rsquo;re Firefox web console and request the chosen challenge (Drone Wars 3 for example).]]></description></item></channel></rss>